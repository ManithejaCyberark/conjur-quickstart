<?xml version = '1.0' encoding = 'UTF-8'?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Thu Apr 08 19:27:41 IST 2010
  Author:  nitpatel
  Purpose: Asynchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--><process name="ApprovalProcess" targetNamespace="http://xmlns.oracle.com/ApprovalApp_jws/PRENCServiceAccount/ApprovalProcess" xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:client="http://xmlns.oracle.com/ApprovalApp_jws/PRENCServiceAccount/ApprovalProcess" xmlns:ora="http://schemas.oracle.com/xpath/extension" xmlns:bpelx="http://schemas.oracle.com/bpel/extension" xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:ns1="http://wls.ws.workflowservice.platform.iam.oracle/" xmlns:ns2="http://xmlns.oracle.com/bpel/workflow/taskService" xmlns:ns4="http://xmlns.oracle.com/request/RequestDetails" xmlns:ns3="http://xmlns.oracle.com/ApprovalApp/PRENCServiceAccount/ApprovalProcess" xmlns:task="http://xmlns.oracle.com/bpel/workflow/task" xmlns:wfcommon="http://xmlns.oracle.com/bpel/workflow/common" xmlns:ns6="http://xmlns.oracle.com/bpel/workflow/routingSlip" xmlns:ns5="http://xmlns.oracle.com/bpel/workflow/TaskEvidenceService" xmlns:ns7="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20" xmlns:ns10="http://docs.oasis-open.org/wsbpel/2.0/process/executable" xmlns:ns9="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc" xmlns:ns12="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue" xmlns:ns13="http://schemas.oracle.com/bpel/extension/xpath/function/xdk" xmlns:ns11="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions" xmlns:ns8="http://schemas.oracle.com/xpath/extension/ldap" xmlns:ns14="http://www.w3.org/2005/08/addressing" xmlns:ns15="http://xmlns.oracle.com/RequestServiceApp_jws/RequestDataService/RequestDataService" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns16="http://xmlns.oracle.com/RequestServiceApp/RequestDataService/RequestData" xmlns:ns17="http://xmlns.oracle.com/RequestServiceApp/RequestDataService/UserData" xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath" xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions" xmlns:ess="http://xmlns.oracle.com/scheduler" xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns18="http://xmlns.oracle.com/ias/pcbpel/NotificationService" xmlns:ns19="http://xmlns.oracle.com/RequestServiceApp/RequestDataService/GeneralData" xmlns:wf="http://schemas.oracle.com/bpel/extensions/workflow" xmlns:ns20="http://schemas.oracle.com/bpel/extension/workflow" id="BpPrc0">

    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        PARTNERLINKS                                                      
        List of services participating in this BPEL process               
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <bpelx:annotation>
        <bpelx:analysis>
            <bpelx:property name="wsdlFile">
                ApprovalProcess.wsdl
            </bpelx:property>
        </bpelx:analysis>
    </bpelx:annotation>
    <partnerLinks>
        <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
        <partnerLink name="RequestApprovalService" partnerLinkType="client:ApprovalProcess" myRole="ApprovalProcessProvider" partnerRole="ApprovalProcessRequester"/>
        <partnerLink name="CallbackService" partnerRole="CallbackService_Role" partnerLinkType="ns1:CallbackService_PL"/>
        <partnerLink myRole="TaskServiceCallbackListener" name="ApprovalTask.TaskService_1" partnerRole="TaskService" partnerLinkType="ns2:TaskService"/>
        <partnerLink name="RequestWSPartnerLink" partnerLinkType="ns15:RequestDataService" partnerRole="RequestDataServiceProvider"/>
        <partnerLink name="NotificationService1" partnerLinkType="ns18:NotificationServiceLink" partnerRole="NotificationServiceProvider"/>
        <partnerLink name="NotificationService2" partnerLinkType="ns18:NotificationServiceLink" partnerRole="NotificationServiceProvider"/>
    </partnerLinks>

    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        VARIABLES                                                        
        List of messages and XML documents used within this BPEL process 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <variables>
        <!-- Reference to the message passed as input during initiation -->
        <variable name="inputVariable" messageType="client:ApprovalProcessRequestMessage"/>

        <!-- Reference to the message that will be sent back to the requester during callback -->
        <variable name="outputVariable" messageType="client:ApprovalProcessResponseMessage"/>
        <variable name="Invoke_1_callback_InputVariable_1" messageType="ns1:callback"/>
        <variable name="Invoke_1_callback_OutputVariable_1" messageType="ns1:callbackResponse"/>
        <variable name="partnerLink" element="ns14:EndpointReference"/>
        <variable name="ApprovalTask_1_globalVariable" messageType="ns2:taskMessage"/>
        <variable name="RequestID" messageType="ns15:RequestDataServiceRequestMessage"/>
        <variable name="getMAdd_getUserDetails_OutputVariable" messageType="ns15:UserDataServiceResponseMessage"/>
        <variable name="getMAdd_getRequestDetails_OutputVariable" messageType="ns15:RequestDataServiceResponseMessage"/>
        <variable name="EmailAttribute" type="xsd:string"/>
        <variable name="groupName" type="xsd:string"/>
        <variable name="commentc" type="xsd:string"/>
        <variable name="oimurl" type="xsd:string"/>
        <variable name="OIMServer" type="xsd:string"/>
        <variable name="AdminGroupEmail" type="xsd:string"/>
        <variable name="ApprovalTask_2_globalVariable" messageType="ns2:taskMessage"/>
        <variable name="ApprovalTask_3_globalVariable" messageType="ns2:taskMessage"/>
        <variable name="madd" type="xsd:string"/>
        <variable name="initiateTask_ApprovalTask_1_reinitiateTask_InputVariable" messageType="ns2:reinitiateTaskMessage"/>
        <variable name="initiateTask_ApprovalTask_1_reinitiateTask_OutputVariable" messageType="ns2:reinitiateTaskResponseMessage"/>
        <variable name="reinitiateTask_ApprovalTask_3_initiateTask_InputVariable" messageType="ns2:initiateTaskMessage"/>
        <variable name="reinitiateTask_ApprovalTask_3_initiateTask_OutputVariable" messageType="ns2:initiateTaskResponseMessage"/>
        <variable name="Invoke1_getRequestDetails_OutputVariable" messageType="ns15:RequestDataServiceResponseMessage"/>
        <variable name="ApproverComment" type="xsd:string"/>
        <variable name="userEmail" type="xsd:string"/>
        <variable name="SKIP_ISOIMO" type="xsd:string"/>
        <variable name="RequestByManager" type="xsd:string"/>
        <variable name="ADSV_ACCOUNT" type="xsd:string"/>
        <variable name="EnvPwd" type="xsd:string"/>
        <variable name="ADSV_DEPT" type="xsd:string"/>
        <variable name="USR_DEPT" type="xsd:string"/>
        <variable name="SupportEmail" type="xsd:string"/>
        <variable name="NO_REQUEST" type="xsd:string"/>
        <variable name="PREV_REQ" type="xsd:string"/>
        <variable name="EmailTemp" type="xsd:string"/>
        <variable name="RequestForOthers" type="xsd:string"/>
        <variable name="callbackServiceUrl" type="xsd:string"/>
        <variable name="webserUrl" type="xsd:string"/>
        <variable name="mcurl" type="xsd:string"/>
        <variable name="NoServiceAccount" type="xsd:string"/>
        <variable name="ServiceDetails" type="xsd:string"/>
        <variable name="PowerShellScript" type="xsd:string"/>
        <variable name="DistributionList" type="xsd:string"/>
        <variable name="OudValue" type="xsd:string"/>
        <variable name="AwsAccount" type="xsd:string"/>
        <variable name="AwsRole" type="xsd:string"/>
        <variable name="OthersEmail" type="xsd:string"/>
        <variable name="SCH_JOB" type="xsd:string"/>
        <variable name="DEPT_PREFIX" type="xsd:string"/>
        <variable name="MGR_STATUS" type="xsd:string"/>
        <variable name="DbName" type="xsd:string"/>
        <variable name="DbUserId" type="xsd:string"/>
        <variable name="DbPwd" type="xsd:string"/>
        <variable name="DbUrl" type="xsd:string"/>
    </variables>
    
    <faultHandlers id="BpFhs0">
        <catchAll id="BpCAl0">
            <sequence id="BpSeq0">
                <assign name="AssignPartnerLink" id="BpAss0">
                    <copy>
                        <from expression="ora:getFaultAsString()"/>
                        <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
                    </copy>
                    <copy>
                        <from expression="ora:getConversationId()"/>
                        <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
                    </copy>
                    <copy>
                        <from expression="ora:getFaultAsString()"/>
                        <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
                    </copy>
                    <copy>
                        <from>
                            <EndpointReference xmlns="http://www.w3.org/2005/08/addressing">
                                <Address/>
                            </EndpointReference>
                        </from>
                        <to variable="partnerLink"/>
                    </copy>
                    <copy>
                      <!--  <from variable="inputVariable" part="payload"
                              query="/ns3:process/ns4:url"/> -->
                        <from expression="bpws:getVariableData('callbackServiceUrl')"/>
                        <to query="/ns14:EndpointReference/ns14:Address" variable="partnerLink"/>
                    </copy>
                    <copy>
                        <from variable="partnerLink"/>
                        <to partnerLink="CallbackService"/>
                    </copy>
                </assign>
                <invoke name="InvokeErrorCallback" inputVariable="Invoke_1_callback_InputVariable_1" outputVariable="Invoke_1_callback_OutputVariable_1" portType="ns1:CallbackService" partnerLink="CallbackService" operation="callback" id="BpInv0"/>
            </sequence>
        </catchAll>
    </faultHandlers>

    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
       ORCHESTRATION LOGIC                                               
       Set of activities coordinating the flow of messages across the    
       services integrated within this business process                  
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <sequence name="main" id="BpSeq1">
        <!-- Receive input from requestor. (Note: This maps to operation defined in ApprovalProcess.wsdl) --><receive name="receiveInput" partnerLink="RequestApprovalService" portType="client:ApprovalProcess" operation="process" variable="inputVariable" createInstance="yes" id="BpRcv0"/>
        <bpelx:exec name="set_webserver" version="1.5" id="BxExe0">
            System.out.println("Setting WebService");                            
                                                                  
try {                
              
              
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                   
            String hostName = localMachine.getHostName().toString();      
            String webUrl = ""; //"http://" +hostName +":15000/";     
            String oimURL="";   
            System.out.println("hostName of local machine: " + hostName);    
      
 
  
            String callbackServiceUrl= ""; //"http://"+hostName+":15000"+"/workflowservice/CallbackService";   
            //setVariableData("callbackServiceUrl",callbackServiceUrl);   
            String host = hostName.substring(6, hostName.indexOf(".")-1);                     
            System.out.println("Env of local machine: " + host);       
   
            if (host.equals("prd")){                     
                System.out.println("Prod Hostname of local machine: " + hostName);                     
                setVariableData("EnvPwd","t3I0We0W5");   
                webUrl = "http://" +hostName +":15000/"; 
                oimURL = "t3://"+hostName	+ ":15000";   
                callbackServiceUrl = webUrl + "workflowservice/CallbackService"; 
            }else if (host.equals("stg")) {                     
                System.out.println("Stage Hostname of local machine: " + hostName);                     
                setVariableData("EnvPwd","aj3ARa1Z6");    
                webUrl = "http://" +hostName +":15000/";   
                oimURL = "t3://"+hostName	+ ":15000";   
                callbackServiceUrl = webUrl + "workflowservice/CallbackService"; 
            }else {                     
                System.out.println("Dev Hostname of local machine: " + hostName);                     
                setVariableData("EnvPwd","TxGy4IX98");   
                webUrl = "http://" +hostName +":16000/";  
                oimURL = "t3://"+hostName	+ ":16000";   
                callbackServiceUrl = webUrl + "workflowservice/CallbackService"; 
            }    
 
            setVariableData("webserUrl",webUrl);    
            System.out.println("webUrl of local machine: " + webUrl);   
            setVariableData("callbackServiceUrl",callbackServiceUrl);  
            System.out.println("callbackServiceUrl of local machine: " + callbackServiceUrl);  
            setVariableData("mcurl",oimURL);   
            System.out.println("oimURL of local machine: " + oimURL);   
 
      }catch (java.lang.Exception e){                                                            
                    e.printStackTrace();                                                            
      }
        </bpelx:exec>
        <assign name="AssignRequestWSURL" id="BpAss1">
            <copy>
                <from><EndpointReference xmlns="http://www.w3.org/2005/08/addressing"><Address/>
                    </EndpointReference></from>
                <to variable="partnerLink"/>
            </copy>
            <copy>
                <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestID"/>
                <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="RequestID" part="RequestId" query="/ns16:RequestId"/>
            </copy>
            <copy>
                <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="inputVariable" part="payload" query="/ns3:process/ns4:BeneficiaryDetails/ns4:Email"/>
                <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="userEmail"/>
            </copy>
            <copy>
                <!--   <from expression="concat(substring-before(bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:url'),'workflowservice'),'reqsvc/reqsvc')" -->
                <from expression="concat(bpws:getVariableData('webserUrl'),'reqsvc/reqsvc')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                <to variable="partnerLink" query="/ns14:EndpointReference/ns14:Address"/>
            </copy>
            <copy>
                <from variable="partnerLink"/>
                <to partnerLink="RequestWSPartnerLink"/>
            </copy>
            <copy>
                <from expression="bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:url')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="oimurl"/>
            </copy>
        </assign><bpelx:exec name="Setup_Env" version="1.5" id="BxExe1">
            System.out.println("Checking if a previous Request exists");                               
 String adminGroup = "";      
 String PRENCAdmin = "";        
try {                   
                 
                 
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                      
            String hostName = localMachine.getHostName().toString();                      
            System.out.println("Hostname of local machine: " + hostName);                      
            String host = hostName.substring(6, hostName.indexOf(".")-1);                      
            System.out.println("Env of local machine: " + host);                      
                      
        /**    if (host.equals("prd")){                      
                System.out.println("Prod Hostname of local machine: " + hostName);                      
                setVariableData("EnvPwd","t3I0We0W5");                       
            }else if (host.equals("stg")) {                      
                System.out.println("Stage Hostname of local machine: " + hostName);                      
                setVariableData("EnvPwd","aj3ARa1Z6");                       
            }else {                      
                System.out.println("Dev Hostname of local machine: " + hostName);                      
                setVariableData("EnvPwd","TxGy4IX98");                       
        } */                 
                 
                 
                 
                                          
            String  envPwd = (String) getVariableData("EnvPwd");            
			String  prevReqStatus = "";            
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                                
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key ="",DbConnectionString="", DbUserId=""; // Staging                              
                      
                     
                        java.lang.Object userLogin = "";                                                     
                        java.lang.Object isoManager = "";                                                    
                        java.lang.Object managerOutcome = "";                                              
                        java.lang.Object rEmail = "";                                        
                       // java.lang.Object managerComment = "";                                      
                		                                               
                                                              
                                                           
            Object obj = getVariableData("oimurl");                                                                                                         
			String tempStr = obj.toString();                                                
			String[] tempArr = tempStr.split("//");                                                
			//oimURL = "t3://"+tempArr[1].split("/")[0]; 						                                               
			//oimURL ="t3://192.168.1.62:14000";               
			String[] tempArr2 = tempStr.split(":");                 
                       // oimURL = "t3://"+hostName	+ ":15000";                 
                        //setVariableData("mcurl",oimURL);            
                        oimURL = getVariableData("mcurl").toString();           
			System.out.println("oimURL is == "+oimURL);                                                              
                                                              
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                                        
                        String authLoginConfig = "java.security.auth.login.config";                                                                        
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                                        
			// set up the environment for making the OIM API invocation                                                                       
			                                                                   
			java.util.Hashtable env = new java.util.Hashtable();                                                                        
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                                        
			oimInitialContextFactory);                                                                        
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                                        
			env.put(authLoginConfig, authLoginConfigPath);                                                                        
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                                      
			                                                                   
			client.login(oimUserName, oimPassword.toCharArray());                                                                     
			java.lang.Object roleXMLString = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestTarget");                                                                   
			String roleString = ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                                        
                        System.out.println("Role in NL1 is :- "+roleString);                                               
                        System.out.println("Before getting the request ID");                                                
                        //java.lang.Object requestIDXML = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestId");                                                
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                               
                        String RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                                  
  			System.out.println("RequestID in No_request is == "+RequestID);                                                       
 	                userLogin =getVariableData("inputVariable", "payload",                                                                 
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                                     
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                                   
                        System.out.println("User Login in N1 is:- "+usrLogin);             
            
						String roleValue = "Preferred Name Change";                                 
						setVariableData("groupName",roleValue); 						            
						System.out.println("groupName in CheckPrevRequest is:- "+roleValue);  
  
				/**		Object loginMgr = getVariableData("inputVariable", "payload",                                                                                              
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:ManagerLogin");                                                                   
					   String mgrLogin =  ((oracle.xml.parser.v2.XMLElement)loginMgr).getText();   
					   System.out.println("Manager Login in SetUp is:- "+mgrLogin);   
				*/ 
					     
					     
               try                                                                                        
                    {                                                                                       
                                                                                                               
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                                                 
				com.thortech.xl.dataaccess.tcDataProvider dbProviderU = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                                                
                             //   String queryU = "select USR_STATUS from usr where usr_login ='"+mgrLogin+"'";    
                                String queryU = "select USR_LOGIN, USR_STATUS from usr where USR_KEY = (select USR_MANAGER_KEY from usr where usr_login ='"+usrLogin+"')";   								 
                                System.out.println("QueryU in NativeLogic is == "+queryU);                                                                                         
                                com.thortech.xl.dataaccess.tcDataSet usersDataSetU = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                                                
				usersDataSetU.setQuery(dbProviderU, queryU);                                                                                                 
				usersDataSetU.executeQuery();                                                                                                
					                                                                                                
		                                                                                                            
                                int numColumnsU = usersDataSetU.getColumnCount();                                                                                                
                                int numRecordsU = usersDataSetU.getTotalRowCount();                                                                                         
                                                                                       
                                System.out.println("Column Count:- "+numColumnsU);                                                                                           
                                System.out.println("Record Count:- "+numRecordsU);                                                                                           
                                //iterate through each record                                                                                                
                             for(int k = 0; k &lt; numRecordsU; k++)                                                                                                
                                {                                                                                                
		                usersDataSetU.goToRow(k);                                                                                                
		                                                                                                 
		                //iterate through each column of a record                                                                                                
		                for(int m = 0; m &lt; numColumnsU; m++)                                                                                                
		                {                                                                                                
		                    String columnName = usersDataSetU.getColumnName(m);                                                                                                
		                    String value = usersDataSetU.getString(m); 
								if (m==0)                   
								{         
									setVariableData("commentc",value.toUpperCase());                   								                    
									System.out.println("The User manager login commentc value is :- "+value);  
								}else if (m==1) 
								{ 
									setVariableData("MGR_STATUS",value.toUpperCase());                   								                    
									System.out.println("The User manager status is :- "+value); 								 
								} 
                                                                                               
		                }                                                                                                
		            }                                                                                                
                    }                                                                                       
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                                                       
                {                                                                                       
                    e3.printStackTrace();                                                                                        
                } 				     
  
  
  
						  
               try                                              
                    {                                             
                                                                     
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                       
				com.thortech.xl.dataaccess.tcDataProvider dbProviderN = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                      
                                String queryR = "select  LKV_DECODED from LKV where LKV_ENCODED ='PreviousRequestStatus'";                                                   
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                      
				usersDataSet1.setQuery(dbProviderN, queryR);                                                       
				usersDataSet1.executeQuery();                                                      
					                                                      
		                                                                  
                                int numColumns1 = usersDataSet1.getColumnCount();                                                      
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                               
                                             
                                System.out.println("Column Count:- "+numColumns1);                                                 
                                System.out.println("Record Count:- "+numRecords1);                                                 
                                //iterate through each record                                                      
                             for(int k = 0; k &lt; numRecords1; k++)                                                      
                                {                                                      
		                usersDataSet1.goToRow(k);                                                      
		                                                       
		                //iterate through each column of a record                                                      
		                for(int m = 0; m &lt; numColumns1; m++)                                                      
		                {                                                      
		                    String columnName = usersDataSet1.getColumnName(m);                                                      
		                    String value = usersDataSet1.getString(m);                 
									if (value != "" ) {            
									prevReqStatus = value; 									               
									System.out.println("The PrevReqStatus value is set to "+value);                                                      
                                   }                  
		                }                                                      
		            }                                                      
                    }                                             
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                             
                {                                             
                    e3.printStackTrace();                                              
                }            
            
				            
               try                                              
                    {                                             
                                                                     
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                       
				com.thortech.xl.dataaccess.tcDataProvider dbProviderN = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                      
                               // String query1 = "select  LKV_DECODED from LKV where LKV_ENCODED ='OIM_Server'";                 
   
								String queryN = "SELECT REQUEST.REQUEST_ID FROM REQUEST, USR , REQUEST_BENEFICIARY_ENTITIES  " +                                        
												"WHERE REQUEST.REQUESTER_KEY = USR.USR_KEY " +       
												" AND REQUEST.REQUEST_KEY  = REQUEST_BENEFICIARY_ENTITIES.RBE_REQUEST_KEY " +  												            
												" AND REQUEST.REQUEST_STATUS IN  " + prevReqStatus +      												                         
												" AND REQUEST.REQUEST_ID &lt;'"+RequestID+"'" +                                      
												" AND USR.USR_LOGIN ='"+usrLogin+"'" +            
												" AND REQUEST_BENEFICIARY_ENTITIES.RBE_ENTITY_NAME in ('EMPNCACCOUNT','PRNCACCOUNT')"; 												   
                                System.out.println("QueryN in NativeLogic is = "+queryN);                                               
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                      
				usersDataSet1.setQuery(dbProviderN, queryN);                                                       
				usersDataSet1.executeQuery();                                                      
					                                                      
		                                                                  
                                int numColumns1 = usersDataSet1.getColumnCount();                                                      
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                               
                                             
                                System.out.println("Column Count:- "+numColumns1);                                                 
                                System.out.println("Record Count:- "+numRecords1);                                                 
                                //iterate through each record                                                      
                             for(int k = 0; k &lt; numRecords1; k++)                                                      
                                {                                                      
		                usersDataSet1.goToRow(k);                                                      
		                                                       
		                //iterate through each column of a record                                                      
		                for(int m = 0; m &lt; numColumns1; m++)                                                      
		                {                                                      
		                    String columnName = usersDataSet1.getColumnName(m);                                                      
		                    String value = usersDataSet1.getString(m);                 
									if (value != "" ) {							                 
                                    setVariableData("NO_REQUEST","FALSE");               
									setVariableData("PREV_REQ",value); 									               
									System.out.println("The NO_REQUEST value is set to FALSE");                                                      
                                   }                  
		                }                                                      
		            }                                                      
                    }                                             
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                             
                {                                             
                    e3.printStackTrace();                                              
                }                 
					                           
              try                                            
                    {                                           
                                                                   
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                     
				com.thortech.xl.dataaccess.tcDataProvider dbProvider4 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                         
								String userStatus = "";	                    
								String query4 =	"SELECT USR_UDF_DEPARTMENT from USR WHERE USR_LOGIN ='"+usrLogin+"'"; 							                    
                                System.out.println("Query4 in NativeLogic is == "+query4);                                             
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet4 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                    
				usersDataSet4.setQuery(dbProvider4, query4);                                                     
				usersDataSet4.executeQuery();                                                    
					                                                    
		                                                                
                                int numColumns4 = usersDataSet4.getColumnCount();                                                    
                                int numRecords4 = usersDataSet4.getTotalRowCount();                                             
                                           
                                System.out.println("Column Count:- "+numColumns4);                                               
                                System.out.println("Record Count:- "+numRecords4);                                               
                                //iterate through each record                                                    
                             for(int r = 0; r &lt; numRecords4; r++)                                                    
                                {                                                    
		                usersDataSet4.goToRow(r);                                                    
		                                                     
		                //iterate through each column of a record                                                    
		                for(int s = 0; s &lt; numColumns4; s++)                                                    
		                {                                                    
		                    String columnName = usersDataSet4.getColumnName(s);                                                    
		                    String value = usersDataSet4.getString(s);                      
                                    System.out.println("The Department name is :-"+value);                      
                                    if (value != ""){                      
								{                                          
                                        setVariableData("ADSV_DEPT","TRUE"); 								                        
                                        System.out.println("The Department name is :-  AVAILABLE");                        
								}								                      
                                    }else{                   
                                        setVariableData("ADSV_DEPT","FALSE"); 								                        
                                        System.out.println("The Department name is :-  NOTAVAILABLE");                   
                                        String adsv = getVariableData("ADSV_DEPT").toString();                  
                                        System.out.println("The ADSV_DEPT value is :- "+adsv);                   
                  
                   
                                    }                   
		                }                                                    
		            }                                                    
                    }                                           
                catch(com.thortech.xl.dataaccess.tcDataSetException e4)                                           
                {                                           
                    e4.printStackTrace();                                            
                }               
         
               try                                              
                    {                                             
                                                                     
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                       
				com.thortech.xl.dataaccess.tcDataProvider dbProvider1 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                      
                                String query1 = "select  LKV_DECODED from LKV where LKV_ENCODED ='AdminGroupEmail'";                                                       
                                System.out.println("Query1 in NativeLogic is == "+query1);                                               
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                      
				usersDataSet1.setQuery(dbProvider1, query1);                                                       
				usersDataSet1.executeQuery();                                                      
					                                                      
		                                                                  
                                int numColumns1 = usersDataSet1.getColumnCount();                                                      
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                               
                                             
                                System.out.println("Column Count:- "+numColumns1);                                                 
                                System.out.println("Record Count:- "+numRecords1);                                                 
                                //iterate through each record                                                      
                             for(int k = 0; k &lt; numRecords1; k++)                                                      
                                {                                                      
		                usersDataSet1.goToRow(k);                                                      
		                                                       
		                //iterate through each column of a record                                                      
		                for(int m = 0; m &lt; numColumns1; m++)                                                      
		                {                                                      
		                    String columnName = usersDataSet1.getColumnName(m);                                                      
		                    String value = usersDataSet1.getString(m);                                                      
                            //setVariableData("AdminGroupEmail",value);        
							  for (String retval: value.split(",")) {        
								 adminGroup += "'" + retval.toUpperCase() + "',";        
							  }        
								adminGroup =adminGroup.substring(0,adminGroup.length()-1);							          
                                System.out.println("The AdminGroup value is :-"+adminGroup);  							                                                    
                                                     
		                }                                                      
		            }                                                      
                    }                                             
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                             
                {                                             
                    e3.printStackTrace();                                              
                }                                          
        
                                        // Checking Admins Status                                                
                                        try                                                   
                                            {                                                                            
                                                Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                            
                                                com.thortech.xl.dataaccess.tcDataProvider dbProvider3 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                           
                                                String query5 = "select usr_email,usr_login from usr where usr_login in ("+adminGroup+") and usr_status ='Active'";                                                  
                                                System.out.println("Query5 in NL1 is == "+query5);                                                    
                                                com.thortech.xl.dataaccess.tcDataSet usersDataSet3 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                           
                                                usersDataSet3.setQuery(dbProvider3, query5);                                                            
                                                usersDataSet3.executeQuery();                                                           
                                                                                                                   
                                                                                                       
                                                int numColumns2 = usersDataSet3.getColumnCount();                                                           
                                                int numRecords2 = usersDataSet3.getTotalRowCount();                                                    
                                                                  
                                                System.out.println("Column Count:- "+numColumns2);                                                      
                                                System.out.println("Record Count:- "+numRecords2);                                                 
                                                String email = "";                     
												String usr_names = "";                    
												String appNames  = "";												                    
                                                //iterate through each record                    
												if (numRecords2 > 0)                    
												{                    
													for(int r = 0; r &lt; numRecords2; r++)                                                           
													{                                                           
															usersDataSet3.goToRow(r);                                                           
													                    
														//iterate through each column of a record                                                           
														for(int s = 0; s &lt; numColumns2; s++)                                                           
														{                       
															if (s==0)                    
															{                    
																email += usersDataSet3.getString(s) +",";                    
															}else{                    
															usr_names += usersDataSet3.getString(s) +",";													                    
															}                    
																				                    
														}                                                 
													}                                                
													email = email.substring(0,email.length()-1);                     
												   usr_names =usr_names.substring(0,usr_names.length()-1);                    
													//appNames = usr_names + "," +getVariableData("AdminGroupEmail");                     
													setVariableData("AdminGroupEmail",usr_names);                                
													System.out.println("Final Admin Approvers:- "+usr_names);													                       
												}else                    
												{                                       
													System.out.println("No AdminGroup Approvers Assigned");													                    
												                    
												}                               
										}                                                  
										catch(com.thortech.xl.dataaccess.tcDataSetException e4)                                                  
										{                                                  
											e4.printStackTrace();                                                   
										}    
    
               try                                                                             
                    {                                                                            
                                                                                                    
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                                      
				com.thortech.xl.dataaccess.tcDataProvider dbProvider1 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                                     
                                String query1 = "select  LKV_DECODED from LKV where LKV_ENCODED ='OIM_Server'";                                                                                      
                                System.out.println("Query1 in NativeLogic is == "+query1);                                                                              
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                                     
				usersDataSet1.setQuery(dbProvider1, query1);                                                                                      
				usersDataSet1.executeQuery();                                                                                     
					                                                                                     
		                                                                                                 
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                                     
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                                              
                                                                            
                                System.out.println("Column Count:- "+numColumns1);                                                                                
                                System.out.println("Record Count:- "+numRecords1);                                                                                
                                //iterate through each record                                                                                     
                             for(int k = 0; k &lt; numRecords1; k++)                                                                                     
                                {                                                                                     
		                usersDataSet1.goToRow(k);                                                                                     
		                                                                                      
		                //iterate through each column of a record                                                                                     
		                for(int m = 0; m &lt; numColumns1; m++)                                                                                     
		                {                                                                                     
		                    String columnName = usersDataSet1.getColumnName(m);                                                                                     
		                    String value = usersDataSet1.getString(m);                                                                                     
                                    setVariableData("OIMServer",value);                                                                                       
                                System.out.println("The OIMServer value is :-"+value);                                                                                     
                                                                                    
		                }                                                                                     
		            }                                                                                     
                    }                                                                            
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                                            
                {                                                                            
                    e3.printStackTrace();                                                                             
                }	 
 
					// To get IT resoursce DB password for prod/dev/stg environments       
				       
				try                                                           
				{         
					Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);        
       
					Thor.API.Operations.tcITResourceInstanceOperationsIntf resourceFactory = null;       
					long vdResourceKey = 0L;       
					java.util.Map&lt;String, String> result = new java.util.HashMap&lt;String, String>();       
					       
				try {       
						resourceFactory = (Thor.API.Operations.tcITResourceInstanceOperationsIntf) client.getService(Thor.API.Operations.tcITResourceInstanceOperationsIntf.class);       
						java.util.Map&lt;String, String> filter = new java.util.HashMap&lt;String, String>();       
						filter.put("IT Resource.Name", "OIMDB");       
						Thor.API.tcResultSet resources = resourceFactory.findITResourceInstances(filter);       
						vdResourceKey = resources.getLongValue("IT Resource.Key");       
						System.out.println("IT Resource key : " + vdResourceKey);       
						Thor.API.tcResultSet params = resourceFactory.getITResourceInstanceParameters(vdResourceKey);  
						int objectRowCount = params.getRowCount(); 
						for (int j = 0; j &lt; objectRowCount; j++)        
						{       
							params.goToRow(j);       
							result.put(params.getStringValue("IT Resources Type Parameter.Name"),       
							params.getStringValue("IT Resource.Parameter.Value"));       
			       
				       
						}       
		       
					String dbName = (String) result.get("DatabaseName");  
					setVariableData("DbName",dbName); 
					 
					String dbPassword = (String) result.get("Password"); 
					setVariableData("DbPwd",dbPassword); 
					 
					String dbUser = (String) result.get("UserID"); 
					setVariableData("DbUserId",dbUser);		 
					 
					String dbURL = (String) result.get("URL");	 
                    setVariableData("DbUrl",dbURL);					 
    
                     
       
					System.out.println("dbName is : " + dbName);       
					System.out.println("dbPassword is : " + dbPassword);    
					System.out.println("dbUser is : " + dbUser);       
					System.out.println("dbURL is : " + dbURL);  					 
     					       
						       
				} catch (Thor.API.Exceptions.tcAPIException e) {       
					e.printStackTrace();       
				} catch (Thor.API.Exceptions.tcColumnNotFoundException e) {       
					e.printStackTrace();       
				} catch (Exception e) {       
					e.printStackTrace();       
				}       
					      					      					       
			}       
			catch(Exception e5)                                                           
			{                                                           
				e5.printStackTrace();                                                            
			}   
				 
    
										      
					client.logout(); 			               
						                           
	}catch (java.lang.Exception e){                                                               
                    e.printStackTrace();                                                               
            }
        </bpelx:exec><switch name="Switch1" id="BpSwt0">
            <case condition="((bpws:getVariableData(&quot;MGR_STATUS&quot;) != 'ACTIVE')  or (bpws:getVariableData(&quot;MGR_STATUS&quot;) = ''))">
                <bpelx:annotation>
                    <bpelx:general>
                        <bpelx:property name="userLabel">
                            Manager name is Null
                        </bpelx:property>
                    </bpelx:general>
                </bpelx:annotation><sequence id="BpSeq2">
      <assign id="BpAss2">
                        <copy>
                            <from expression="string('rejected')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                            <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
                        </copy>
                        <copy>
                            <from expression="ora:getConversationId()"/>
                            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
                        </copy>
                        <copy>
                            <from expression="string('rejected')"/>
                            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
                        </copy>
                    </assign>
      <scope name="Manager_Name_Missing" id="BpScp0">
         <bpelx:annotation>
            <bpelx:pattern patternName="bpelx:email"/>
         </bpelx:annotation>
         <variables>
            <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
            <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
            <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
         </variables>
         <sequence name="Sequence1" id="BpSeq3">
            <assign name="EmailParamsAssign" id="BpAss3">
                                <copy>
                                    <from expression="string('Default')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                </copy>
                                <copy>
                                    <from expression="string('')"/>
                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                </copy>
                                <copy>
                                    <from expression="string('')"/>
                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                </copy>
                                <copy>
                                    <from expression="string('')"/>
                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                </copy>
                                <copy>
                                    <from expression="'Preferred Name Change request rejected'" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                </copy>
                                <copy>
                                    <from expression="bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:Email')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                </copy>
                                <copy>
                                    <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), ', ', string('   '), '&lt;BR> &lt;BR> Your request for Preferred Name Change has been rejected. Reject details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Change:&lt;/B> ', string('Preferred Name change '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'),'&lt;BR> &lt;B>Justification: &lt;/B>', string('  '),  string('You have no Manager assigned.  Please check with &lt;B>wam_support@epa.gov&lt;/B>  to update your Manager name  and submit'), bpws:getVariableData('OIMServer'), string(' request again.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                </copy>
                                <copy>
                                    <from expression="string('text/html; charset=UTF-8')"/>
                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                </copy>
                            </assign><bpelx:exec name="RJ-NoManager" version="1.5" id="BxExe2">
                                setVariableData("EmailAttribute","REJECTED@aa-epa.gov");          
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");         
setVariableData("AdminGroupEmail","");        
setVariableData("commentc","");        
        
//String deptStatus = (String) getVariableData("ADSV_DEPT");                  
System.out.println("Entering the Manager is null flow");                  
                                                        
try {         
    
    
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();         
            String hostName = localMachine.getHostName().toString();         
            System.out.println("Hostname of local machine: " + hostName);         
            String host = hostName.substring(6, hostName.indexOf(".")-1);         
            System.out.println("Env of local machine: " + host);         
   
                          
            String  envPwd = (String) getVariableData("EnvPwd");        
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                   
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key ="",DbConnectionString="", DbUserId=""; // Staging                 
         
        
                        java.lang.Object userLogin = "";                                        
                        java.lang.Object isoManager = "";                                       
                        java.lang.Object managerOutcome = "";                                 
                        java.lang.Object rEmail = "";                           
                       // java.lang.Object managerComment = "";                         
                		                                  
                                                 
                                              
            Object obj = getVariableData("oimurl");                                                                                            
			String tempStr = obj.toString();                                   
			String[] tempArr = tempStr.split("//");                                   
			//oimURL = "t3://"+tempArr[1].split("/")[0]; 						                                  
			//oimURL ="t3://192.168.1.62:14000";           
                        oimURL = getVariableData("mcurl").toString();   
			System.out.println("oimURL is == "+oimURL);                                                 
                                                 
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                           
                        String authLoginConfig = "java.security.auth.login.config";                                                           
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                           
			// set up the environment for making the OIM API invocation                                                          
			                                                      
			java.util.Hashtable env = new java.util.Hashtable();                                                           
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                           
			oimInitialContextFactory);                                                           
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                           
			env.put(authLoginConfig, authLoginConfigPath);                                                           
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                         
			                                                      
			client.login(oimUserName, oimPassword.toCharArray());                                                        
			java.lang.Object roleXMLString = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestTarget");                                                      
			String roleString = ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                           
                        System.out.println("Role in NL1 is :- "+roleString);                                  
                        System.out.println("Before getting the request ID");                                   
                        //java.lang.Object requestIDXML = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestId");                                   
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                  
                        String RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                     
  			System.out.println("RequestID in NL1 is == "+RequestID);                                          
 	                userLogin =getVariableData("inputVariable", "payload",                                                    
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                        
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                      
                        System.out.println("User Login in N1 is:- "+usrLogin);                                     
                                             
						                   						                    
 
				DbUserId = (String) getVariableData("DbUserId");   
				DbConnectionString = (String) getVariableData("DbUrl");   
				DbPassword = (String) getVariableData("DbPwd");  				 
				              
         
				String query3 = "update REQUEST set request_status = 'Request Rejected' where request_key = '"+RequestID+"'";             
				              
				System.out.println("The query3  is :-"+query3);           
				           
				           
				java.sql.Connection  con = null;                         
				java.sql.Statement stmt = null;              
				              
              
                   
				try {                   
					//Connecting to staging database and trying to execute update statement					                      
					Class.forName("oracle.jdbc.OracleDriver");                            
					con=java.sql.DriverManager.getConnection(DbConnectionString,DbUserId,DbPassword);              
					stmt=con.createStatement();               				              
					stmt.executeUpdate(query3);       
					System.out.println("The Request for "+RequestID+" set to Request Rejected because there is no Manager assigned, Email sent to the requester");					       
				}                          
				catch(Exception e){					                      
					System.out.println("Exception on trying to update database");                      
					System.out.println(e);                      
					e.printStackTrace();                       
					System.out.println("--------------------------------------");                      
                   
				}                            
				finally {                      
					stmt.close();                         
					con.close();                         
				}               
					              
					              
					              
					              
					              
						              
			//}			              
						              
	}catch (java.lang.Exception e){                                                  
                    e.printStackTrace();                                                  
            }
                            </bpelx:exec><invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService1" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv1"/><receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv1"/></sequence>
      </scope>
   </sequence></case>
            <otherwise>
                <bpelx:annotation>
                    <bpelx:documentation>
                        Continue
                    </bpelx:documentation>
                </bpelx:annotation>
                <sequence name="Sequence4" id="BpSeq4">
                    <switch name="Switch13" id="BpSwt1">
                        <case condition="bpws:getVariableData(&quot;ADSV_DEPT&quot;) = 'FALSE'">
                            <bpelx:annotation>
                                <bpelx:general>
                                    <bpelx:property name="userLabel">
                                        Department name is  NULL
                                    </bpelx:property>
                                </bpelx:general>
                            </bpelx:annotation><sequence id="BpSeq5">
      <assign id="BpAss4">
         <copy>
            <from expression="string('rejected')"/>
            <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
         </copy>
         <copy>
            <from expression="ora:getConversationId()"/>
            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
         </copy>
         <copy>
            <from expression="string('rejected')"/>
            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
         </copy>
      </assign>
      <scope name="Department_NULL" id="BpScp1">
         <bpelx:annotation>
            <bpelx:pattern patternName="bpelx:email"/>
         </bpelx:annotation>
         <variables>
            <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
            <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
            <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
         </variables>
         <sequence name="Sequence11" id="BpSeq6">
            <sequence name="Sequence1" id="BpSeq7">
               <assign name="EmailParamsAssign" id="BpAss5">
                                                <copy>
                                                    <from expression="string('Default')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                                </copy>
                                                <copy>
                                                    <from expression="string('')"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                                </copy>
                                                <copy>
                                                    <from expression="string('')"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                                </copy>
                                                <copy>
                                                    <from expression="string('')"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                                </copy>
                                                <copy>
                                                    <from expression="'Preferred Name Change request rejected'" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                                </copy>
                                                <copy>
                                                    <from expression="bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:Email')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                                </copy>
                                                <copy>
                                                    <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), ', ', string('   '), '&lt;BR> &lt;BR> Your request for Preferred Name Change has been rejected. Reject details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Change:&lt;/B> ', string('Preferred Name Change '),'&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '),  string('You have no Department assigned.  Please check with &lt;B>wam_support@epa.gov&lt;/B>  to update your Department name  and submit'), bpws:getVariableData('OIMServer'), string(' request again.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                                </copy>
                                                <copy>
                                                    <from expression="string('text/html; charset=UTF-8')"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                                </copy>
                                            </assign>
               <bpelx:exec name="RJ-NoDept" version="1.5" id="BxExe3">
                                                setVariableData("EmailAttribute","REJECTED@aa-epa.gov");       
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");      
setVariableData("AdminGroupEmail","");     
setVariableData("commentc","");     
     
String deptStatus = (String) getVariableData("ADSV_DEPT");               
System.out.println("The department Status value before setting Enable :- "+deptStatus);               
                                                     
try {                            
            String  envPwd = (String) getVariableData("EnvPwd");     
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key ="",DbConnectionString="", DbUserId=""; // Staging              
      
     
                        java.lang.Object userLogin = "";                                     
                        java.lang.Object isoManager = "";                                    
                        java.lang.Object managerOutcome = "";                              
                        java.lang.Object rEmail = "";                        
                       // java.lang.Object managerComment = "";                      
                		                               
                                              
                                           
            Object obj = getVariableData("oimurl");                                                                                         
			String tempStr = obj.toString();                                
			String[] tempArr = tempStr.split("//");                                
			//oimURL = "t3://"+tempArr[1].split("/")[0]; 						                               
			//oimURL ="t3://192.168.1.62:14000";       
                        oimURL = getVariableData("mcurl").toString();   
			System.out.println("oimURL is == "+oimURL);                                              
                                              
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                        
                        String authLoginConfig = "java.security.auth.login.config";                                                        
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                        
			// set up the environment for making the OIM API invocation                                                       
			                                                   
			java.util.Hashtable env = new java.util.Hashtable();                                                        
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                        
			oimInitialContextFactory);                                                        
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                        
			env.put(authLoginConfig, authLoginConfigPath);                                                        
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                      
			                                                   
			client.login(oimUserName, oimPassword.toCharArray());                                                     
			java.lang.Object roleXMLString = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestTarget");                                                   
			String roleString = ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                        
                        System.out.println("Role in NL1 is :- "+roleString);                               
                        System.out.println("Before getting the request ID");                                
                        //java.lang.Object requestIDXML = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestId");                                
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                               
                        String RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                  
  			System.out.println("RequestID in NL1 is == "+RequestID);                                       
 	                userLogin =getVariableData("inputVariable", "payload",                                                 
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                     
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                   
                        System.out.println("User Login in N1 is:- "+usrLogin);                                  
                                          
						                 
						                      
 
				DbUserId = (String) getVariableData("DbUserId");   
				DbConnectionString = (String) getVariableData("DbUrl");   
				DbPassword = (String) getVariableData("DbPwd");  				 
				           
			//if (skipIsoImo.equalsIgnoreCase("TRUE")) { 			           
        
				String query3 = "";        
				if (deptStatus.equalsIgnoreCase("FALSE")) {        
					query3 = "update REQUEST set request_status = 'Request Rejected' where request_key = '"+RequestID+"'";        
				}      
				           
				System.out.println("The query3  is :-"+query3);        
				        
				        
				java.sql.Connection  con = null;                      
				java.sql.Statement stmt = null;           
				           
           
                
				try {                
					//Connecting to staging database and trying to execute update statement					                   
					Class.forName("oracle.jdbc.OracleDriver");                         
					con=java.sql.DriverManager.getConnection(DbConnectionString,DbUserId,DbPassword);           
					stmt=con.createStatement();               
					//query3 = "update REQUEST set request_status = 'Request Completed' where request_key = '"+RequestID+"'";  					           
					stmt.executeUpdate(query3);    
					System.out.println("The Request for "+RequestID+" set to Request Rejected");					    
				}                       
				catch(Exception e){					                   
					System.out.println("Exception on trying to update database");                   
					System.out.println(e);                   
					e.printStackTrace();                    
					System.out.println("--------------------------------------");                   
                
				}                         
				finally {                   
					stmt.close();                      
					con.close();                      
				}            
					           
					           
					           
					           
					           
						           
			//}			           
						           
	}catch (java.lang.Exception e){                                               
                    e.printStackTrace();                                               
            }
                                            </bpelx:exec>
               <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService1" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv2"/>
               <receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv2"/>
            </sequence>
         </sequence>
      </scope>
   </sequence></case>
                        <case condition="bpws:getVariableData(&quot;NO_REQUEST&quot;) = 'FALSE'">
                            <bpelx:annotation>
                                <bpelx:general>
                                    <bpelx:property name="userLabel">
                                        Previous Request Exists
                                    </bpelx:property>
                                </bpelx:general>
                            </bpelx:annotation><sequence name="Sequence12" id="BpSeq8"><assign id="BpAss6">
      <copy>
         <from expression="string('rejected')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
         <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
      </copy>
      <copy>
         <from expression="ora:getConversationId()"/>
         <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
      </copy>
      <copy>
         <from expression="string('rejected')"/>
         <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
      </copy>
   </assign><scope name="Previous_Request_Exists" id="BpScp2">
      <bpelx:annotation>
         <bpelx:pattern patternName="bpelx:email"/>
      </bpelx:annotation>
      <variables>
         <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
         <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
         <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
      </variables>
      <sequence name="Sequence1" id="BpSeq9">
         <assign name="EmailParamsAssign" id="BpAss7">
                                            <copy>
                                                <from expression="string('Default')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                            </copy>
                                            <copy>
                                                <from expression="string('')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                            </copy>
                                            <copy>
                                                <from expression="string('')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                            </copy>
                                            <copy>
                                                <from expression="string('')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                            </copy>
                                            <copy>
                                                <from expression="'Preferred Name Change request rejected'" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                            </copy>
                                            <copy>
                                                <from expression="bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:Email')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                            </copy>
                                            <copy>
                                                <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), ', ', string('   '), '&lt;BR> &lt;BR> Your request for Preferred Name Change has been rejected. Reject details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Change:&lt;/B> ', string('Preferred Name Change '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'),'&lt;BR> &lt;B>Justification: &lt;/B>', string('  '),  string('You have a previous request'), string('  '), bpws:getVariableData('PREV_REQ'), string(' awaiting approval.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                            </copy>
                                            <copy>
                                                <from expression="string('text/html; charset=UTF-8')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                            </copy>
                                        </assign>
         <bpelx:exec name="RJ-Prev_Req_Exists" version="1.5" id="BxExe4">
                                            setVariableData("EmailAttribute","REJECTED@aa-epa.gov");         
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");        
setVariableData("AdminGroupEmail","");       
setVariableData("commentc","");                   
System.out.println("Rejecting the new duplicate request  ");                 
                                                       
try {                              
            String  envPwd = (String) getVariableData("EnvPwd");       
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                  
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key ="",DbConnectionString="", DbUserId=""; // Staging                
        
       
                        java.lang.Object userLogin = "";                                       
                        java.lang.Object isoManager = "";                                      
                        java.lang.Object managerOutcome = "";                                
                        java.lang.Object rEmail = "";                          
                       // java.lang.Object managerComment = "";                        
                		                                 
                                                
                                             
            Object obj = getVariableData("oimurl");                                                                                           
			String tempStr = obj.toString();                                  
			String[] tempArr = tempStr.split("//");                                  
			//oimURL = "t3://"+tempArr[1].split("/")[0]; 						                                 
			//oimURL ="t3://192.168.1.62:14000";            
                        oimURL = getVariableData("mcurl").toString();   
			System.out.println("oimURL is == "+oimURL);                                                
                                                
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                          
                        String authLoginConfig = "java.security.auth.login.config";                                                          
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                          
			// set up the environment for making the OIM API invocation                                                         
			                                                     
			java.util.Hashtable env = new java.util.Hashtable();                                                          
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                          
			oimInitialContextFactory);                                                          
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                          
			env.put(authLoginConfig, authLoginConfigPath);                                                          
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                        
			                                                     
			client.login(oimUserName, oimPassword.toCharArray());                                                       
			java.lang.Object roleXMLString = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestTarget");                                                     
			String roleString = ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                          
                        System.out.println("Role in NL1 is :- "+roleString);                                 
                        System.out.println("Before getting the request ID");                                  
                        //java.lang.Object requestIDXML = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestId");                                  
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                 
                        String RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                    
  			System.out.println("RequestID in NL1 is == "+RequestID);                                         
 	                userLogin =getVariableData("inputVariable", "payload",                                                   
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                       
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                     
                        System.out.println("User Login in N1 is:- "+usrLogin);                                    
                                            
						                   
						                        
 
				DbUserId = (String) getVariableData("DbUserId");   
				DbConnectionString = (String) getVariableData("DbUrl");   
				DbPassword = (String) getVariableData("DbPwd");  				 
				             
			//if (skipIsoImo.equalsIgnoreCase("TRUE")) { 			             
                   
				String	query3 = "update REQUEST set request_status = 'Request Rejected' where request_key = '"+RequestID+"'";          
      
				             
				System.out.println("The query3  is :-"+query3);          
				          
				          
				java.sql.Connection  con = null;                        
				java.sql.Statement stmt = null;             
				             
             
                  
				try {                  
					//Connecting to staging database and trying to execute update statement					                     
					Class.forName("oracle.jdbc.OracleDriver");                           
					con=java.sql.DriverManager.getConnection(DbConnectionString,DbUserId,DbPassword);             
					stmt=con.createStatement();                 
					//query3 = "update REQUEST set request_status = 'Request Completed' where request_key = '"+RequestID+"'";  					             
					stmt.executeUpdate(query3);      
					System.out.println("The Request for "+RequestID+" set to Request Rejected because another request "+getVariableData("PREV_REQ")+ " is pending");					      
				}                         
				catch(Exception e){					                     
					System.out.println("Exception on trying to update database");                     
					System.out.println(e);                     
					e.printStackTrace();                      
					System.out.println("--------------------------------------");                     
                  
				}                           
				finally {                     
					stmt.close();                        
					con.close();                        
				}              
					             
					             
					             
					             
					             
						             
			//}			             
						             
	}catch (java.lang.Exception e){                                                 
                    e.printStackTrace();                                                 
            }
                                        </bpelx:exec>
         <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService1" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv3"/><receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv3"/></sequence>
   </scope></sequence></case>
                        <otherwise><empty name="Empty2" id="BpEmp0"/></otherwise>
                    </switch>
                </sequence>
            </otherwise>
        </switch>
        <invoke name="Invoke1" partnerLink="RequestWSPartnerLink" inputVariable="RequestID" outputVariable="Invoke1_getRequestDetails_OutputVariable" portType="ns15:RequestDataService" operation="getRequestDetails" id="BpInv4"/><assign name="Assign1" id="BpAss8">
            <copy>
                <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="Invoke1_getRequestDetails_OutputVariable" part="RequestData" query="/ns16:RequestData/ns16:Justification"/>
                <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="madd"/>
            </copy>
        </assign>
        <bpelx:exec name="Native_Logic" version="1.5" id="BxExe5">
            System.out.println("Before WFADMIN Approval");                                         
setVariableData("SKIP_ISOIMO","FALSE");        
setVariableData("commentc","");                
String adminGroup =  "";                                  
String valueS = "";                               
String userIDS = "";                            
String RequestID ="";      
String manOutcome = "";    
String skipWfadmin = "";                                
                            
//System.out.println("Column Count:- after DKOTLIN, with new OIM URL CODE***************");                                               
                                               
/*                                                              
Custom operations                                                              
*/                                                              
try {                                                          
            java.lang.Object managerLogin = "";                                                     
            java.lang.Object userLogin = "";                                  
			java.lang.Object loginUser = "";			                                
            java.lang.Object isoManager = "";                                
			java.lang.Object procState = "";                   
			java.lang.Object reqModel = "";	      
			java.lang.Object managerOutcome = ""; 			      
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                            
            String hostName = localMachine.getHostName().toString();                            
            System.out.println("Hostname of local machine: " + hostName);                            
            String host = hostName.substring(6, hostName.indexOf(".")-1);                            
            System.out.println("Env of local machine: " + host);                            
 /**                           
            if (host.equals("prd")){                            
                System.out.println("Prod Hostname of local machine: " + hostName);                            
                setVariableData("EnvPwd","t3I0We0W5");                             
            }else if (host.equals("stg")) {                            
                System.out.println("Stage Hostname of local machine: " + hostName);                            
                setVariableData("EnvPwd","aj3ARa1Z6");                             
            }else {                            
                System.out.println("Dev Hostname of local machine: " + hostName);                            
                setVariableData("EnvPwd","TxGy4IX98");                             
        }                            
 **/                           
            String  envPwd = (String) getVariableData("EnvPwd");                            
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                                       
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ; // Staging                                     
                                                        
          /**  oracle.security.jps.JpsContext ctx =                                                              
            oracle.security.jps.JpsContextFactory.getContextFactory().getContext();                                                              
                                                              
            final oracle.security.jps.service.credstore.CredentialStore cs =                                                              
		(oracle.security.jps.service.credstore.CredentialStore)                                                              
            ctx.getServiceInstance(oracle.security.jps.service.credstore.CredentialStore.class);                                                              
            oracle.security.jps.service.credstore.CredentialMap cmap =                                                              
             cs.getCredentialMap("oracle.oim.sysadminMap");                                                              
            oracle.security.jps.service.credstore.Credential cred = cmap.getCredential("sysadmin");                                                              
            if (cred instanceof oracle.security.jps.service.credstore.PasswordCredential)                                                         
                {                                                              
                    oracle.security.jps.service.credstore.PasswordCredential pcred =                                                              
                    (oracle.security.jps.service.credstore.PasswordCredential)cred;                                                              
                    char[] p = pcred.getPassword();                                                              
                    oimUserName = pcred.getName();                                                              
                    oimPassword = new String(p);                                                              
                }                                                
**/                                              
                                                      
      //get oimurl                                                      
      Object obj = getVariableData("oimurl");                                              
      String tempStr = obj.toString();                                             
      String[] tempArr = tempStr.split("//");                                             
     // oimURL = "t3://"+tempArr[1].split("/")[0];                   
      oimURL = getVariableData("mcurl").toString();                 
      //oimURL ="t3://192.168.1.62:14000";                                                              
	                                                     
    //  System.out.println("oimURL in NativeLogic is :- "+oimURL);                                           
                                       
    //  String roleValue = "Active Directory - Service Account";                                           
    //  setVariableData("groupName",roleValue);                                         
    //  System.out.println("The groupName value is :-"+roleValue);            		                                                              
            String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                              
            String authLoginConfig = "java.security.auth.login.config";                                                              
            String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                              
			// set up the environment for making the OIM API invocation                                                              
			java.util.Hashtable env = new java.util.Hashtable();                                                              
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                              
			oimInitialContextFactory);                                                              
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                              
			env.put(authLoginConfig, authLoginConfigPath);                                                              
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                              
			client.login(oimUserName, oimPassword.toCharArray());                                                         
                                                        
                                                        
                        Thor.API.Operations.tcUserOperationsIntf userintf = client.getService(Thor.API.Operations.tcUserOperationsIntf.class);                                                              
	                managerLogin =getVariableData("inputVariable", "payload",                                                              
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:ManagerLogin");                                                  
 	                userLogin =getVariableData("inputVariable", "payload",                                                              
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                                                       
 	                loginUser =getVariableData("inputVariable", "payload",                                                            
	        		   "/ns3:process/ns4:RequesterDetails/ns4:Login"); 					                                   
					System.out.println("debug statement 6");  					                                   
                   // procState =getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:systemAttributes/task:state");                   
 	                reqModel =getVariableData("inputVariable", "payload",                                                            
	        		   "/ns3:process/ns4:RequestModel"); 				                      
					System.out.println("debug statement 7");            		                                                                          
                        ///ns3:process/ns4:RequestTarget                                                            
                        java.lang.Object roleXMLString = getVariableData("inputVariable", "payload",                                                              
	        		   "/ns3:process/ns4:RequestTarget");                                                           
                                                              
                        String roleString =  ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                              
                                                       
                        System.out.println("Role in NativeLogic is :- "+roleString);                                
                       // Object mgrLogin = getVariableData("commentc");             
						  					                
						Object loginMgr = getVariableData("inputVariable", "payload",                                                            
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:ManagerLogin");                                 
					   String mgrLogin =  ((oracle.xml.parser.v2.XMLElement)loginMgr).getText();                                 
                                                            
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                
						String loginUsr =  ((oracle.xml.parser.v2.XMLElement)loginUser).getText();                    
						String requestModel =  ((oracle.xml.parser.v2.XMLElement)reqModel).getText(); 							                   
						//	String processState =  ((oracle.xml.parser.v2.XMLElement)procState).getText();						                                    
                     
                     
						                     
                        System.out.println("User Login in NativeLogic is:- "+usrLogin);                                
						System.out.println("The Login Requester in NativeLogic is:- "+loginUsr); 						                                
					//	System.out.println("Process State in NativeLogic is:- "+processState);                          
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                                   
                        RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                                      
						System.out.println("RequestID in NativeLogic is == "+RequestID); 						                     
						System.out.println("The Request Model in NativeLogic is == "+requestModel);          						                                
                        java.util.HashMap userMap = new java.util.HashMap();                                                              
                        System.out.println("Manager Login in NativeLogic is:- "+mgrLogin);        
      
						//managerOutcome = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:systemAttributes/task:outcome");                                               
                       // manOutcome =  ((oracle.xml.parser.v2.XMLElement)managerOutcome).getText();      
						//System.out.println("The user's manager managerOutcome at NL1Man:- "+manOutcome);						     
                                                        
					/**	if (null!= loginUsr &amp;&amp; loginUsr.equals(mgrLogin) &amp;&amp; requestModel.equals("Disable Account")){		                                    
							setVariableData("RequestByManager","YES");                    
							setVariableData("SKIP_ISOIMO", "TRUE");	                   
							System.out.println("RequestByManager in NativeLogic is set to:- YES");                    
							System.out.println("SKIP_ISOIMO in NativeLogic is set to:- YES"); 							                   
						} else if (null!= loginUsr &amp;&amp; loginUsr.equals(mgrLogin) &amp;&amp; requestModel.equals("Enable Account")){                   
							setVariableData("RequestByManager","YES");                    
							setVariableData("SKIP_ISOIMO", "TRUE");	                   
							System.out.println("RequestByManager in NativeLogic is set to:- YES");                    
							System.out.println("SKIP_ISOIMO in NativeLogic is set to:- YES");                    
						} else if (null!= loginUsr &amp;&amp; loginUsr.equals(mgrLogin)){                   
							//setVariableData("RequestForOthers","YES");                    
							System.out.println("RequestForOthers in NativeLogic is set to:- YES");                    
						}	*/					                   
                                                            
	         /**    try {                                                              
                            userMap.put("Users.User ID", mgrLogin);                                                              
                             Thor.API.tcResultSet moResultSet = userintf.findUsers(userMap);                                                              
                             setVariableData("EmailAttribute", moResultSet.getStringValue("Users.Email"));                                                              
                                System.out.println("Manager Email is:- " +moResultSet.getStringValue("Users.Email"));                          
                              setVariableData("EmailTemp",getVariableData("EmailAttribute"));                      
							  System.out.println("EmailTemp Email is:- "+getVariableData("EmailTemp"));									                      
                                                         
	                 }                                                              
	             catch (java.lang.Exception e)                                                               
                    {                                                              
	              e.printStackTrace();                                                              
	             } */       
				        
               try                                                                           
                    {                                                                          
                                                                                                  
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                                    
				com.thortech.xl.dataaccess.tcDataProvider dbProvider1 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                                   
                                String query1 = "select  LKV_DECODED from LKV where LKV_ENCODED ='SKIP_WFADMIN'";                                                                                    
                                System.out.println("Query1 in NativeLogic is == "+query1);                                                                            
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                                   
				usersDataSet1.setQuery(dbProvider1, query1);                                                                                    
				usersDataSet1.executeQuery();                                                                                   
					                                                                                   
		                                                                                               
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                                   
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                                            
                                                                          
                                System.out.println("Column Count:- "+numColumns1);                                                                              
                                System.out.println("Record Count:- "+numRecords1);                                                                              
                                //iterate through each record                                                                                   
                             for(int k = 0; k &lt; numRecords1; k++)                                                                                   
                                {                                                                                   
		                usersDataSet1.goToRow(k);                                                                                   
		                                                                                    
		                //iterate through each column of a record                                                                                   
		                for(int m = 0; m &lt; numColumns1; m++)                                                                                   
		                {                                                                                   
		                    String columnName = usersDataSet1.getColumnName(m);                                                                                   
		                    String value = usersDataSet1.getString(m);     
									skipWfadmin = value;							    
                                    setVariableData("SKIP_ISOIMO",value);    
                                System.out.println("The SKIP_WFADMIN value is :-"+value);                                                                                   
                                                                                  
		                }                                                                                   
		            }                                                                                   
                    }                                                                          
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                                          
                {                                                                          
                    e3.printStackTrace();                                                                           
                }    
    
    
      
             if (!manOutcome.equalsIgnoreCase("REJECT") &amp;&amp; skipWfadmin.equalsIgnoreCase("FALSE")) {       
				    							  							       
       
	             try {                                                                                     
                                  
                                        Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                                             
                                        com.thortech.xl.dataaccess.tcDataProvider dbProvider = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                                            
										String query = "SELECT  e.WFADMIN_LOGINID, u.usr_udf_department FROM usr u ,EPA_SECURITY_OFFICERS e where u.usr_login ='"+usrLogin+"'" + " and u.usr_status= 'Active' AND e.program = substr(u.usr_udf_department,1,DECODE(instr(u.usr_udf_department,'-',1,1),0,length(u.usr_udf_department) + 1,instr(u.usr_udf_department,'-',1,1)) - 1)";                                           
										                                          
                                        System.out.println("query in NL1 is == "+query);                                                                                       
                                        com.thortech.xl.dataaccess.tcDataSet usersDataSet = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                                            
                                        usersDataSet.setQuery(dbProvider, query);                                                                                             
                                        usersDataSet.executeQuery();                                                                                            
                                                                                                                                    
                                        int numColumns = usersDataSet.getColumnCount();                                                                                            
                                        int numRecords = usersDataSet.getTotalRowCount();                                                                                            
                                                                                                      
                                        System.out.println("Column Count:- "+numColumns);                                                                                      
                                        System.out.println("Record Count:- "+numRecords);                                                                                  
                                                                                                                  
                                        String columnName = "";                                                                                  
                                        //String value = "";                                                 
										String  value1 = "";                                         
										String	usrDept = "";                                         
                                                                                                                  
                                        //iterate through each record                                                                                            
                                        for(int i = 0; i &lt; numRecords; i++)                                                                                            
                                        {                                                                                            
                                                usersDataSet.goToRow(i);                                                                                            
                                                //iterate through each column of a record                                                                                            
                                                for(int j = 0; j &lt; numColumns; j++)                                                                                            
                                                {                                                                                            
                                                    columnName = usersDataSet.getColumnName(j);                                                                                            
                                                    valueS = usersDataSet.getString(j);                                              
													if (valueS != "" )                                              
												{                                              
													value1 = usersDataSet.getString(j) + "," +getVariableData("AdminGroupEmail");                                         
													usrDept = usersDataSet.getString(j+1);                                         
													setVariableData("USR_DEPT",usrDept); 
													setVariableData("DEPT_PREFIX",usrDept.substring(0, usrDept.indexOf("-"))); 																										 
													System.out.println("All AD Approvers:- "+value1+ " for "+usrDept); 
													System.out.println("The DEPT_PREFIX value is :- "+usrDept.substring(0, usrDept.indexOf("-"))); 													 
													break;                                        
												}else                                               
													{                                              
													value1 = getVariableData("AdminGroupEmail").toString();                                                        
													setVariableData("USR_DEPT","TRUE");                                                         
													System.out.println("All AD Approvers:- "+value1);                                        
                                                                                                        break;                                        
													                                              
													}                                              
                                                                                                           
                                                }                                                                                            
                                        }                                                                           
                                                                                          
                                        boolean commaVal = valueS.contains(",");                                                                          
                                        String [] arrOfStr = valueS.split(",");                                                                          
                                       // String userIDS = "";                                                                         
                                        if (commaVal) {                                                                          
                                            for (String a : arrOfStr){                                                                          
                                                System.out.println("Users.User ID: "+a);                                                                          
                                                userIDS += "'"+a+"',";                                                                         
                                            }                                                                          
                                            userIDS = userIDS.substring(0,userIDS.length()-1);                                                                         
                                        }else if(null!= valueS){                                                                           
                                            System.out.println("Users.User ID: "+valueS);                                                                         
                                            userIDS = "'"+valueS+"'";                                                                         
                                        } else {                                               
											System.out.println("AD Manager missing or Disabled");                                                  
										}	                                  
                                  
										                                  
                                                                                
	                 }                                                                                     
	             catch (java.lang.Exception e)                                                                                      
                    {                                                                                     
	              e.printStackTrace();                                                                                     
	             }                                   
                       	                                                      
                                                      
                                      // For sending emails                                  
                                      try                                 
                                            {                                                                                                     
                                                Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                                     
                                                com.thortech.xl.dataaccess.tcDataProvider dbProvider2 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                                    
                                                String query2 = "select usr_email,usr_login from usr where usr_login in ("+userIDS+") and usr_status ='Active'";                                                                           
                                                System.out.println("Query2 in NL1 is == "+query2);                                                                             
                                                com.thortech.xl.dataaccess.tcDataSet usersDataSet2 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                                    
                                                usersDataSet2.setQuery(dbProvider2, query2);                                                                                     
                                                usersDataSet2.executeQuery();                                                                                    
                                                                                                                                            
                                                                                                                                
                                                int numColumns2 = usersDataSet2.getColumnCount();                                                                                    
                                                int numRecords2 = usersDataSet2.getTotalRowCount();                                                                             
                                                                                           
                                                System.out.println("Column Count:- "+numColumns2);                                                                               
                                                System.out.println("Record Count:- "+numRecords2);                                                                          
                                                String email = "";                                              
												String usr_names = "";                                             
												String appNames  = "";												                                             
                                                //iterate through each record                                             
												if (numRecords2 > 0)                                             
												{                                             
													for(int r = 0; r &lt; numRecords2; r++)                                                                                    
													{                                                                                    
															usersDataSet2.goToRow(r);                                                                                    
													                                             
														//iterate through each column of a record                                                                                    
														for(int s = 0; s &lt; numColumns2; s++)                                                                                    
														{                                                
															if (s==0)                                             
															{                                             
																email += usersDataSet2.getString(s) +",";                                             
															}else{                                             
															usr_names += usersDataSet2.getString(s) +",";													                                             
															}                                             
																				                                             
														}                                                                          
													}                                                                         
													email = email.substring(0,email.length()-1);                                              
												   usr_names =usr_names.substring(0,usr_names.length()-1);                                             
													appNames = usr_names + "," +getVariableData("AdminGroupEmail");                                              
													setVariableData("commentc",appNames);                                                         
													System.out.println("Final AD Approvers:- "+appNames);												                
													                
												}else                                             
												{                                             
													appNames = getVariableData("AdminGroupEmail").toString();                                              
													setVariableData("commentc",appNames); 												                
													System.out.println("Only AdminGroup Approvers Assigned :- "+appNames);													                                             
												                                             
												}                                             
											   if (email != "")                                            
												{                                            
												setVariableData("EmailAttribute",email);                
												setVariableData("DistributionList",email);												                
															System.out.println("Email  sent to  :-"+email);                
															System.out.println("AD DistributionList  set as  :-"+email);                            															                
												}else                                            
												{                                            
												                                         
															System.out.println("AD Approver is Null or disabled, Email  sent to wam_support");															                                            
												                                            
												}                                            
                                    }                                                                           
                                catch(com.thortech.xl.dataaccess.tcDataSetException e4)                                                                           
                                {                                                                           
                                    e4.printStackTrace();                                                                            
                                }                                    
                                  
				        
           
       /**        try                                                             
                    {                                                            
                                                                                    
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                      
				com.thortech.xl.dataaccess.tcDataProvider svcProvider = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                     
                                //String svcQuery = "select  LKV_DECODED from LKV where LKV_ENCODED ='SupportEmail'";               
												String svcQuery =  "select RBED_ENTITY_FIELD_NAME, RBED_ENTITY_FIELD_VALUE from REQUEST_BENEFICIARY_ENTITYDATA where rbed_rbe_key in (select rbe_key from REQUEST_BENEFICIARY_ENTITIES where rbe_request_key='" + RequestID + "')";								              
                                System.out.println("svcQuery in NativeLogic is == "+svcQuery);                               
								              
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                     
				usersDataSet1.setQuery(svcProvider, svcQuery);                                                                      
				usersDataSet1.executeQuery();                                                                     
					                                                                     
		                                                                                 
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                     
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                              
                                                            
                                System.out.println("Column Count:- "+numColumns1);                                                                
                                System.out.println("Record Count:- "+numRecords1);                                                                
                                //iterate through each record                
                                String userSvc = "";                  
                             for(int k = 0; k &lt; numRecords1; k++)                                                                      
                                {                                                                     
		                usersDataSet1.goToRow(k);                                                                     
                                                    
		                //iterate through each column of a record                                                                     
		                for(int m = 0; m &lt; numColumns1-1; m++)                                                                    
		                {                                                                    
		                    String columnName = usersDataSet1.getString(0);                                                                    
		                    String value = usersDataSet1.getString(1);            
                                                
                                    if (!(columnName.equals("AD Server") || columnName.equals("#endDate") || columnName.equals("#startDate")))             
                                  {            
									 userSvc += columnName +":-- " + value + "&lt;BR>";           
                                   }                                                                                                                                                                        
		                }            
						              
		            }              
							userSvc = userSvc.substring(0,userSvc.length()-1);               
							setVariableData("ServiceDetails",userSvc);               
                            System.out.println("The Service request details :-"+userSvc); 							              
                    }                                                            
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                            
                {                                                            
                    e3.printStackTrace();                                                             
                }  */				            
						String appNames  = "";	             
             
						//appNames = mgrLogin + "," +getVariableData("AdminGroupEmail");                         
						//setVariableData("commentc",appNames); 						                                      
                                                                                         
                                    
           				                                                
                                                   
     				                            
                    client.logout();       
       }					      
    }                                                              
 catch (java.lang.Exception e)                                                              
 {                                                              
    System.out.println("----------------------");                                                              
    e.printStackTrace();                                                              
    System.out.println("----------------------");      
}
        </bpelx:exec>
        <!-- 
          Asynchronous callback to the requester. (Note: the callback location and correlation id is transparently handled using WS-addressing.)
        -->
        <scope name="ApprovalTask_1" xmlns:wf="http://schemas.oracle.com/bpel/extension/workflow" wf:key="ApprovalTask_1_globalVariable" id="BpScp3">
            <bpelx:annotation>
                <bpelx:pattern patternName="bpelx:workflow"/>
            </bpelx:annotation>
            <variables>
                <variable name="initiateTaskInput" messageType="ns2:initiateTaskMessage"/>
                <variable name="initiateTaskResponseMessage" messageType="ns2:initiateTaskResponseMessage"/>
            </variables>
            <sequence id="BpSeq10">
                <switch name="Switch2" id="BpSwt2">
                    <case condition="bpws:getVariableData(&quot;RequestByManager&quot;) = 'YES'">
                        <bpelx:annotation>
                            <bpelx:general>
                                <bpelx:property name="userLabel">
                                    Request By Manager
                                </bpelx:property>
                            </bpelx:general>
                        </bpelx:annotation>
                        <sequence name="Sequence14" id="BpSeq11">
                            <empty name="Empty1" id="BpEmp1"/>
                        </sequence>
                    </case>
                    <case condition="(bpws:getVariableData(&quot;ADSV_DEPT&quot;) = 'TRUE' and  bpws:getVariableData(&quot;ADSV_ACCOUNT&quot;) != 'DISABLED' )">
                        <bpelx:annotation>
                            <bpelx:general>
                                <bpelx:property name="userLabel">
                                    Department is Available
                                </bpelx:property>
                            </bpelx:general>
                        </bpelx:annotation><scope name="Pmompt_Manager" id="BpScp4">
      <bpelx:annotation>
         <bpelx:pattern patternName="bpelx:email"/>
      </bpelx:annotation>
      <variables>
         <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
         <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
         <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
      </variables>
      <sequence name="Sequence2" id="BpSeq12">
         <assign name="EmailParamsAssign" id="BpAss9">
                                    <copy>
                                        <from expression="string('Default')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(' A new ', bpws:getVariableData('groupName') , '  approval request submitted to WFADMINS for  ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'),' has been received(user belongs to ',bpws:getVariableData('DEPT_PREFIX'),' department) ')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(' &lt;BR> A new request for ',bpws:getVariableData('groupName'),'  is awaiting WFADMINS approval.  &lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to Approve or Reject the request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('text/html; charset=UTF-8')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                    </copy>
                                </assign>
         <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService2" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv5"/>
         <assign name="EmailParamsAssign" id="BpAss10">
                                    <copy>
                                        <from expression="string('Default')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat( 'New ', bpws:getVariableData('groupName'), '  request submitted for  ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), ' has been received(user belongs to ',bpws:getVariableData('DEPT_PREFIX'),' department) ')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                    </copy>
                                    <copy>
                                        <from expression="bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:Email')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), ', ', string('   '), '&lt;BR> &lt;BR> Your request for ', bpws:getVariableData('groupName'), '  has been submitted. Request details are provided below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to track your request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('text/html; charset=UTF-8')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                    </copy>
                                </assign>
         <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService2" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv6"/></sequence>
   </scope></case>
                    <case condition="bpws:getVariableData(&quot;ADSV_ACCOUNT&quot;) = 'DISABLED' ">
                        <bpelx:annotation>
                            <bpelx:general>
                                <bpelx:property name="userLabel">
                                    User Status Disabled
                                </bpelx:property>
                            </bpelx:general>
                        </bpelx:annotation>
                        <scope name="Pmompt_Manager_Dis" id="BpScp5">
      <bpelx:annotation>
         <bpelx:pattern patternName="bpelx:email"/>
      </bpelx:annotation>
      <variables>
         <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
         <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
         <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
      </variables>
      <sequence name="Sequence2" id="BpSeq13">
         <assign name="EmailParamsAssign" id="BpAss11">
                                    <copy>
                                        <from expression="string('Default')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(' Request to enable  ', bpws:getVariableData('groupName'), ' for  ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                    </copy>
                                    <copy>
                                        <from expression="(concat(' &lt;BR> A request to enable an ',bpws:getVariableData('groupName'),' that is disabled due to 30 days of  inactivity is awaiting  your approval. &lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '),string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Service Details:- &lt;/B>',string('&lt;BR>  '), bpws:getVariableData('ServiceDetails'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to Approve or Reject the request.')))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('text/html; charset=UTF-8')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                    </copy>
                                </assign>
         <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService2" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv7"/>
         <assign name="EmailParamsAssign" id="BpAss12">
                                    <copy>
                                        <from expression="string('Default')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat( 'Request to enable ', bpws:getVariableData('groupName'), ' for ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                    </copy>
                                    <copy>
                                        <from expression="bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:Email')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), ', ', string('   '), '&lt;BR> &lt;BR> Your request to enable your ', bpws:getVariableData('groupName'), '  has been submitted. Request details are provided below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Service Details: &lt;/B>',string('&lt;BR> '), bpws:getVariableData('ServiceDetails'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to track your request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('text/html; charset=UTF-8')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                    </copy>
                                </assign>
         <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService2" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv8"/>
      </sequence>
   </scope></case>
                </switch>
                <switch name="Switch14" id="BpSwt3">
                    <case condition=" bpws:getVariableData(&quot;RequestByManager&quot;) = 'YES'">
                        <bpelx:annotation>
                            <bpelx:general>
                                <bpelx:property name="userLabel">
                                    Manager Request
                                </bpelx:property>
                            </bpelx:general>
                        </bpelx:annotation>
                        <sequence name="Sequence15" id="BpSeq14"><empty name="Empty1" id="BpEmp2"/>
                        </sequence>
                    </case>
                    <otherwise><sequence name="Sequence13" id="BpSeq15"><assign name="ApprovalTask_1_AssignTaskAttributes" id="BpAss13">
                                <copy>
                                    <from expression="number(3)" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:priority"/>
                                </copy>
                                <copy>
                                    <from>
            <payload xmlns="http://xmlns.oracle.com/bpel/workflow/task">
 <Parameter1/>
 <RequestID/>
 <RequestModel/>
 <RequestTarget/>
 <url/>
	<RequesterDetails xmlns="http://xmlns.oracle.com/request/RequestDetails"/> 
	<BeneficiaryDetails xmlns="http://xmlns.oracle.com/request/RequestDetails"/> 
	<ObjectDetails xmlns="http://xmlns.oracle.com/request/RequestDetails"/> 
	<OtherDetails xmlns="http://xmlns.oracle.com/request/RequestDetails"/> 
 <RequesterDisplayName/>
 <BeneficiaryDisplayName/>
 <Requester/>
</payload>
         </from>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestID"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:RequestID"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestModel"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:RequestModel"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestTarget"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:RequestTarget"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:url"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:url"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/ns4:RequesterDetails"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:BeneficiaryDetails"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/ns4:BeneficiaryDetails"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:ObjectDetails"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/ns4:ObjectDetails"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:OtherDetails"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/ns4:OtherDetails"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails/ns4:DisplayName"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:RequesterDisplayName"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:BeneficiaryDisplayName"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails/ns4:Login"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:Requester"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestID"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:identificationKey"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails/ns4:Login"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:creator"/>
                                </copy>
                                <copy bpelx:ignoreMissingFromData="yes" bpelx:insertMissingToData="yes">
                                    <from variable="commentc"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:Parameter1"/>
                                </copy>
                                <copy bpelx:insertMissingToData="yes">
                                    <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="EmailAttribute"/>
                                    <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:Parameter2"/>
                                </copy>
                                <copy bpelx:ignoreMissingFromData="yes" bpelx:insertMissingToData="yes">
                                    <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="OIMServer"/>
                                    <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:Parameter4"/>
                                </copy>
                            </assign><invoke name="initiateTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskService" operation="initiateTask" inputVariable="initiateTaskInput" outputVariable="initiateTaskResponseMessage" id="BpInv9"/><receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv4"/></sequence></otherwise>
                </switch>
            </sequence>
        </scope>
        <switch name="taskSwitch" id="BpSwt4">
            <case condition=" bpws:getVariableData(&quot;RequestByManager&quot;) = 'YES' ">
                <bpelx:annotation>
                    <bpelx:general>
                        <bpelx:property name="userLabel">
                            Manager Request
                        </bpelx:property>
                    </bpelx:general>
                </bpelx:annotation><empty name="Empty1" id="BpEmp3"/></case>
            <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:state') = 'WITHDRAWN'">
                <bpelx:annotation>
                    <bpelx:general>
                        <bpelx:property name="userLabel">
                            Task is withdrawn
                        </bpelx:property>
                    </bpelx:general>
                </bpelx:annotation><sequence id="BpSeq16">
      <assign id="BpAss14">
         <copy>
            <from expression="string('rejected')"/>
            <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
         </copy>
         <copy>
            <from expression="ora:getConversationId()"/>
            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
         </copy>
         <copy>
            <from expression="string('rejected')"/>
            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
         </copy>
      </assign>
      <scope name="Benificiary_Withdrawn" id="BpScp6">
         <bpelx:annotation>
            <bpelx:pattern patternName="bpelx:email"/>
         </bpelx:annotation>
         <variables>
            <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
            <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
            <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
         </variables>
         <sequence name="Sequence5" id="BpSeq17">
            <sequence name="Sequence1" id="BpSeq18">
               <assign name="EmailParamsAssign" id="BpAss15">
                                    <copy>
                                        <from expression="string('Default')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(bpws:getVariableData('groupName'), ' request has been withdrawn')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat( bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), '  ', string(' has  withdrawn '), '   ', bpws:getVariableData('groupName'), '  request. &lt;BR>&lt;BR>Request details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('text/html; charset=UTF-8')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                    </copy>
                                </assign>
               <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService1" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv10"/><receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv5"/></sequence>
            <bpelx:exec name="WD-1" version="1.5" id="BxExe6">
                                setVariableData("EmailAttribute","REJECTED@aa-epa.gov");   
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov"); 
setVariableData("AdminGroupEmail","");
                            </bpelx:exec>
         </sequence>
      </scope>
   </sequence></case>
            <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:outcome') = 'REJECT'">
                <bpelx:annotation>
                    <bpelx:pattern>Task outcome is REJECT</bpelx:pattern>
                    <bpelx:general>
                        <bpelx:property name="userLabel">Task outcome is REJECT</bpelx:property>
                    </bpelx:general>
                </bpelx:annotation>
                <sequence id="BpSeq19">
                    <assign id="BpAss16">
                        <copy>
                            <from expression="string('rejected')"/>
                            <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
                        </copy>
                        <copy>
                            <from expression="ora:getConversationId()"/>
                            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
                        </copy>
                        <copy>
                            <from expression="string('rejected')"/>
                            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
                        </copy>
                    </assign>
                    <scope name="Prompt_Benificiary1" id="BpScp7">
                        <bpelx:annotation>
                            <bpelx:pattern patternName="bpelx:email"/>
                        </bpelx:annotation>
                        <variables>
                            <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
                            <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
                            <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
                        </variables><sequence name="Sequence5" id="BpSeq20">
                            <sequence name="Sequence1" id="BpSeq21">
                                <switch name="Switch10" id="BpSwt5">
                                    <case condition="bpws:getVariableData(&quot;ADSV_ACCOUNT&quot;) = 'DISABLED'">
                                        <bpelx:annotation>
                                            <bpelx:general>
                                                <bpelx:property name="userLabel">
                                                    User Disabled
                                                </bpelx:property>
                                            </bpelx:general>
                                        </bpelx:annotation><assign name="EmailEnableParamAssign" id="BpAss17">
      
      
      
      
      
      
      
      
   <copy>
         <from expression="string('Default')"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
      </copy><copy>
         <from expression="string('')"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
      </copy><copy>
         <from expression="string('')"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
      </copy><copy>
         <from expression="string('')"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
      </copy><copy>
         <from expression="concat('Your ' , bpws:getVariableData('groupName'), ' enable request has been rejected')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
      </copy><copy>
         <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'),', ', string('   '), '&lt;BR> &lt;BR> Your request to enable  ', bpws:getVariableData('groupName'),'  has been rejected. Request details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Manager Comment: &lt;/B>', string('  '), bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:userComment/task:comment'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to track your request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
      </copy><copy>
         <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="userEmail"/>
         <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
      </copy><copy>
         <from expression="string('text/html; charset=UTF-8')"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
      </copy></assign></case>
                                    <otherwise><assign name="EmailParamsAssign" id="BpAss18">
                                            <copy>
                                                <from expression="string('Default')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                            </copy>
                                            <copy>
                                                <from expression="string('')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                            </copy>
                                            <copy>
                                                <from expression="string('')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                            </copy>
                                            <copy>
                                                <from expression="string('')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                            </copy>
                                            <copy>
                                                <from expression="concat('Your ' , bpws:getVariableData('AwsAccount'), ' request has been rejected')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                            </copy>
                                            <copy>
                                                <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'),', ', string('   '), '&lt;BR> &lt;BR> Your request for Preferred Name Change ', bpws:getVariableData('AwsAccount'),' with the role of ', bpws:getVariableData('AwsRole'),' has been rejected. If you have questions about the rejection of this request, please contact your manager at ', bpws:getVariableData('EmailAttribute'),'. Request details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Manager Comment: &lt;/B>', string('  '), bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:userComment/task:comment'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to track your request.&lt;BR>&lt;BR>Sincerely,&lt;BR>&lt;BR>EPA WAA Manager'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                            </copy>
                                            <copy>
                                                <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="userEmail"/>
                                                <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                            </copy>
                                            <copy>
                                                <from expression="string('text/html; charset=UTF-8')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                            </copy>
                                        </assign></otherwise>
                                </switch><bpelx:exec name="Reject-Manager" version="1.5" id="BxExe7">setVariableData("EmailAttribute","REJECTED@aa-epa.gov");   
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");  
setVariableData("AdminGroupEmail",""); 
setVariableData("SKIP_ISOIMO","FALSE");
   String skipIsoImo = (String) getVariableData("SKIP_ISOIMO");        
String mgrRequest = (String) getVariableData("RequestByManager");                  
System.out.println("The Last java Block For Request Reject:- ");                  
                  
                                        
String usrAccStatus = (String) getVariableData("ADSV_ACCOUNT");       
System.out.println("The usrAccStatus value in ISO is:- "+usrAccStatus);                                         
                               
                                      
try {                   
   
// Set webURL    
    
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                     
            String hostName = localMachine.getHostName().toString();        
            String webUrl = "http://" +hostName +":15000/";       
            setVariableData("webserUrl",webUrl);       
            System.out.println("hostName in NL1 : " + hostName);      
            System.out.println("webUrl of NL1 : " + webUrl);      
   
            String  envPwd = (String) getVariableData("EnvPwd");        
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                   
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key ="",DbConnectionString="", DbUserId=""; // Staging                 
         
        
                        java.lang.Object userLogin = "";                                        
                        java.lang.Object isoManager = "";                                       
                        java.lang.Object managerOutcome = "";                                 
                        java.lang.Object rEmail = "";                           
                       // java.lang.Object managerComment = "";                         
                		                                  
                                                 
                                              
            Object obj = getVariableData("oimurl");                                                                                            
			String tempStr = obj.toString();                                   
			String[] tempArr = tempStr.split("//");                                   
			//oimURL = "t3://"+tempArr[1].split("/")[0]; 						                                  
			//oimURL ="t3://192.168.1.62:14000";     
                        oimURL = getVariableData("mcurl").toString();      
			System.out.println("oimURL is == "+oimURL);                                                 
                                                 
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                           
                        String authLoginConfig = "java.security.auth.login.config";                                                           
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                           
			// set up the environment for making the OIM API invocation                                                          
			                                                      
			java.util.Hashtable env = new java.util.Hashtable();                                                           
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                           
			oimInitialContextFactory);                                                           
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                           
			env.put(authLoginConfig, authLoginConfigPath);                                                           
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                         
			                                                      
			client.login(oimUserName, oimPassword.toCharArray());                                                        
			java.lang.Object roleXMLString = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestTarget");                                                      
			String roleString = ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                           
                        System.out.println("Role in NL1 is :- "+roleString);                                  
                        System.out.println("Before getting the request ID");                                   
                        //java.lang.Object requestIDXML = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestId");                                   
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                  
                        String RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                     
  			System.out.println("RequestID in NL1 is == "+RequestID);                                          
 	                userLogin =getVariableData("inputVariable", "payload",                                                    
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                        
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                      
                        System.out.println("User Login in N1 is:- "+usrLogin);                                     
                        System.out.println("Before user's manager managerOutcome1:- ");                   
                         
 	             //   managerComment = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:userComment/task:comment");                                        
                     //   String manComment =  ((oracle.xml.parser.v2.XMLElement)managerComment).getText();                           
                    String manOutcome = "";     
                  if ((mgrRequest.equalsIgnoreCase("YES"))) // || (usrAccStatus.equalsIgnoreCase("DISABLED"))) -- commented out on 06/36/2019      
				     {       
						manOutcome = "APPROVE";       
                        System.out.println("The request for others is made by manager and manOutcome is set to :- "+manOutcome);               
						              
					 }else {       
 	                managerOutcome = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:systemAttributes/task:outcome");                                        
                        manOutcome =  ((oracle.xml.parser.v2.XMLElement)managerOutcome).getText(); 					        
                        System.out.println("The user's manager managerOutcome2:- "+manOutcome);  					        
					 }       
						              
						               try                              
                    {                             
                                                     
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                       
				com.thortech.xl.dataaccess.tcDataProvider dbProvider1 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                      
                                String query1 = "select  LKV_DECODED from LKV where LKV_ENCODED ='DBPassword'";                                       
                                System.out.println("Query1 in JavaLogic is == "+query1);                               
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                      
				usersDataSet1.setQuery(dbProvider1, query1);                                       
				usersDataSet1.executeQuery();                                      
					                                      
		                                                  
                                int numColumns1 = usersDataSet1.getColumnCount();                                      
                                int numRecords1 = usersDataSet1.getTotalRowCount();                               
                             
                                System.out.println("Column Count:- "+numColumns1);                                 
                                System.out.println("Record Count:- "+numRecords1);                                 
                                //iterate through each record                                      
                             for(int k = 0; k &lt; numRecords1; k++)                                      
                                {                                      
		                usersDataSet1.goToRow(k);                                      
		                                       
		                //iterate through each column of a record                                      
		                for(int m = 0; m &lt; numColumns1; m++)                                      
		                {                                      
		                    String columnName = usersDataSet1.getColumnName(m);                                      
		                    DbPassword = usersDataSet1.getString(m);                                      
                            System.out.println("The DbPassword value is :-"+DbPassword);                                      
                                     
		                }                                      
		            }                                      
                    }                             
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                             
                {                             
                    e3.printStackTrace();                              
                }                    
					              
              
					try                              
                    {                             
                                                     
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                       
				com.thortech.xl.dataaccess.tcDataProvider dbProvider2 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                      
                                String query2 = "select  LKV_DECODED from LKV where LKV_ENCODED ='DBConnectionString'";                                       
                                System.out.println("Query2 in JavaLogic is == "+query2);                               
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet2 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                      
				usersDataSet2.setQuery(dbProvider2, query2);                                       
				usersDataSet2.executeQuery();                                      
					                                      
		                                                  
                                int numColumns1 = usersDataSet2.getColumnCount();                                      
                                int numRecords1 = usersDataSet2.getTotalRowCount();                               
                             
                                System.out.println("Column Count:- "+numColumns1);                                 
                                System.out.println("Record Count:- "+numRecords1);                                 
                                //iterate through each record                                      
                             for(int k = 0; k &lt; numRecords1; k++)                                      
                                {                                      
		                usersDataSet2.goToRow(k);                                      
		                                       
		                //iterate through each column of a record                                      
		                for(int m = 0; m &lt; numColumns1; m++)                                      
		                {                                      
		                    String columnName = usersDataSet2.getColumnName(m);                                      
		                    DbConnectionString = usersDataSet2.getString(m);                                      
                            System.out.println("The DbConnectionString value is :-"+DbConnectionString);                                      
                                     
		                }                                      
		            }                                      
                    }                             
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                             
                {                             
                    e3.printStackTrace();                              
                }                    
              
				              
				try                              
                    {                             
                                                     
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                       
				com.thortech.xl.dataaccess.tcDataProvider dbProvider3 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                      
                                String query3 = "select  LKV_DECODED from LKV where LKV_ENCODED ='DBUserID'";                                       
                                System.out.println("Query3 in JavaLogic is == "+query3);                               
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet3 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                      
				usersDataSet3.setQuery(dbProvider3, query3);                                       
				usersDataSet3.executeQuery();                                      
					                                      
		                                                  
                                int numColumns1 = usersDataSet3.getColumnCount();                                      
                                int numRecords1 = usersDataSet3.getTotalRowCount();                               
                             
                                System.out.println("Column Count:- "+numColumns1);                                 
                                System.out.println("Record Count:- "+numRecords1);                                 
                                //iterate through each record                                      
                             for(int k = 0; k &lt; numRecords1; k++)                                      
                                {                                      
		                usersDataSet3.goToRow(k);                                      
		                                       
		                //iterate through each column of a record                                      
		                for(int m = 0; m &lt; numColumns1; m++)                                      
		                {                                      
		                    String columnName = usersDataSet3.getColumnName(m);                                      
		                    DbUserId =  usersDataSet3.getString(m);                                      
							System.out.println("The DbUserId value is :-"+DbUserId);                                      
                                     
		                }                                      
		            }                                      
                    }                             
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                             
                {                             
                    e3.printStackTrace();                              
                }                    
				              
			//if (skipIsoImo.equalsIgnoreCase("TRUE")) { 			              
           
				String query3 = "";               
				  
				query3 = "update REQUEST set request_status = 'Request Rejected' where request_key = '"+RequestID+"'";  				  
				System.out.println("The query3  is :-"+query3);           
				           
				           
				java.sql.Connection  con = null;                         
				java.sql.Statement stmt = null;              
				              
              
                   
				try {                   
					//Connecting to staging database and trying to execute update statement					                      
					Class.forName("oracle.jdbc.OracleDriver");                            
					con=java.sql.DriverManager.getConnection(DbConnectionString,DbUserId,DbPassword);              
					stmt=con.createStatement();   
					System.out.println("Before database update");   
					//query3 = "update REQUEST set request_status = 'Request Completed' where request_key = '"+RequestID+"'";  					              
					stmt.executeUpdate(query3);   
					System.out.println("Completed database update of query :- "+query3);   
				}                          
				catch(Exception e){					                      
					System.out.println("Exception on trying to update database");                      
					System.out.println(e);                      
					e.printStackTrace();                       
					System.out.println("--------------------------------------");                      
                   
				}                            
				finally {                      
					stmt.close();                         
					con.close();                         
				}               
					              
					              
					              
					              
					              
						              
			//}			              
						              
	}catch (java.lang.Exception e){                                                  
                    e.printStackTrace();                                                  
            }</bpelx:exec><invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService1" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv11"/><receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv6"/></sequence><bpelx:exec name="RJ-1" version="1.5" id="BxExe8">
                                setVariableData("EmailAttribute","REJECTED@aa-epa.gov");   
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");  
setVariableData("AdminGroupEmail",""); 
setVariableData("SKIP_ISOIMO","FALSE");
                            </bpelx:exec></sequence></scope></sequence>
            </case>
            <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:outcome') = 'APPROVE'">
                <bpelx:annotation>
                    <bpelx:pattern>Task outcome is APPROVE</bpelx:pattern>
                    <bpelx:general>
                        <bpelx:property name="userLabel">Task outcome is APPROVE</bpelx:property>
                    </bpelx:general>
                </bpelx:annotation>
                <sequence id="BpSeq22">
                    <assign id="BpAss19">
                        <copy>
                            <from expression="string('approved')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                            <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
                        </copy>
                        <copy>
                            <from expression="ora:getConversationId()"/>
                            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
                        </copy>
                        <copy>
                            <from expression="string('approved')"/>
                            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
                        </copy>
                    </assign></sequence>
            </case>
            <otherwise>
                <sequence id="BpSeq23">
                    <empty name="Empty1" id="BpEmp4"/>
                </sequence>
            </otherwise>
        </switch>
        <bpelx:exec name="COR_Approval" version="1.5" id="BxExe9">
            System.out.println("Before Manager(COR) Approval");                                                               
setVariableData("SKIP_ISOIMO","FALSE");                                                     
String adminGroup =  "";                                 
String valueS = "";                              
String userIDS = "";                           
String RequestID ="";                    
String strAWACC    ="";                   
String strDesc    ="";                   
String strAWSROLE    ="";                   
String strPath    ="";                    
String strPrinc    ="";                   
String strOUDScript = "";   
String OthersEmail ="";   
                 
           
                             
                                 
                                                  
//System.out.println("Column Count:- after DKOTLIN, with new OIM URL CODE***************");                                                                     
                                                                     
/*                                                                                    
Custom operations                                                                                    
*/                                                                                    
try {                                                                                
            java.lang.Object managerLogin = "";                                                                           
            java.lang.Object userLogin = "";                                                        
			java.lang.Object loginUser = "";			                                                      
            java.lang.Object isoManager = "";                                                      
			java.lang.Object procState = "";                                         
			java.lang.Object reqModel = "";			                                         
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                                                  
            String hostName = localMachine.getHostName().toString();                                                  
            System.out.println("Hostname of local machine: " + hostName);                                                  
            String host = hostName.substring(6, hostName.indexOf(".")-1);                                                  
            System.out.println("Env of local machine: " + host);                                                  
                                               
            String  envPwd = (String) getVariableData("EnvPwd");                                                                                   
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ; // Staging                                                           
                                                                                                                                            
                                                                            
      //get oimurl                                                                            
      Object obj = getVariableData("oimurl");                                                                    
      String tempStr = obj.toString();                                                                   
      String[] tempArr = tempStr.split("//");                                                                       
      oimURL = getVariableData("mcurl").toString();                                        
	                                                                           
      System.out.println("oimURL in NativeLogic is :- "+oimURL);                                                                 
                                                             
      String roleValue = "Preferred Name Change";                                                                 
      setVariableData("groupName",roleValue);                                                               
      System.out.println("The groupName value is :-"+roleValue);            		                                                                                    
            String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                                                    
            String authLoginConfig = "java.security.auth.login.config";                                                                                    
            String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                                                    
			// set up the environment for making the OIM API invocation                                                                                    
			java.util.Hashtable env = new java.util.Hashtable();                                                                                    
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                                                    
			oimInitialContextFactory);                                                                                    
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                                                    
			env.put(authLoginConfig, authLoginConfigPath);                                                                                    
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                                                    
			client.login(oimUserName, oimPassword.toCharArray());                                                                               
                                                                              
                                                                              
                        Thor.API.Operations.tcUserOperationsIntf userintf = client.getService(Thor.API.Operations.tcUserOperationsIntf.class);                                                                                    
	                managerLogin =getVariableData("inputVariable", "payload",                                                                                    
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:ManagerLogin");                                                                        
 	                userLogin =getVariableData("inputVariable", "payload",                                                                                    
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                                                                             
 	                loginUser =getVariableData("inputVariable", "payload",                                                                                  
	        		   "/ns3:process/ns4:RequesterDetails/ns4:Login"); 					                            					                                                         
                   // procState =getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:systemAttributes/task:state");                                         
 	                reqModel =getVariableData("inputVariable", "payload",                                                                                  
	        		   "/ns3:process/ns4:RequestModel"); 				                        		                                                                                                
                        ///ns3:process/ns4:RequestTarget                                                                                  
                        java.lang.Object roleXMLString = getVariableData("inputVariable", "payload",                                                                                    
	        		   "/ns3:process/ns4:RequestTarget");                                                                                 
                                                                                    
                        String roleString =  ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                                                    
                                                                             
                        System.out.println("Role in NativeLogic is :- "+roleString);                                                      
                       // Object mgrLogin = getVariableData("commentc");                                                         
						Object loginMgr = getVariableData("inputVariable", "payload",                                                                                  
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:ManagerLogin");                                                       
					   String mgrLogin =  ((oracle.xml.parser.v2.XMLElement)loginMgr).getText();                                                       
                                                                                  
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                                      
						String loginUsr =  ((oracle.xml.parser.v2.XMLElement)loginUser).getText();                                          
						String requestModel =  ((oracle.xml.parser.v2.XMLElement)reqModel).getText(); 							                                         
						//	String processState =  ((oracle.xml.parser.v2.XMLElement)procState).getText();						                                                          
                                           
                                           
						                                           
                        System.out.println("User Login in NativeLogic is:- "+usrLogin);                                                      
						System.out.println("The Login Requester in NativeLogic is:- "+loginUsr); 						                                                      
					//	System.out.println("Process State in NativeLogic is:- "+processState);                                                
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                                                         
                        RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                                                            
						System.out.println("RequestID in NativeLogic is == "+RequestID); 						                                           
						System.out.println("The Request Model in NativeLogic is == "+requestModel);          						                                                      
                        java.util.HashMap userMap = new java.util.HashMap();                                                                                    
                        System.out.println("Manager Login in NativeLogic is:- "+mgrLogin);                                                          
      
						if (null!= loginUsr &amp;&amp; loginUsr.equals(mgrLogin) &amp;&amp; requestModel.equals("Disable Account")){		                                   
							setVariableData("RequestByManager","YES");                   
							setVariableData("SKIP_ISOIMO", "TRUE");	                  
							System.out.println("RequestByManager in NativeLogic is set to:- YES");                   
							System.out.println("SKIP_ISOIMO in NativeLogic is set to:- YES"); 							                  
						} else if (null!= loginUsr &amp;&amp; loginUsr.equals(mgrLogin) &amp;&amp; requestModel.equals("Enable Account")){                  
							setVariableData("RequestByManager","YES");                   
							setVariableData("SKIP_ISOIMO", "TRUE");	                  
							System.out.println("RequestByManager in NativeLogic is set to:- YES");                   
							System.out.println("SKIP_ISOIMO in NativeLogic is set to:- YES");                   
						} else if (null!= loginUsr &amp;&amp; loginUsr.equals(mgrLogin)){                  
							//setVariableData("RequestForOthers","YES");                   
							System.out.println("RequestForOthers in NativeLogic is set to:- YES");                   
						}	                                                                              
       
	             try {                                                             
                            userMap.put("Users.User ID", mgrLogin);                                                             
                             Thor.API.tcResultSet moResultSet = userintf.findUsers(userMap);                                                             
                             setVariableData("EmailAttribute", moResultSet.getStringValue("Users.Email"));                                                             
                                System.out.println("Manager Email is:- " +moResultSet.getStringValue("Users.Email"));                         
                              setVariableData("EmailTemp",getVariableData("EmailAttribute"));                     
							  System.out.println("EmailTemp Email is:- "+getVariableData("EmailTemp"));									                     
                                                        
	                 }                                                             
	             catch (java.lang.Exception e)                                                              
                    {                                                             
	              e.printStackTrace();                                                             
	             }         
				                                               
                                                                         
               try                                                                          
                    {                                                                         
                                                                                                 
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                                   
				com.thortech.xl.dataaccess.tcDataProvider dbProvider1 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                                  
                                String query1 = "select  LKV_DECODED from LKV where LKV_ENCODED ='OIM_Server'";                                                                                   
                                System.out.println("Query1 in NativeLogic is == "+query1);                                                                           
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                                  
				usersDataSet1.setQuery(dbProvider1, query1);                                                                                   
				usersDataSet1.executeQuery();                                                                                  
					                                                                                  
		                                                                                              
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                                  
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                                           
                                                                         
                                System.out.println("Column Count:- "+numColumns1);                                                                             
                                System.out.println("Record Count:- "+numRecords1);                                                                             
                                //iterate through each record                                                                                  
                             for(int k = 0; k &lt; numRecords1; k++)                                                                                  
                                {                                                                                  
		                usersDataSet1.goToRow(k);                                                                                  
		                                                                                   
		                //iterate through each column of a record                                                                                  
		                for(int m = 0; m &lt; numColumns1; m++)                                                                                  
		                {                                                                                  
		                    String columnName = usersDataSet1.getColumnName(m);                                                                                  
		                    String value = usersDataSet1.getString(m);                                                                                  
                                    setVariableData("OIMServer",value);                                                                                    
                                System.out.println("The OIMServer value is :-"+value);                                                                                  
                                                                                 
		                }                                                                                  
		            }                                                                                  
                    }                                                                         
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                                         
                {                                                                         
                    e3.printStackTrace();                                                                          
                }                                                                         
                                              
               try                                                                          
                    {                                                                         
                                                                                                 
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                                   
				com.thortech.xl.dataaccess.tcDataProvider dbProvider1 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                                  
                                String queryE = "select  LKV_DECODED from LKV where LKV_ENCODED ='SupportEmail'";                                                                                   
                                System.out.println("QueryE in NativeLogic is == "+queryE);                                                                           
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                                  
				usersDataSet1.setQuery(dbProvider1, queryE);                                                                                   
				usersDataSet1.executeQuery();                                                                                  
					                                                                                  
		                                                                                              
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                                  
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                                           
                                                                         
                                System.out.println("Column Count:- "+numColumns1);                                                                             
                                System.out.println("Record Count:- "+numRecords1);                                                                             
                                //iterate through each record                                                                                  
                             for(int k = 0; k &lt; numRecords1; k++)                                                                                  
                                {                                                                                  
		                usersDataSet1.goToRow(k);                                                                                  
		                                                                                   
		                //iterate through each column of a record                                                                                  
		                for(int m = 0; m &lt; numColumns1; m++)                                                                                  
		                {                                                                                  
		                    String columnName = usersDataSet1.getColumnName(m);                                                                                  
		                    String value = usersDataSet1.getString(m);                                                                                  
                                    setVariableData("SupportEmail",value);                                                                                    
                                System.out.println("The OIMServer value is :-"+value);                                                                                  
                                                                                 
		                }                                                                                  
		            }                                                                                  
                    }                                                                         
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                                         
                {                                                                         
                    e3.printStackTrace();                                                                          
                }  
 
               try                                           
                    {                                          
                                                                  
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                    
				com.thortech.xl.dataaccess.tcDataProvider dbProviderA = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                   
                                String queryA = "select  LKV_DECODED from LKV where LKV_ENCODED ='AdminGroupEmail'";                                                    
                                System.out.println("QueryA in NativeLogic is == "+queryA);                                            
                                com.thortech.xl.dataaccess.tcDataSet usersDataSetA = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                   
				usersDataSetA.setQuery(dbProviderA, queryA);                                                    
				usersDataSetA.executeQuery();                                                   
					                                                   
		                                                               
                                int numColumnsA = usersDataSetA.getColumnCount();                                                   
                                int numRecordsA = usersDataSetA.getTotalRowCount();                                            
                                          
                                System.out.println("Column Count:- "+numColumnsA);                                              
                                System.out.println("Record Count:- "+numRecordsA);                                              
                                //iterate through each record                                                   
                             for(int k = 0; k &lt; numRecordsA; k++)                                                   
                                {                                                   
		                usersDataSetA.goToRow(k);                                                   
		                                                    
		                //iterate through each column of a record                                                   
		                for(int m = 0; m &lt; numColumnsA; m++)                                                   
		                {                                                   
		                    String columnName = usersDataSetA.getColumnName(m);                                                   
		                    String value = usersDataSetA.getString(m);                                                   
                                 //setVariableData("AdminGroupEmail",value);      
								//adminGroup	= value;     
							  for (String retval: value.split(",")) {     
								 adminGroup += "'" + retval.toUpperCase() + "',";     
							  }     
								adminGroup =adminGroup.substring(0,adminGroup.length()-1);							       
                                System.out.println("The AdminGroup value is :-"+adminGroup);                                                 
                                                  
		                }                                                   
		            }                                                   
                    }                                          
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                          
                {                                          
                    e3.printStackTrace();                                           
                }						 
 
                                        // Checking Admins Status                                             
                                        try                                                
                                            {                                                                         
                                                Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                         
                                                com.thortech.xl.dataaccess.tcDataProvider dbProviderAd = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                        
                                                String queryAd = "select usr_email,usr_login from usr where usr_login in ("+adminGroup+") and usr_status ='Active'";                                               
                                                System.out.println("QueryAd in COR_Approval is == "+queryAd);                                                 
                                                com.thortech.xl.dataaccess.tcDataSet usersDataSetAd = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                        
                                                usersDataSetAd.setQuery(dbProviderAd, queryAd);                                                         
                                                usersDataSetAd.executeQuery();                                                        
                                                                                                                
                                                                                                    
                                                int numColumnsAd = usersDataSetAd.getColumnCount();                                                        
                                                int numRecordsAd = usersDataSetAd.getTotalRowCount();                                                 
                                                               
                                                System.out.println("Column Count:- "+numColumnsAd);                                                   
                                                System.out.println("Record Count:- "+numRecordsAd);                                              
                                                String email = "";                  
												String usr_names = "";                 
												String appNames  = "";												                 
                                                //iterate through each record                 
												if (numRecordsAd > 0)                 
												{                 
													for(int r = 0; r &lt; numRecordsAd; r++)                                                        
													{                                                        
															usersDataSetAd.goToRow(r);                                                        
													                 
														//iterate through each column of a record                                                        
														for(int s = 0; s &lt; numColumnsAd; s++)                                                        
														{                    
															if (s==0)                 
															{                 
																email += usersDataSetAd.getString(s) +",";                 
															}else{                 
															usr_names += usersDataSetAd.getString(s) +",";													                 
															}                 
																				                 
														}                                              
													}                                             
													email = email.substring(0,email.length()-1);                  
												   usr_names =usr_names.substring(0,usr_names.length()-1);                                 
													setVariableData("AdminGroupEmail",usr_names);                             
													System.out.println("New Admin Approvers in COR_Approval:- "+usr_names);													                    
												}else                 
												{                                    
													System.out.println("No AdminGroup Approvers Assigned");													                 
												                 
												}                            
										}                                               
										catch(com.thortech.xl.dataaccess.tcDataSetException e5)                                               
										{                                               
											e5.printStackTrace();                                                
										}  
 
 
				 
   
               try                                                                                 
                    {                                                                                
                                                                                                        
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                                          
				com.thortech.xl.dataaccess.tcDataProvider dbProviderF = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                                         
						String queryE = "SELECT  e.NAMECHANGE_OTHERS FROM usr u ,EPA_SECURITY_OFFICERS e where u.usr_login ='"+usrLogin+"'" + " and u.usr_status= 'Active' AND e.program = substr(u.usr_udf_department,1,DECODE(instr(u.usr_udf_department,'-',1,1),0,length(u.usr_udf_department) + 1,instr(u.usr_udf_department,'-',1,1)) - 1)";                                                                                                                                     
                                System.out.println("QueryE in NativeLogic is == "+queryE);                                                                                  
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                                         
				usersDataSet1.setQuery(dbProviderF, queryE);                                                                                          
				usersDataSet1.executeQuery();                                                                                         
					                                                                                         
		                                                                                                     
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                                         
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                                                  
                                                                                
                                System.out.println("Column Count:- "+numColumns1);                                                                                    
                                System.out.println("Record Count:- "+numRecords1);                                                                                    
                                //iterate through each record                                                                                         
                             for(int k = 0; k &lt; numRecords1; k++)                                                                                         
                                {                                                                                         
		                usersDataSet1.goToRow(k);                                                                                         
		                                                                                          
		                //iterate through each column of a record                                                                                         
		                for(int m = 0; m &lt; numColumns1; m++)                                                                                         
		                {                                                                                         
		                    String columnName = usersDataSet1.getColumnName(m);                                                                                         
		                    String value = usersDataSet1.getString(m);                                                                                         
								valueS = value;   
                                System.out.println("The OthersEmail value is :-"+value);                                                                                         
                                                                                        
		                }   
							            boolean commaVal = valueS.contains(",");                                                                                
                                        String [] arrOfStr = valueS.split(",");                                                                                
                                       // String userIDS = "";                                                                               
                                        if (commaVal) {                                                                                
                                            for (String a : arrOfStr){                                                                                
                                                System.out.println("Users.User ID: "+a);                                                                                
                                                OthersEmail += "'"+a+"',";                                                                               
                                            }                                                                                
                                            OthersEmail = OthersEmail.substring(0,OthersEmail.length()-1);                                                                               
                                        }else if(null!= valueS){                                                                                 
                                            System.out.println("Users.User ID: "+valueS);                                                                               
                                            OthersEmail = "'"+valueS+"'";                                                                               
                                        } else {                                                     
											System.out.println("Email missing for the users " +valueS);                                                        
										}   
		            }                                                                                         
                    }                                                                                
                catch(com.thortech.xl.dataaccess.tcDataSetException e6)                                                                                
                {                                                                                
                    e6.printStackTrace();                                                                                 
                }   
   
   
                                      // For sending emails To Others in NameChange                                       
                                      try                                       
                                            {                                                                                                           
                                                Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                                           
                                                com.thortech.xl.dataaccess.tcDataProvider dbProviderN = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                                          
                                                String query2 = "select usr_email,usr_login from usr where usr_login in ("+OthersEmail+") and usr_status ='Active'";                                                                                 
                                                System.out.println("Query2 in NL is == "+query2);                                                                                   
                                                com.thortech.xl.dataaccess.tcDataSet usersDataSet2 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                                          
                                                usersDataSet2.setQuery(dbProviderN, query2);                                                                                           
                                                usersDataSet2.executeQuery();                                                                                          
                                                                                                                                                  
                                                                                                                                      
                                                int numColumns2 = usersDataSet2.getColumnCount();                                                                                          
                                                int numRecords2 = usersDataSet2.getTotalRowCount();                                                                                   
                                                                                                 
                                                System.out.println("Column Count:- "+numColumns2);                                                                                     
                                                System.out.println("Record Count:- "+numRecords2);                                                                                
                                                String email = "";                                                    
												String usr_names = "";                                                   
												String appNames  = "";												                                                   
                                                //iterate through each record                                                   
												if (numRecords2 > 0)                                                   
												{                                                   
													for(int r = 0; r &lt; numRecords2; r++)                                                                                          
													{                                                                                          
															usersDataSet2.goToRow(r);                                                                                          
													                                                   
														//iterate through each column of a record                                                                                          
														for(int s = 0; s &lt; numColumns2; s++)                                                                                          
														{                                                      
															if (s==0)                                                   
															{                                                   
																email += usersDataSet2.getString(s) +",";                                                   
															}else{                                                   
															usr_names += usersDataSet2.getString(s) +",";													                                                   
															}                                                   
																				                                                   
														}                                                                                
													}                                                                               
													email = email.substring(0,email.length()-1);                                                    
													usr_names =usr_names.substring(0,usr_names.length()-1);                                                                                                                                                             
													System.out.println("Email will be sent to :- " +usr_names);												                      
													                      
												}else                                                   
												{                                                   
												                      
													System.out.println("OthersEmail value is Null");													                                                   
												                                                   
												}                                                   
											   if (email != "")                                                  
												{                                                  
														setVariableData("OthersEmail",email);                   												                      
														System.out.println("OthersEmail sent to  :-"+email);                                              															                      
												}else                                                  
												{                                                  
												                                               
															System.out.println("OthersEmail is Null");															                                                  
												                                                  
												}                                                  
                                    }                                                                                 
                                catch(com.thortech.xl.dataaccess.tcDataSetException e7)                                                                                 
                                {                                                                                 
                                    e7.printStackTrace();                                                                                  
                                }     
   
                				                				                                                        
																		                            
       /**       try                                                                          
                    {                                                                         
                                                                                                 
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                                   
				com.thortech.xl.dataaccess.tcDataProvider dbProvider2 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                       
								String userStatus = "";				                                                    
                                String query2 = "SELECT OST.OST_STATUS from USR, OST, OIU, OBJ "+                                                   
												"WHERE USR.USR_KEY=OIU.USR_KEY "+                                                   
												"AND OIU.OST_KEY=OST.OST_KEY "+                                                   
												"AND OST.OBJ_KEY=OBJ.OBJ_KEY "+                                                   
												"AND OBJ.OBJ_NAME LIKE "+ "'PRNCACCOUNT'"+                                                    
												"AND USR.USR_LOGIN ='"+usrLogin+"'";                                                                        
                                System.out.println("Query2 in NativeLogic is == "+query2);                                                                           
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet2 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                                  
				usersDataSet2.setQuery(dbProvider2, query2);                                                                                   
				usersDataSet2.executeQuery();                                                                                  
					                                                                                  
		                                                                                              
                                int numColumns2 = usersDataSet2.getColumnCount();                                                                                  
                                int numRecords2 = usersDataSet2.getTotalRowCount();                                                                           
                                                                         
                                System.out.println("Column Count:- "+numColumns2);                                                                             
                                System.out.println("Record Count:- "+numRecords2);                                                                             
                                //iterate through each record                                                                                  
                             for(int r = 0; r &lt; numRecords2; r++)                                                                                  
                                {                                                                                  
		                usersDataSet2.goToRow(r);                                                                                  
		                                                                                   
		                //iterate through each column of a record                                                                                  
		                for(int s = 0; s &lt; numColumns2; s++)                                                                                  
		                {                                                                                  
		                    String columnName = usersDataSet2.getColumnName(s);                                                                                  
		                    String value = usersDataSet2.getString(s);                                                    
                                    System.out.println("The samAccountStatus value is :-"+value);                                                    
                                    if (value.equalsIgnoreCase("DISABLED") &amp;&amp; value != "")                                                    
								{                                                                        
                                    setVariableData("ADSV_ACCOUNT","DISABLED"); 								                                                      
                                    System.out.println("The ADSV_ACCOUNT value is set :- DISABLED ");                                                      
								}								                                                    
                                                                                 
		                }                                                                                  
		            }                                                                                  
                    }                                                                         
                catch(com.thortech.xl.dataaccess.tcDataSetException e4)                                                                         
                {                                                                         
                    e4.printStackTrace();                                                                          
                } */                                                                        
     				                       
						String appNames  = "";	           
           
						appNames = mgrLogin + "," +getVariableData("AdminGroupEmail");                       
						setVariableData("commentc",appNames);      
									       
                    client.logout();                                                                                  
    }                                                                                    
 catch (java.lang.Exception e)                                                                                    
 {                                                                                    
    System.out.println("----------------------");                                                                                    
    e.printStackTrace();                                                                                    
    System.out.println("----------------------");                                                                                    
}
        </bpelx:exec>
        <scope name="ApprovalTask_COR" xmlns:wf="http://schemas.oracle.com/bpel/extension/workflow" wf:key="ApprovalTask_1_globalVariable" id="BpScp8">
      <bpelx:annotation>
         <bpelx:pattern patternName="bpelx:workflow"/>
      </bpelx:annotation>
      <variables>
         <variable name="initiateTaskInput" messageType="ns2:initiateTaskMessage"/>
         <variable name="initiateTaskResponseMessage" messageType="ns2:initiateTaskResponseMessage"/>
      </variables>
      <sequence id="BpSeq24">
         <switch name="Switch2" id="BpSwt6">
            <case condition="bpws:getVariableData(&quot;RequestByManager&quot;) = 'YES'">
               <bpelx:annotation>
                  <bpelx:general>
                     <bpelx:property name="userLabel">Request By Manager
                     Request by Manager</bpelx:property>
                  </bpelx:general>
               </bpelx:annotation>
               <sequence name="Sequence14" id="BpSeq25">
                  <empty name="Empty1" id="BpEmp5"/>
               </sequence>
            </case>
            <case condition="(bpws:getVariableData(&quot;ADSV_DEPT&quot;) = 'TRUE' and  bpws:getVariableData(&quot;ADSV_ACCOUNT&quot;) != 'DISABLED' )">
               <bpelx:annotation>
                  <bpelx:general>
                     <bpelx:property name="userLabel">Department is Available
                     Department is Available</bpelx:property>
                  </bpelx:general>
               </bpelx:annotation>
               <scope name="Pmompt_Manager" id="BpScp9">
                  <bpelx:annotation>
                     <bpelx:pattern patternName="bpelx:email"/>
                  </bpelx:annotation>
                  <variables>
                     <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
                     <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
                     <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
                  </variables>
                  <sequence name="Sequence2" id="BpSeq26">
                     <assign name="EmailParamsAssign" id="BpAss20">
                                    <copy>
                                        <from expression="string('Default')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat('FYI Only:- A new ', bpws:getVariableData('groupName') , ' has been received for ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), ' has been received(user belongs to ',bpws:getVariableData('DEPT_PREFIX'),' department) ')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(' &lt;BR> A new request for ',bpws:getVariableData('groupName'),'  is awaiting your approval.  &lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to Approve or Reject the request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('text/html; charset=UTF-8')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                    </copy>
                                </assign>
                     <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService2" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv12"/>
                     <assign name="EmailParamsAssign" id="BpAss21">
                                    <copy>
                                        <from expression="string('Default')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat('FYI Only:- A new ', bpws:getVariableData('groupName') , ' has been received for ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), ' has been received(user belongs to ',bpws:getVariableData('DEPT_PREFIX'),' department) ')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(bpws:getVariableData('OthersEmail'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat('No action is needed at this time as the request is pending approval by HR/COR. &lt;BR>&lt;BR> Requested Details are provided below :- &lt;BR> &lt;B>Request :&lt;/B> ', bpws:getVariableData('groupName'),string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '),'&lt;BR>&lt;BR> Click ', bpws:getVariableData('OIMServer'), ' to view the status of this request. &lt;BR>&lt;BR>Thank you,&lt;BR>&lt;BR>The eIDW System Administrator ')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('text/html; charset=UTF-8')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                    </copy>
                                </assign>
                     <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService2" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv13"/>
                  </sequence>
               </scope>
            </case>
            <case condition="bpws:getVariableData(&quot;ADSV_ACCOUNT&quot;) = 'DISABLED' ">
               <bpelx:annotation>
                  <bpelx:general>
                     <bpelx:property name="userLabel">User Status Disabled
                     User Status Disabled</bpelx:property>
                  </bpelx:general>
               </bpelx:annotation>
               <scope name="Pmompt_Manager_Dis" id="BpScp10">
                  <bpelx:annotation>
                     <bpelx:pattern patternName="bpelx:email"/>
                  </bpelx:annotation>
                  <variables>
                     <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
                     <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
                     <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
                  </variables>
                  <sequence name="Sequence2" id="BpSeq27">
                     <assign name="EmailParamsAssign" id="BpAss22">
                        <copy>
                           <from expression="string('Default')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                        </copy>
                        <copy>
                           <from expression="string('')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                        </copy>
                        <copy>
                           <from expression="string('')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                        </copy>
                        <copy>
                           <from expression="string('')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                        </copy>
                        <copy>
                           <from expression="concat(' Request to enable  ', bpws:getVariableData('groupName'), ' for  ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                        </copy>
                        <copy>
                           <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                        </copy>
                        <copy>
                           <from expression="(concat(' &lt;BR> A request to enable an ',bpws:getVariableData('groupName'),' that is disabled due to 30 days of  inactivity is awaiting  your approval. &lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '),string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Service Details:- &lt;/B>',string('&lt;BR>  '), bpws:getVariableData('ServiceDetails'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to Approve or Reject the request.')))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                        </copy>
                        <copy>
                           <from expression="string('text/html; charset=UTF-8')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                        </copy>
                     </assign>
                     <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService2" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv14"/>
                     <assign name="EmailParamsAssign" id="BpAss23">
                        <copy>
                           <from expression="string('Default')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                        </copy>
                        <copy>
                           <from expression="string('')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                        </copy>
                        <copy>
                           <from expression="string('')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                        </copy>
                        <copy>
                           <from expression="string('')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                        </copy>
                        <copy>
                           <from expression="concat( 'Request to enable ', bpws:getVariableData('groupName'), ' for ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                        </copy>
                        <copy>
                           <from expression="bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:Email')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                        </copy>
                        <copy>
                           <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), ', ', string('   '), '&lt;BR> &lt;BR> Your request to enable your ', bpws:getVariableData('groupName'), '  has been submitted. Request details are provided below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Service Details: &lt;/B>',string('&lt;BR> '), bpws:getVariableData('ServiceDetails'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to track your request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                        </copy>
                        <copy>
                           <from expression="string('text/html; charset=UTF-8')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                        </copy>
                     </assign>
                     <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService2" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv15"/>
                  </sequence>
               </scope>
            </case>
         </switch>
         <switch name="Switch14" id="BpSwt7">
            <case condition=" bpws:getVariableData(&quot;RequestByManager&quot;) = 'YES'">
               <bpelx:annotation>
                  <bpelx:general>
                     <bpelx:property name="userLabel">Manager Request
                                    Request By Manager
                                </bpelx:property>
                  </bpelx:general>
               </bpelx:annotation>
               <sequence name="Sequence15" id="BpSeq28">
                  <empty name="Empty1" id="BpEmp6"/>
               </sequence>
            </case>
            <otherwise>
               <sequence name="Sequence13" id="BpSeq29">
                  <assign name="ApprovalTask_1_AssignTaskAttributes" id="BpAss24">
                     <copy>
                        <from expression="number(3)" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                        <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:priority"/>
                     </copy>
                     <copy>
                        <from>
            <payload xmlns="http://xmlns.oracle.com/bpel/workflow/task">
 <Parameter1/>
 <RequestID/>
 <RequestModel/>
 <RequestTarget/>
 <url/>
	<RequesterDetails xmlns="http://xmlns.oracle.com/request/RequestDetails"/> 
	<BeneficiaryDetails xmlns="http://xmlns.oracle.com/request/RequestDetails"/> 
	<ObjectDetails xmlns="http://xmlns.oracle.com/request/RequestDetails"/> 
	<OtherDetails xmlns="http://xmlns.oracle.com/request/RequestDetails"/> 
 <RequesterDisplayName/>
 <BeneficiaryDisplayName/>
 <Requester/>
</payload>
         </from>
                        <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload"/>
                     </copy>
                     <copy>
                        <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestID"/>
                        <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:RequestID"/>
                     </copy>
                     <copy>
                        <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestModel"/>
                        <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:RequestModel"/>
                     </copy>
                     <copy>
                        <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestTarget"/>
                        <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:RequestTarget"/>
                     </copy>
                     <copy>
                        <from variable="inputVariable" part="payload" query="/ns3:process/ns4:url"/>
                        <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:url"/>
                     </copy>
                     <copy>
                        <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails"/>
                        <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/ns4:RequesterDetails"/>
                     </copy>
                     <copy>
                        <from variable="inputVariable" part="payload" query="/ns3:process/ns4:BeneficiaryDetails"/>
                        <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/ns4:BeneficiaryDetails"/>
                     </copy>
                     <copy>
                        <from variable="inputVariable" part="payload" query="/ns3:process/ns4:ObjectDetails"/>
                        <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/ns4:ObjectDetails"/>
                     </copy>
                     <copy>
                        <from variable="inputVariable" part="payload" query="/ns3:process/ns4:OtherDetails"/>
                        <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/ns4:OtherDetails"/>
                     </copy>
                     <copy>
                        <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails/ns4:DisplayName"/>
                        <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:RequesterDisplayName"/>
                     </copy>
                     <copy>
                        <from variable="inputVariable" part="payload" query="/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName"/>
                        <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:BeneficiaryDisplayName"/>
                     </copy>
                     <copy>
                        <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails/ns4:Login"/>
                        <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:Requester"/>
                     </copy>
                     <copy>
                        <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestID"/>
                        <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:identificationKey"/>
                     </copy>
                     <copy>
                        <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails/ns4:Login"/>
                        <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:creator"/>
                     </copy>
                     <copy bpelx:ignoreMissingFromData="yes" bpelx:insertMissingToData="yes">
                        <from variable="commentc"/>
                        <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:Parameter1"/>
                     </copy>
                     <copy bpelx:insertMissingToData="yes">
                        <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="EmailAttribute"/>
                        <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:Parameter2"/>
                     </copy>
                     <copy bpelx:ignoreMissingFromData="yes" bpelx:insertMissingToData="yes">
                        <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="OIMServer"/>
                        <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:Parameter4"/>
                     </copy>
                  </assign>
                  <invoke name="initiateTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskService" operation="initiateTask" inputVariable="initiateTaskInput" outputVariable="initiateTaskResponseMessage" id="BpInv16"/>
                  <receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv7"/>
               </sequence>
            </otherwise>
         </switch>
      </sequence>
   </scope><switch name="taskSwitch" id="BpSwt8">
      <case condition=" bpws:getVariableData(&quot;RequestByManager&quot;) = 'YES' ">
         <bpelx:annotation>
            <bpelx:general>
               <bpelx:property name="userLabel">Manager Request
                            Request by Manager
                        </bpelx:property>
            </bpelx:general>
         </bpelx:annotation>
         <empty name="Empty1" id="BpEmp7"/>
      </case>
      <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:state') = 'WITHDRAWN'">
         <bpelx:annotation>
            <bpelx:general>
               <bpelx:property name="userLabel">Task is withdrawn
                            Request Withdrawn
                        </bpelx:property>
            </bpelx:general>
         </bpelx:annotation>
         <sequence id="BpSeq30">
            <assign id="BpAss25">
               <copy>
                  <from expression="string('rejected')"/>
                  <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
               </copy>
               <copy>
                  <from expression="ora:getConversationId()"/>
                  <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
               </copy>
               <copy>
                  <from expression="string('rejected')"/>
                  <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
               </copy>
            </assign>
            <scope name="Benificiary_Withdrawn1" id="BpScp11">
               <bpelx:annotation>
                  <bpelx:pattern patternName="bpelx:email"/>
               </bpelx:annotation>
               <variables>
                  <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
                  <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
                  <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
               </variables>
               <sequence name="Sequence5" id="BpSeq31">
                  <sequence name="Sequence1" id="BpSeq32">
                     <assign name="EmailParamsAssign" id="BpAss26">
                        <copy>
                           <from expression="string('Default')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                        </copy>
                        <copy>
                           <from expression="string('')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                        </copy>
                        <copy>
                           <from expression="string('')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                        </copy>
                        <copy>
                           <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                        </copy>
                        <copy>
                           <from expression="concat(bpws:getVariableData('groupName'), ' request has been withdrawn')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                        </copy>
                        <copy>
                           <from expression="concat( bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), '  ', string(' has  withdrawn '), '   ', bpws:getVariableData('groupName'), '  request. &lt;BR>&lt;BR>Request details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                        </copy>
                        <copy>
                           <from expression="string('text/html; charset=UTF-8')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                        </copy>
                     </assign>
                     <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService1" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv17"/>
                     <receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv8"/>
                  </sequence>
                  <bpelx:exec name="WD-1" version="1.5" id="BxExe10">setVariableData("EmailAttribute","REJECTED@aa-epa.gov");   
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov"); 
setVariableData("AdminGroupEmail","");
                                System.out.println("Request Withdrawan: ");
                            </bpelx:exec>
               </sequence>
            </scope>
         </sequence>
      </case>
      <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:outcome') = 'REJECT'">
         <bpelx:annotation>
            <bpelx:pattern>Task outcome is REJECT</bpelx:pattern>
            <bpelx:general>
               <bpelx:property name="userLabel">Task outcome is REJECT
                            Request Rejected
                        </bpelx:property>
            </bpelx:general>
         </bpelx:annotation>
         <sequence id="BpSeq33">
            <assign id="BpAss27">
               <copy>
                  <from expression="string('rejected')"/>
                  <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
               </copy>
               <copy>
                  <from expression="ora:getConversationId()"/>
                  <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
               </copy>
               <copy>
                  <from expression="string('rejected')"/>
                  <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
               </copy>
            </assign>
            <scope name="Prompt_Benificiary2" id="BpScp12">
               <bpelx:annotation>
                  <bpelx:pattern patternName="bpelx:email"/>
               </bpelx:annotation>
               <variables>
                  <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
                  <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
                  <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
               </variables>
               <sequence name="Sequence5" id="BpSeq34">
                  <sequence name="Sequence1" id="BpSeq35">
                     <switch name="Switch10" id="BpSwt9">
                        <case condition="bpws:getVariableData(&quot;ADSV_ACCOUNT&quot;) = 'DISABLED'">
                           <bpelx:annotation>
                              <bpelx:general>
                                 <bpelx:property name="userLabel">User Disabled
                                                    Account Disabled
                                                </bpelx:property>
                              </bpelx:general>
                           </bpelx:annotation>
                           <assign name="EmailEnableParamAssign" id="BpAss28">
                              <copy>
                                 <from expression="string('Default')"/>
                                 <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                              </copy>
                              <copy>
                                 <from expression="string('')"/>
                                 <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                              </copy>
                              <copy>
                                 <from expression="string('')"/>
                                 <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                              </copy>
                              <copy>
                                 <from expression="string('')"/>
                                 <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                              </copy>
                              <copy>
                                 <from expression="concat('Your ' , bpws:getVariableData('groupName'), ' enable request has been rejected')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                 <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                              </copy>
                              <copy>
                                 <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'),', ', string('   '), '&lt;BR> &lt;BR> Your request to enable  ', bpws:getVariableData('groupName'),'  has been rejected. Request details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Manager Comment: &lt;/B>', string('  '), bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:userComment/task:comment'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to track your request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                 <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                              </copy>
                              <copy>
                                 <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="userEmail"/>
                                 <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                              </copy>
                              <copy>
                                 <from expression="string('text/html; charset=UTF-8')"/>
                                 <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                              </copy>
                           </assign>
                        </case>
                        <otherwise>
                           <assign name="EmailParamsAssign" id="BpAss29">
                              <copy>
                                 <from expression="string('Default')"/>
                                 <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                              </copy>
                              <copy>
                                 <from expression="string('')"/>
                                 <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                              </copy>
                              <copy>
                                 <from expression="string('')"/>
                                 <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                              </copy>
                              <copy>
                                 <from expression="string('')"/>
                                 <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                              </copy>
                              <copy>
                                 <from expression="concat('Your ' , bpws:getVariableData('AwsAccount'), ' request has been rejected')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                 <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                              </copy>
                              <copy>
                                 <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'),', ', string('   '), '&lt;BR> &lt;BR> Your request for Preferred Name Change ', bpws:getVariableData('AwsAccount'),' with the role of ', bpws:getVariableData('AwsRole'),' has been rejected. If you have questions about the rejection of this request, please contact your manager at ', bpws:getVariableData('EmailAttribute'),'. Request details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Manager Comment: &lt;/B>', string('  '), bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:userComment/task:comment'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to track your request.&lt;BR>&lt;BR>Sincerely,&lt;BR>&lt;BR>EPA WAA Manager'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                 <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                              </copy>
                              <copy>
                                 <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="userEmail"/>
                                 <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                              </copy>
                              <copy>
                                 <from expression="string('text/html; charset=UTF-8')"/>
                                 <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                              </copy>
                           </assign>
                        </otherwise>
                     </switch>
                     <bpelx:exec name="Reject-Manager" version="1.5" id="BxExe11">setVariableData("EmailAttribute","REJECTED@aa-epa.gov");   
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");  
setVariableData("AdminGroupEmail",""); 
setVariableData("SKIP_ISOIMO","FALSE");
                                    setVariableData("EmailAttribute","REJECTED@aa-epa.gov");     
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");    
setVariableData("AdminGroupEmail","");   
setVariableData("SKIP_ISOIMO","FALSE"); 
System.out.println("Request Rejected");
                                </bpelx:exec>
                     <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService1" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv18"/>
                     <receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv9"/>
                  </sequence>
                  <bpelx:exec name="RJ-1" version="1.5" id="BxExe12">setVariableData("EmailAttribute","REJECTED@aa-epa.gov");   
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");  
setVariableData("AdminGroupEmail",""); 
setVariableData("SKIP_ISOIMO","FALSE");
                                setVariableData("EmailAttribute","REJECTED@aa-epa.gov");     
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");    
setVariableData("AdminGroupEmail","");   
setVariableData("SKIP_ISOIMO","FALSE"); 
System.out.println("Request Rejected");
                            </bpelx:exec>
               </sequence>
            </scope>
         </sequence>
      </case>
      <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:outcome') = 'APPROVE'">
         <bpelx:annotation>
            <bpelx:pattern>Task outcome is APPROVE</bpelx:pattern>
            <bpelx:general>
               <bpelx:property name="userLabel">Task outcome is APPROVE
                            Request Approved
                        </bpelx:property>
            </bpelx:general>
         </bpelx:annotation>
         <sequence id="BpSeq36">
            <assign id="BpAss30">
               <copy>
                  <from expression="string('approved')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                  <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
               </copy>
               <copy>
                  <from expression="ora:getConversationId()"/>
                  <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
               </copy>
               <copy>
                  <from expression="string('approved')"/>
                  <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
               </copy>
            </assign>
         </sequence>
      </case>
      <otherwise>
         <sequence id="BpSeq37">
            <empty name="Empty1" id="BpEmp8"/>
         </sequence>
      </otherwise>
   </switch><bpelx:exec name="LSD" version="1.5" id="BxExe13">
            System.out.println("Getting LSD Approvers");                                                   
              
String RequestID = "";  
String adminGroup =  ""; 
String roleName ="";  
String roleUserIds ="";                                   
                        
String skipIsoImo = (String) getVariableData("SKIP_ISOIMO");                               
System.out.println("The skipIsoImo value in IMO is:- "+skipIsoImo);                                          
                                        
try {                      
           
// Set webURL            
            
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                             
            String hostName = localMachine.getHostName().toString();                
            String webUrl = "http://" +hostName +":15000/";               
            setVariableData("webserUrl",webUrl);               
            System.out.println("hostName in NL1 : " + hostName);              
            System.out.println("webUrl of NL1 : " + webUrl);              
                     
            String  envPwd = (String) getVariableData("EnvPwd");                     
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                                
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key =""; // Staging                              
                      
                        java.lang.Object userLogin = "";                                             
                        java.lang.Object isoManager = "";                                           
                        java.lang.Object managerOutcome = "";                                           
                        java.lang.Object rEmail = "";    			                                        
		/**				                                        
			oracle.security.jps.JpsContext ctx =                                                                   
			oracle.security.jps.JpsContextFactory.getContextFactory().getContext();                                                                   
                                                                   
                        final oracle.security.jps.service.credstore.CredentialStore cs =                                                                   
			(oracle.security.jps.service.credstore.CredentialStore)                                                                   
			ctx.getServiceInstance(oracle.security.jps.service.credstore.CredentialStore.class);                                                                   
			oracle.security.jps.service.credstore.CredentialMap cmap =                                                                   
			cs.getCredentialMap("oracle.oim.sysadminMap");                                                                   
			oracle.security.jps.service.credstore.Credential cred = cmap.getCredential("sysadmin");                                                                   
			if (cred instanceof oracle.security.jps.service.credstore.PasswordCredential) {                                                                   
			oracle.security.jps.service.credstore.PasswordCredential pcred =                                                                   
			(oracle.security.jps.service.credstore.PasswordCredential)cred;                                                                   
                                                                   
			char[] p = pcred.getPassword();                                                                   
			oimUserName = pcred.getName();                                                                   
			oimPassword = new String(p);                                                                   
			}                                             
                                        
**/			                                        
                        //get oimurl                                                        
                        Object obj = getVariableData("oimurl");                                                        
                      //  Object obj = getVariableData("oimurl");                                                                               
                    //    oimURL = obj.toString();                                          
			String tempStr = obj.toString();                                         
			String[] tempArr = tempStr.split("//");                                         
			//oimURL = "t3://"+tempArr[1].split("/")[0]; 	                                                    
			//oimURL ="t3://192.168.1.62:14000";                   
                        oimURL = getVariableData("mcurl").toString();              
                        System.out.println("IMO oimURL is == "+oimURL);                                                    
                                                    
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                                   
                        String authLoginConfig = "java.security.auth.login.config";                                                                   
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                                   
			// set up the environment for making the OIM API invocation                                                                  
			                                                              
			java.util.Hashtable env = new java.util.Hashtable();                                                                   
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                                   
			oimInitialContextFactory);                                                                   
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                                   
			env.put(authLoginConfig, authLoginConfigPath);                                                                   
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                                 
			                                                              
			client.login(oimUserName, oimPassword.toCharArray());                                                                
			java.lang.Object roleXMLString = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestTarget");                                                              
			String roleString = ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                                   
                        System.out.println("Role in NL2 is :- "+roleString);                                        
                        //java.lang.Object requestIDXML = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestId");                                         
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                                               
                        RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                             
  			System.out.println("RequestID in NL2 is == "+RequestID);                                               
 	                userLogin =getVariableData("inputVariable", "payload",                                                         
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                             
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                                     
                        System.out.println("User Login in N2 is:- "+usrLogin);                                           
            
						String manOutcome = "";               
						String mgrRequest = getVariableData("RequestByManager").toString();               
						String requestForOthers = getVariableData("RequestForOthers").toString();	              
						System.out.println("The mgrRequest's request is :- "+mgrRequest);                               
						                              
						if ((mgrRequest.equalsIgnoreCase("YES")) || (requestForOthers.equalsIgnoreCase("YES"))){                              
						                              
							manOutcome = "APPROVE";                              
						}else                
						{						            
 	                managerOutcome = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:systemAttributes/task:outcome");                                              
                        manOutcome =  ((oracle.xml.parser.v2.XMLElement)managerOutcome).getText();            
						}						            
                        System.out.println("In IMO the user's manager managerOutcomestatus is :- "+manOutcome);                                       
                        rEmail = getVariableData("EmailAttribute");                                   
                        System.out.println("The user's manager rEmail:- "+rEmail);                                       
                                                                             
                        if(skipIsoImo.equalsIgnoreCase("TRUE")){                            
                          System.out.println("The skipIsoImo value is :- "+skipIsoImo);                              
                       //   setVariableData("SKIP_ISOIMO", skipIsoImo);                            
                        }else{            
                        Object statexml = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:systemAttributes/task:state");                                     
                        System.out.println("IMO  state is :- "+ ((oracle.xml.parser.v2.XMLElement)statexml).getText());  						            
							System.out.println("The skipIsoImo value in else is :- "+skipIsoImo);                         
						}						                        
                                
						                        
                        String rejectEmail = (String) rEmail;                                     
                        System.out.println("The user's manager rejectEmail:- "+rejectEmail);                                       
                                     
                        setVariableData("commentc","");   
  
               try                                            
                    {                                           
                                                                   
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                     
				com.thortech.xl.dataaccess.tcDataProvider dbProviderA = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                    
                                String queryA = "select  LKV_DECODED from LKV where LKV_ENCODED ='AdminGroupEmail'";                                                     
                                System.out.println("QueryA in NativeLogic is == "+queryA);                                             
                                com.thortech.xl.dataaccess.tcDataSet usersDataSetA = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                    
				usersDataSetA.setQuery(dbProviderA, queryA);                                                     
				usersDataSetA.executeQuery();                                                    
					                                                    
		                                                                
                                int numColumnsA = usersDataSetA.getColumnCount();                                                    
                                int numRecordsA = usersDataSetA.getTotalRowCount();                                             
                                           
                                System.out.println("Column Count:- "+numColumnsA);                                               
                                System.out.println("Record Count:- "+numRecordsA);                                               
                                //iterate through each record                                                    
                             for(int k = 0; k &lt; numRecordsA; k++)                                                    
                                {                                                    
		                usersDataSetA.goToRow(k);                                                    
		                                                     
		                //iterate through each column of a record                                                    
		                for(int m = 0; m &lt; numColumnsA; m++)                                                    
		                {                                                    
		                    String columnName = usersDataSetA.getColumnName(m);                                                    
		                    String value = usersDataSetA.getString(m);                                                    
                                 //setVariableData("AdminGroupEmail",value);       
								//adminGroup	= value;      
							  for (String retval: value.split(",")) {      
								 adminGroup += "'" + retval.toUpperCase() + "',";      
							  }      
								adminGroup =adminGroup.substring(0,adminGroup.length()-1);							        
                                System.out.println("The AdminGroup value is :-"+adminGroup);                                                  
                                                   
		                }                                                    
		            }                                                    
                    }                                           
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                           
                {                                           
                    e3.printStackTrace();                                            
                }						  
  
                                        // Checking Admins Status                                              
                                        try                                                 
                                            {                                                                          
                                                Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                          
                                                com.thortech.xl.dataaccess.tcDataProvider dbProviderAd = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                         
                                                String queryAd = "select usr_email,usr_login from usr where usr_login in ("+adminGroup+") and usr_status ='Active'";                                                
                                                System.out.println("QueryAd in LSD Approval is == "+queryAd);                                                  
                                                com.thortech.xl.dataaccess.tcDataSet usersDataSetAd = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                         
                                                usersDataSetAd.setQuery(dbProviderAd, queryAd);                                                          
                                                usersDataSetAd.executeQuery();                                                         
                                                                                                                 
                                                                                                     
                                                int numColumnsAd = usersDataSetAd.getColumnCount();                                                         
                                                int numRecordsAd = usersDataSetAd.getTotalRowCount();                                                  
                                                                
                                                System.out.println("Column Count:- "+numColumnsAd);                                                    
                                                System.out.println("Record Count:- "+numRecordsAd);                                               
                                                String email = "";                   
												String usr_names = "";                  
												String appNames  = "";												                  
                                                //iterate through each record                  
												if (numRecordsAd > 0)                  
												{                  
													for(int r = 0; r &lt; numRecordsAd; r++)                                                         
													{                                                         
															usersDataSetAd.goToRow(r);                                                         
													                  
														//iterate through each column of a record                                                         
														for(int s = 0; s &lt; numColumnsAd; s++)                                                         
														{                     
															if (s==0)                  
															{                  
																email += usersDataSetAd.getString(s) +",";                  
															}else{                  
															usr_names += usersDataSetAd.getString(s) +",";													                  
															}                  
																				                  
														}                                               
													}                                              
													email = email.substring(0,email.length()-1);                   
												   usr_names =usr_names.substring(0,usr_names.length()-1);                                  
													setVariableData("AdminGroupEmail",usr_names);                              
													System.out.println("New Admin Approvers in LSD Approval:- "+usr_names);													                     
												}else                  
												{                                     
													System.out.println("No AdminGroup Approvers Assigned");													                  
												                  
												}                             
										}                                                
										catch(com.thortech.xl.dataaccess.tcDataSetException e5)                                                
										{                                                
											e5.printStackTrace();                                                 
										}   
										 
 
               try                                                                                  
                    {                                                                                 
                                                                                                         
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                                           
				com.thortech.xl.dataaccess.tcDataProvider dbProviderP = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                                          
                                String queryP =  "SELECT  e.LSD_ROLE FROM usr u ,EPA_SECURITY_OFFICERS e where u.usr_login ='"+usrLogin+"'" + " and u.usr_status= 'Active' AND e.program = substr(u.usr_udf_department,1,DECODE(instr(u.usr_udf_department,'-',1,1),0,length(u.usr_udf_department) + 1,instr(u.usr_udf_department,'-',1,1)) - 1)";                                                                                           
                                System.out.println("QueryP in NativeLogic is == "+queryP);                                                                                   
                                com.thortech.xl.dataaccess.tcDataSet usersDataSetP = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                                          
				usersDataSetP.setQuery(dbProviderP, queryP);                                                                                           
				usersDataSetP.executeQuery();                                                                                          
					                                                                                          
		                                                                                                      
                                int numColumnsP = usersDataSetP.getColumnCount();                                                                                          
                                int numRecordsP = usersDataSetP.getTotalRowCount();                                                                                   
                                                                                 
                                System.out.println("Column Count:- "+numColumnsP);                                                                                     
                                System.out.println("Record Count:- "+numRecordsP);                                                                                     
                                //iterate through each record                                                                                          
                             for(int k = 0; k &lt; numRecordsP; k++)                                                                                          
                                {                                                                                          
		                usersDataSetP.goToRow(k);                                                                                          
		                                                                                           
		                //iterate through each column of a record                                                                                          
		                for(int m = 0; m &lt; numColumnsP; m++)                                                                                          
		                {                                                                                          
		                    String columnName = usersDataSetP.getColumnName(m);                                                                                          
		                    String value = usersDataSetP.getString(m);                                                                                          
								//setVariableData("User_Type",value);              
								roleName = value;								              
                                System.out.println("The role name is :-"+value);                                                                                          
                                                                                         
		                }                                                                                          
		            }                                                                                          
                    }                                                                                 
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                                                 
                {                                                                                 
                    e3.printStackTrace();                                                                                  
                }  
  
               try                                                                                  
                    {                                                                                 
                                                                                                         
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                                           
				com.thortech.xl.dataaccess.tcDataProvider dbProviderNA = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                                          
                                //String queryNA =  "SELECT  e.LSD_ROLE FROM usr u ,EPA_SECURITY_OFFICERS e where u.usr_login ='"+usrLogin+"'" + " and u.usr_status= 'Active' AND e.program = substr(u.usr_udf_department,1,DECODE(instr(u.usr_udf_department,'-',1,1),0,length(u.usr_udf_department) + 1,instr(u.usr_udf_department,'-',1,1)) - 1)";                                                                                           
								  String queryNA = 	"select usr.usr_login " +  
													" from usg usg " +  
													" left outer join usr usr on (usg.usr_key = usr.usr_key) " +  
													" left outer join ugp ugp on (ugp.ugp_key = usg.ugp_key) " +  
													" where upper(ugp_name) in (upper('"+roleName+"')) " +  
													" and usr.usr_status= 'Active'";   
                                System.out.println("QueryNA in NativeLogic is == "+queryNA);                                                                                   
                                com.thortech.xl.dataaccess.tcDataSet usersDataSetNA = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                                          
				usersDataSetNA.setQuery(dbProviderNA, queryNA);                                                                                           
				usersDataSetNA.executeQuery();                                                                                          
					                                                                                          
		                                                                                                      
                                int numColumnsNA = usersDataSetNA.getColumnCount();                                                                                          
                                int numRecordsNA = usersDataSetNA.getTotalRowCount();                                                                                   
                                                                                 
                                System.out.println("Column Count:- "+numColumnsNA);                                                                                     
                                System.out.println("Record Count:- "+numRecordsNA);                                                                                     
                                //iterate through each record                                                                                          
                             for(int k = 0; k &lt; numRecordsNA; k++)                                                                                          
                                {                                                                                          
		                usersDataSetNA.goToRow(k);  
						String columnName = "";	  
						String value = "";																					  
		                //iterate through each column of a record                                                                                          
		                for(int m = 0; m &lt; numColumnsNA; m++)                                                                                          
		                {                                                                                          
		                    columnName = usersDataSetNA.getColumnName(m);                                                                                          
		                      value = usersDataSetNA.getString(m);                                                                                          
								//setVariableData("User_Type",value);              
								roleUserIds += "'" + value + "',";								              
                                                                                                                          
                                                                                         
		                }   
  
		            }  
							roleUserIds = roleUserIds.substring(0,roleUserIds.length()-1);  
							System.out.println("The roleUserIds are :-"+roleUserIds);					  
                    }                                                                                 
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                                                 
                {                                                                                 
                    e3.printStackTrace();                                                                                  
                } 
  
						  
                                     
                        if (!manOutcome.equalsIgnoreCase("REJECT")) {                                           
                                        Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                  
                                        com.thortech.xl.dataaccess.tcDataProvider dbProvider = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                 
                                     //   String query = "SELECT  e.PRIMARY_IMO_LOGINID FROM usr u ,EPA_SECURITY_OFFICERS e where e.program = //SUBSTR(u.usr_udf_department,1,instr(u.usr_udf_department,'-',1,1)-1) and u.usr_login ='"+usrLogin+"'" +"and //u.usr_status= 'Active'";                
										String query = "SELECT  e.PRIMARY_LSD_LOGINID, u.usr_udf_department FROM usr u ,EPA_SECURITY_OFFICERS e where u.usr_login ='"+usrLogin+"'" + " and u.usr_status= 'Active' AND e.program = substr(u.usr_udf_department,1,DECODE(instr(u.usr_udf_department,'-',1,1),0,length(u.usr_udf_department) + 1,instr(u.usr_udf_department,'-',1,1)) - 1)";                
									                 
                                        System.out.println("query in NL2 is == "+query);                                                     
                                        com.thortech.xl.dataaccess.tcDataSet usersDataSet = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                 
                                        usersDataSet.setQuery(dbProvider, query);                                                                  
                                        usersDataSet.executeQuery();                                                                 
                                                                                                             
                                        int numColumns = usersDataSet.getColumnCount();                                                                 
                                        int numRecords = usersDataSet.getTotalRowCount();                                                                 
                                                                           
                                        System.out.println("Column Count:- "+numColumns);                                                           
                                        System.out.println("Record Count:- "+numRecords);                                                    
                                                                    
                                        String columnName = "";                                                    
                                        String value = "";                   
										String  value1 = "";               
										String	usrDept = "";               
										               
                                        //iterate through each record                                                                 
                                        for(int i = 0; i &lt; numRecords; i++)                                                                 
                                        {                                                                 
                                                usersDataSet.goToRow(i);                                                                 
                                                //iterate through each column of a record                                                                 
                                                for(int j = 0; j &lt; numColumns; j++)                                                                 
                                                {                                                                 
                                                    columnName = usersDataSet.getColumnName(j);                                                                 
                                                    value = usersDataSet.getString(j);                   
													if (value != "" )                   
													{													                   
                                                    value1 = usersDataSet.getString(j) + "," +getVariableData("AdminGroupEmail");                
													usrDept = usersDataSet.getString(j+1);               
													setVariableData("USR_DEPT",usrDept);   													               
													System.out.println("All IM Approvers:- "+value1+ " for "+usrDept);              
													break;               
													}else                    
													{                   
                                                    value1 = getVariableData("AdminGroupEmail").toString();                            
                                                    setVariableData("USR_DEPT","TRUE");                                                  
                                                    System.out.println("All IMO Approvers :- "+value1);                         
                                                    break;               
													}													                   
                                                }                                                                 
                                        }                                                                 
                                                                   
                                        boolean commaVal = value.contains(",");                                             
                                        String [] arrOfStr = value.split(",");                                             
                                        String userIDS = "";                                            
                                        if (commaVal) {                                             
                                            for (String a : arrOfStr){                                             
                                                System.out.println("Users.User ID: "+a);                                             
                                                userIDS += "'"+a+"',";                                            
                                            }                                             
                                            userIDS = userIDS.substring(0,userIDS.length()-1);                                            
                                        }else if(null!= value){                                                
                                            System.out.println("Users.User ID: "+value);                                              
                                            userIDS = "'"+value+"'";                                              
                                        } else {                    
											System.out.println("IMO Manager missing or Disabled");                       
										} 
 
										if(null!= userIDS) 
										{  
											userIDS = userIDS + "," + roleUserIds;  
											System.out.println("Approvers including Role approvers "+userIDS); 										 
										}else{ 
											userIDS = roleUserIds;  
											System.out.println("Approvers including Role approvers "+userIDS); 										 
										}										 
                                                            
                                        // For sending emails                                           
                                        try                                               
                                            {                                                                        
                                                Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                        
                                                com.thortech.xl.dataaccess.tcDataProvider dbProvider2 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                       
                                                String query2 = "select usr_email,usr_login from usr where usr_login in ("+userIDS+") and usr_status ='Active'";                                              
                                                System.out.println("Query2 in NL2 is == "+query2);                                                
                                                com.thortech.xl.dataaccess.tcDataSet usersDataSet2 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                       
                                                usersDataSet2.setQuery(dbProvider2, query2);                                                        
                                                usersDataSet2.executeQuery();                                                       
                                                                                                               
                                                                                                   
                                                int numColumns2 = usersDataSet2.getColumnCount();                                                       
                                                int numRecords2 = usersDataSet2.getTotalRowCount();                                                
                                                              
                                                System.out.println("Column Count:- "+numColumns2);                                                  
                                                System.out.println("Record Count:- "+numRecords2);                                             
                                                String email = "";                  
												String usr_names = "";                 
												String appNames  = "";                 
                                                //iterate through each record                  
												if (numRecords2 > 0)                  
												{												                  
														for(int r = 0; r &lt; numRecords2; r++)                                                       
														{                                                       
															usersDataSet2.goToRow(r);                                                       
												                    
														//iterate through each column of a record                                                       
														for(int s = 0; s &lt; numColumns2; s++)                                                       
														{                                                                 
															if (s==0)                  
															{                  
																email += usersDataSet2.getString(s) +",";                  
															}else{                  
															usr_names += usersDataSet2.getString(s) +",";													                  
															}                                                                
														}                                             
													}                                            
														email = email.substring(0,email.length()-1);                  
												   usr_names =usr_names.substring(0,usr_names.length()-1);                  
													appNames = usr_names + "," +getVariableData("AdminGroupEmail");                   
													setVariableData("commentc",appNames);                              
													System.out.println("Actual LSD Approvers:- "+appNames);	                 
                 
												}else                 
												{                 
													appNames = getVariableData("AdminGroupEmail").toString();                   
													setVariableData("commentc",appNames);                              
													System.out.println("Only AdminGroup Approvers Assigned:- "+appNames);													                 
                 
												}                 
														if (!rejectEmail.equalsIgnoreCase("REJECTED@aa-epa.gov")&amp;&amp; email != "")                 
														{                 
														setVariableData("EmailAttribute",email);                                            
														System.out.println("Email  sent to  :-"+email);                 
														}else                 
														{                 
															System.out.println("LDS Approver is Null or disabled, Email sent to wam_support");                 
														}                 
                  
                                    }                                              
                                        catch(com.thortech.xl.dataaccess.tcDataSetException e4)                                              
                                    {                                              
                                        e4.printStackTrace();                                               
                                    }                                                                              
                           }else                                          
                            {                                          
                                                                             
                try {                                          
                                                Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                        
                                                com.thortech.xl.dataaccess.tcDataProvider dbProvider3 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                       
                                               // String query2 = "select usr_email from usr where usr_login in ("+userIDS+")";                                             
                                                String query3 = "update REQUEST_APPROVALS set approval_status = 'approval failure' where request_key = '"+RequestID+"'";                                          
                                                System.out.println("ISO Query23 in NL1 is == "+query3);                                                
                                                com.thortech.xl.dataaccess.tcDataSet usersDataSet3 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                       
                                                usersDataSet3.setQuery(dbProvider3, query3);                                                        
                                                //usersDataSet3.executeQuery();                                            
            }catch (java.lang.Exception e6){                                                               
                    e6.printStackTrace();                                                               
            }                                          
                                          
                            }         
       /**        try                                                           
                    {                                                          
                                                                                  
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                    
				com.thortech.xl.dataaccess.tcDataProvider svcProvider = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                   
                                //String svcQuery = "select  LKV_DECODED from LKV where LKV_ENCODED ='SupportEmail'";             
												String svcQuery =  "select RBED_ENTITY_FIELD_NAME, RBED_ENTITY_FIELD_VALUE from REQUEST_BENEFICIARY_ENTITYDATA where rbed_rbe_key in (select rbe_key from REQUEST_BENEFICIARY_ENTITIES where rbe_request_key='" + RequestID + "')";								            
                                System.out.println("svcQuery in NativeLogic is == "+svcQuery);                             
								            
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                   
				usersDataSet1.setQuery(svcProvider, svcQuery);                                                                    
				usersDataSet1.executeQuery();                                                                   
					                                                                   
		                                                                               
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                   
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                            
                                                          
                                System.out.println("Column Count:- "+numColumns1);                                                              
                                System.out.println("Record Count:- "+numRecords1);                                                              
                                //iterate through each record              
                                String userSvc = "";                
                             for(int k = 0; k &lt; numRecords1; k++)                                                                    
                                {                                                                   
		                usersDataSet1.goToRow(k);                                                                   
                                                  
		                //iterate through each column of a record                                                                   
		                for(int m = 0; m &lt; numColumns1-1; m++)                                                                  
		                {                                                                  
		                    String columnName = usersDataSet1.getString(0);                                                                  
		                    String value = usersDataSet1.getString(1);          
                                              
                                    if (!(columnName.equals("AD Server") || columnName.equals("#endDate") || columnName.equals("#startDate")))           
                                  {          
									 userSvc += columnName +":-- " + value + "&lt;BR>";         
                                   }                                                                                                                                                                      
		                }                
						            
		            }            
							userSvc = userSvc.substring(0,userSvc.length()-1);             
							setVariableData("ServiceDetails",userSvc);             
                            System.out.println("The Service request details :-"+userSvc); 							            
                    }                                                          
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                          
                {                                                          
                    e3.printStackTrace();                                                           
                }	*/						         
                                                                            
            } catch (java.lang.Exception e){                                                                 
                e.printStackTrace();                                                                 
            }
        </bpelx:exec><scope name="ApprovalTask_ISO" wf:key="ApprovalTask_1_globalVariable" id="BpScp13">
      <bpelx:annotation>
         <bpelx:pattern patternName="bpelx:workflow"/>
      </bpelx:annotation>
      <variables>
         <variable name="reinitiateTaskInput" messageType="ns2:reinitiateTaskMessage"/>
         <variable name="reinitiateTaskResponseMessage" messageType="ns2:reinitiateTaskResponseMessage"/>
      </variables>
      <sequence id="BpSeq38">
         <switch name="Switch7" id="BpSwt10">
            <case condition="bpws:getVariableData(&quot;RequestByManager&quot;) = 'YES'">
               <bpelx:annotation>
                  <bpelx:general>
                     <bpelx:property name="userLabel">
                        Manager Request
                     </bpelx:property>
                  </bpelx:general>
               </bpelx:annotation>
               <bpelx:exec name="SKIP_1SO" version="1.5" id="BxExe14">
                  System.out.println("Skipped ISO to Disable account: ");
               </bpelx:exec>
            </case>
            <case condition="bpws:getVariableData(&quot;ADSV_ACCOUNT&quot;) = 'DISABLED'">
               <bpelx:annotation>
                  <bpelx:general>
                     <bpelx:property name="userLabel">
                        User Disabled
                     </bpelx:property>
                  </bpelx:general>
               </bpelx:annotation>
               <sequence name="Sequence8" id="BpSeq39">
                  <bpelx:exec name="SKIP_1SO" version="1.5" id="BxExe15">
                     System.out.println("Skipped ISO to enable account: ");
                  </bpelx:exec>
               </sequence>
            </case>
            <otherwise>
               <sequence name="Sequence19" id="BpSeq40">
                  <sequence name="Sequence17" id="BpSeq41">
                     <scope name="Pmompt_ISO" id="BpScp14">
                        <bpelx:annotation>
                           <bpelx:pattern patternName="bpelx:email"/>
                        </bpelx:annotation>
                        <variables>
                           <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
                           <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
                           <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
                        </variables>
                        <sequence name="Sequence2" id="BpSeq42">
                           <switch name="Switch11" id="BpSwt11">
                              <case condition=" bpws:getVariableData(&quot;RequestForOthers&quot;) = 'YES'">
                                 <bpelx:annotation>
                                    <bpelx:general>
                                       <bpelx:property name="userLabel">
                                          Request For Others
                                       </bpelx:property>
                                    </bpelx:general>
                                 </bpelx:annotation>
                                 <sequence name="Sequence22" id="BpSeq43">
                                    <sequence name="Sequence20" id="BpSeq44">
                                       <assign id="BpAss31">
                                          <copy>
                                             <from expression="string('approved')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                             <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
                                          </copy>
                                          <copy>
                                             <from expression="ora:getConversationId()"/>
                                             <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
                                          </copy>
                                          <copy>
                                             <from expression="string('approved')"/>
                                             <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
                                          </copy>
                                       </assign>
                                       <assign name="EmailParamsAssign" id="BpAss32">
                                          <copy>
                                             <from expression="string('Default')"/>
                                             <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                          </copy>
                                          <copy>
                                             <from expression="string('')"/>
                                             <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                          </copy>
                                          <copy>
                                             <from expression="string('')"/>
                                             <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                          </copy>
                                          <copy>
                                             <from expression="string('')"/>
                                             <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                          </copy>
                                          <copy>
                                             <from expression="concat('A new ', bpws:getVariableData('groupName'), '  request submitted  for  ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                             <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                          </copy>
                                          <copy>
                                             <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                             <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                          </copy>
                                          <copy>
                                             <from expression="concat(' &lt;BR> A new request for ',bpws:getVariableData('groupName'),'  is awaiting your approval.  &lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to Approve or Reject the request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                             <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                          </copy>
                                          <copy>
                                             <from expression="string('text/html; charset=UTF-8')"/>
                                             <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                          </copy>
                                       </assign>
                                       <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService2" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv19"/>
                                    </sequence>
                                 </sequence>
                              </case>
                              <otherwise>
                                 <sequence name="Sequence21" id="BpSeq45">
                                    <switch name="Switch15" id="BpSwt12">
                                       <case condition="bpws:getVariableData(&quot;USR_DEPT&quot;) = 'TRUE'">
                                          <bpelx:annotation>
                                             <bpelx:general>
                                                <bpelx:property name="userLabel">
                                                   No ISO
                                                </bpelx:property>
                                             </bpelx:general>
                                          </bpelx:annotation>
                                          <assign name="EmailParamsAssign" id="BpAss33">
                                             <copy>
                                                <from expression="string('Default')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                             </copy>
                                             <copy>
                                                <from expression="string('')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                             </copy>
                                             <copy>
                                                <from expression="string('')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                             </copy>
                                             <copy>
                                                <from expression="string('')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                             </copy>
                                             <copy>
                                                <from expression="concat('A new ', bpws:getVariableData('groupName'), '  request submitted  has no ISO Approver ')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                             </copy>
                                             <copy>
                                                <from expression="concat(bpws:getVariableData('SupportEmail'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                             </copy>
                                             <copy>
                                                <from expression="concat(' &lt;BR> A new request for ',bpws:getVariableData('groupName'),'  has no ISO approver.  &lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string('  &lt;BR>&lt;BR> '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                             </copy>
                                             <copy>
                                                <from expression="string('text/html; charset=UTF-8')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                             </copy>
                                          </assign>
                                       </case>
                                       <otherwise>
                                          <assign name="EmailParamsAssign" id="BpAss34">
                                                                <copy>
                                                                    <from expression="string('Default')"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="string('')"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="string('')"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="string('')"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="concat('A new ', bpws:getVariableData('groupName'), '  request submitted  for  ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), ' has been received(user belongs to ',bpws:getVariableData('DEPT_PREFIX'),' department) ')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="concat(' &lt;BR> A new request for a ',bpws:getVariableData('groupName'),'  is awaiting your approval.  &lt;BR>&lt;BR>&lt;B>PLEASE DO NOT APPROVE THIS REQUEST UNTIL YOU HAVE VERIFIED THAT THE USER IS CONNECTED TO THE EPA',&quot;'&quot;,'S NETWORK.  &lt;/B>&lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '),'&lt;BR>&lt;B>Org: &lt;/B>', bpws:getVariableData('USR_DEPT'), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to Approve or Reject the request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="string('text/html; charset=UTF-8')"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                                                </copy>
                                                            </assign>
                                       </otherwise>
                                    </switch>
                                    <assign name="EmailParamsAssign" id="BpAss35">
                                                        <copy>
                                                            <from expression="string('Default')"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="string('')"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="string('')"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="string('')"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="concat('A new ', bpws:getVariableData('groupName'), '  request submitted  for  ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), ' has been received(user belongs to ',bpws:getVariableData('DEPT_PREFIX'),' department) ')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="concat(' &lt;BR> A new request for a ',bpws:getVariableData('groupName'),'  is awaiting your approval.  &lt;BR>&lt;BR>&lt;B>PLEASE DO NOT APPROVE THIS REQUEST UNTIL YOU HAVE VERIFIED THAT THE USER IS CONNECTED TO THE EPA',&quot;'&quot;,'S NETWORK.  &lt;/B>&lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '),'&lt;BR>&lt;B>Org: &lt;/B>', bpws:getVariableData('USR_DEPT'), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to Approve or Reject the request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="string('text/html; charset=UTF-8')"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                                        </copy>
                                                    </assign>
                                    <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService2" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv20"/>
                                    <assign name="ApprovalTask_2_AssignTaskAttributes" id="BpAss36">
                                       <copy>
                                          <from variable="ApprovalTask_1_globalVariable" part="payload"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task"/>
                                       </copy>
                                       <copy>
                                          <from expression="number(3)" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:priority"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestID"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:RequestID"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestModel"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:RequestModel"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestTarget"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:RequestTarget"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:url"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:url"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/ns4:RequesterDetails"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:BeneficiaryDetails"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/ns4:BeneficiaryDetails"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:ObjectDetails"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/ns4:ObjectDetails"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:OtherDetails"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/ns4:OtherDetails"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails/ns4:DisplayName"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:RequesterDisplayName"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:BeneficiaryDisplayName"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails/ns4:Login"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:Requester"/>
                                       </copy>
                                       <copy bpelx:ignoreMissingFromData="yes" bpelx:insertMissingToData="yes">
                                          <from variable="commentc"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:Parameter1"/>
                                       </copy>
                                       <copy bpelx:insertMissingToData="yes" bpelx:ignoreMissingFromData="yes">
                                          <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="SKIP_ISOIMO"/>
                                          <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:Parameter3"/>
                                       </copy>
                                    </assign>
                                    <invoke name="reinitiateTask_ApprovalTask_2" partnerLink="ApprovalTask.TaskService_1" operation="reinitiateTask" portType="ns2:TaskService" inputVariable="reinitiateTaskInput" outputVariable="reinitiateTaskResponseMessage" id="BpInv21"/>
                                    <receive name="receiveCompletedTask_ApprovalTask_2" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv10"/>
                                 </sequence>
                              </otherwise>
                           </switch>
                        </sequence>
                     </scope>
                  </sequence>
               </sequence>
            </otherwise>
         </switch>
      </sequence>
   </scope><switch name="taskSwitch" id="BpSwt13">
      <case condition="bpws:getVariableData(&quot;RequestByManager&quot;) = 'YES'">
         <bpelx:annotation>
            <bpelx:general>
               <bpelx:property name="userLabel">
                  Manager Request
               </bpelx:property>
            </bpelx:general>
         </bpelx:annotation>
         <empty name="Empty1" id="BpEmp9"/>
      </case>
      <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:state') = 'WITHDRAWN'">
         <bpelx:annotation>
            <bpelx:general>
               <bpelx:property name="userLabel">
                  Task is withdrawn
               </bpelx:property>
            </bpelx:general>
         </bpelx:annotation>
         <sequence id="BpSeq46">
            <assign id="BpAss37">
               <copy>
                  <from expression="string('rejected')"/>
                  <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
               </copy>
               <copy>
                  <from expression="ora:getConversationId()"/>
                  <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
               </copy>
               <copy>
                  <from expression="string('rejected')"/>
                  <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
               </copy>
            </assign>
            <scope name="Benificiary_Withdrawn-22" id="BpScp15">
               <bpelx:annotation>
                  <bpelx:pattern patternName="bpelx:email"/>
               </bpelx:annotation>
               <variables>
                  <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
                  <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
                  <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
               </variables>
               <sequence name="Sequence5" id="BpSeq47">
                  <sequence name="Sequence1" id="BpSeq48">
                     <assign name="EmailParamsAssign" id="BpAss38">
                                    <copy>
                                        <from expression="string('Default')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(bpws:getVariableData('groupName'), ' request has been withdrawn')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat( bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), '  ', string(' has  withdrawn '), '   ', bpws:getVariableData('groupName'), '  request. &lt;BR>&lt;BR>Request details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('text/html; charset=UTF-8')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                    </copy>
                                </assign>
                     <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService1" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv22"/>
                     <receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv11"/>
                  </sequence>
                  <bpelx:exec name="WD-2" version="1.5" id="BxExe16">
                     setVariableData("EmailAttribute","REJECTED@aa-epa.gov");    
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");  
setVariableData("AdminGroupEmail","");
                  </bpelx:exec>
               </sequence>
            </scope>
         </sequence>
      </case>
      <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:outcome') = 'REJECT'">
         <bpelx:annotation>
            <bpelx:pattern>Task outcome is REJECT</bpelx:pattern>
            <bpelx:general>
               <bpelx:property name="userLabel">Task outcome is REJECT</bpelx:property>
            </bpelx:general>
         </bpelx:annotation>
         <sequence name="Sequence6" id="BpSeq49">
            <sequence id="BpSeq50">
               <assign id="BpAss39">
                  <copy>
                     <from expression="string('rejected')"/>
                     <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
                  </copy>
                  <copy>
                     <from expression="ora:getConversationId()"/>
                     <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
                  </copy>
                  <copy>
                     <from expression="string('rejected')"/>
                     <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
                  </copy>
               </assign>
               <scope name="Prompt_Benificiary22" id="BpScp16">
                  <bpelx:annotation>
                     <bpelx:pattern patternName="bpelx:email"/>
                  </bpelx:annotation>
                  <variables>
                     <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
                     <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
                     <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
                  </variables>
                  <compensationHandler id="BpCoH16"/>
                  <sequence name="Sequence1" id="BpSeq51">
                     <assign name="EmailParamsAssign" id="BpAss40">
                        <copy>
                           <from expression="string('Default')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                        </copy>
                        <copy>
                           <from expression="string('')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                        </copy>
                        <copy>
                           <from expression="string('')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                        </copy>
                        <copy>
                           <from expression="string('')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                        </copy>
                        <copy>
                           <from expression="concat('Your ' , bpws:getVariableData('groupName'),'  request has been rejected')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                        </copy>
                        <copy>
                           <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'),', ', string('   '), '&lt;BR> &lt;BR> Your request for ', bpws:getVariableData('groupName'),'  has been rejected. Request details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Manager Comment: &lt;/B>', string('  '), bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:userComment/task:comment'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to track your request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                        </copy>
                        <copy>
                           <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="userEmail"/>
                           <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                        </copy>
                        <copy>
                           <from expression="string('text/html; charset=UTF-8')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                        </copy>
                     </assign><bpelx:exec name="Reject_LSD" version="1.5" id="BxExe17">setVariableData("EmailAttribute","REJECTED@aa-epa.gov");    
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");   
setVariableData("AdminGroupEmail","");  
setVariableData("SKIP_ISOIMO","FALSE");
   String skipIsoImo = (String) getVariableData("SKIP_ISOIMO");        
String mgrRequest = (String) getVariableData("RequestByManager");                  
System.out.println("The Last java Block For Request Reject by LSD:- ");                  
                  
                                        
String usrAccStatus = (String) getVariableData("ADSV_ACCOUNT");       
System.out.println("The usrAccStatus value in ISO is:- "+usrAccStatus);                                         
                               
                                      
try {                   
   
// Set webURL    
    
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                     
            String hostName = localMachine.getHostName().toString();        
            String webUrl = "http://" +hostName +":15000/";       
            setVariableData("webserUrl",webUrl);       
            System.out.println("hostName in NL1 : " + hostName);      
            System.out.println("webUrl of NL1 : " + webUrl);      
   
            String  envPwd = (String) getVariableData("EnvPwd");        
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                   
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key ="",DbConnectionString="", DbUserId=""; // Staging                 
         
        
                        java.lang.Object userLogin = "";                                        
                        java.lang.Object isoManager = "";                                       
                        java.lang.Object managerOutcome = "";                                 
                        java.lang.Object rEmail = "";                           
                       // java.lang.Object managerComment = "";                         
                		                                  
                                                 
                                              
            Object obj = getVariableData("oimurl");                                                                                            
			String tempStr = obj.toString();                                   
			String[] tempArr = tempStr.split("//");                                   
			//oimURL = "t3://"+tempArr[1].split("/")[0]; 						                                  
			//oimURL ="t3://192.168.1.62:14000";     
                        oimURL = getVariableData("mcurl").toString();      
			System.out.println("oimURL is == "+oimURL);                                                 
                                                 
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                           
                        String authLoginConfig = "java.security.auth.login.config";                                                           
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                           
			// set up the environment for making the OIM API invocation                                                          
			                                                      
			java.util.Hashtable env = new java.util.Hashtable();                                                           
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                           
			oimInitialContextFactory);                                                           
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                           
			env.put(authLoginConfig, authLoginConfigPath);                                                           
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                         
			                                                      
			client.login(oimUserName, oimPassword.toCharArray());                                                        
			java.lang.Object roleXMLString = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestTarget");                                                      
			String roleString = ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                           
                        System.out.println("Role in NL1 is :- "+roleString);                                  
                        System.out.println("Before getting the request ID");                                   
                        //java.lang.Object requestIDXML = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestId");                                   
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                  
                        String RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                     
  			System.out.println("RequestID in NL1 is == "+RequestID);                                          
 	                userLogin =getVariableData("inputVariable", "payload",                                                    
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                        
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                      
                        System.out.println("User Login in N1 is:- "+usrLogin);                                     
                        System.out.println("Before user's manager managerOutcome1:- ");                   
                         
 	             //   managerComment = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:userComment/task:comment");                                        
                     //   String manComment =  ((oracle.xml.parser.v2.XMLElement)managerComment).getText();                           
                    String manOutcome = "";     
                  if ((mgrRequest.equalsIgnoreCase("YES"))) // || (usrAccStatus.equalsIgnoreCase("DISABLED"))) -- commented out on 06/36/2019      
				     {       
						manOutcome = "APPROVE";       
                        System.out.println("The request for others is made by manager and manOutcome is set to :- "+manOutcome);               
						              
					 }else {       
 	                managerOutcome = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:systemAttributes/task:outcome");                                        
                        manOutcome =  ((oracle.xml.parser.v2.XMLElement)managerOutcome).getText(); 					        
                        System.out.println("The user's manager managerOutcome2:- "+manOutcome);  					        
					 }       
						              
						               try                              
                    {                             
                                                     
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                       
				com.thortech.xl.dataaccess.tcDataProvider dbProvider1 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                      
                                String query1 = "select  LKV_DECODED from LKV where LKV_ENCODED ='DBPassword'";                                       
                                System.out.println("Query1 in JavaLogic is == "+query1);                               
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                      
				usersDataSet1.setQuery(dbProvider1, query1);                                       
				usersDataSet1.executeQuery();                                      
					                                      
		                                                  
                                int numColumns1 = usersDataSet1.getColumnCount();                                      
                                int numRecords1 = usersDataSet1.getTotalRowCount();                               
                             
                                System.out.println("Column Count:- "+numColumns1);                                 
                                System.out.println("Record Count:- "+numRecords1);                                 
                                //iterate through each record                                      
                             for(int k = 0; k &lt; numRecords1; k++)                                      
                                {                                      
		                usersDataSet1.goToRow(k);                                      
		                                       
		                //iterate through each column of a record                                      
		                for(int m = 0; m &lt; numColumns1; m++)                                      
		                {                                      
		                    String columnName = usersDataSet1.getColumnName(m);                                      
		                    DbPassword = usersDataSet1.getString(m);                                      
                            System.out.println("The DbPassword value is :-"+DbPassword);                                      
                                     
		                }                                      
		            }                                      
                    }                             
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                             
                {                             
                    e3.printStackTrace();                              
                }                    
					              
              
					try                              
                    {                             
                                                     
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                       
				com.thortech.xl.dataaccess.tcDataProvider dbProvider2 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                      
                                String query2 = "select  LKV_DECODED from LKV where LKV_ENCODED ='DBConnectionString'";                                       
                                System.out.println("Query2 in JavaLogic is == "+query2);                               
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet2 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                      
				usersDataSet2.setQuery(dbProvider2, query2);                                       
				usersDataSet2.executeQuery();                                      
					                                      
		                                                  
                                int numColumns1 = usersDataSet2.getColumnCount();                                      
                                int numRecords1 = usersDataSet2.getTotalRowCount();                               
                             
                                System.out.println("Column Count:- "+numColumns1);                                 
                                System.out.println("Record Count:- "+numRecords1);                                 
                                //iterate through each record                                      
                             for(int k = 0; k &lt; numRecords1; k++)                                      
                                {                                      
		                usersDataSet2.goToRow(k);                                      
		                                       
		                //iterate through each column of a record                                      
		                for(int m = 0; m &lt; numColumns1; m++)                                      
		                {                                      
		                    String columnName = usersDataSet2.getColumnName(m);                                      
		                    DbConnectionString = usersDataSet2.getString(m);                                      
                            System.out.println("The DbConnectionString value is :-"+DbConnectionString);                                      
                                     
		                }                                      
		            }                                      
                    }                             
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                             
                {                             
                    e3.printStackTrace();                              
                }                    
              
				              
				try                              
                    {                             
                                                     
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                       
				com.thortech.xl.dataaccess.tcDataProvider dbProvider3 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                      
                                String query3 = "select  LKV_DECODED from LKV where LKV_ENCODED ='DBUserID'";                                       
                                System.out.println("Query3 in JavaLogic is == "+query3);                               
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet3 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                      
				usersDataSet3.setQuery(dbProvider3, query3);                                       
				usersDataSet3.executeQuery();                                      
					                                      
		                                                  
                                int numColumns1 = usersDataSet3.getColumnCount();                                      
                                int numRecords1 = usersDataSet3.getTotalRowCount();                               
                             
                                System.out.println("Column Count:- "+numColumns1);                                 
                                System.out.println("Record Count:- "+numRecords1);                                 
                                //iterate through each record                                      
                             for(int k = 0; k &lt; numRecords1; k++)                                      
                                {                                      
		                usersDataSet3.goToRow(k);                                      
		                                       
		                //iterate through each column of a record                                      
		                for(int m = 0; m &lt; numColumns1; m++)                                      
		                {                                      
		                    String columnName = usersDataSet3.getColumnName(m);                                      
		                    DbUserId =  usersDataSet3.getString(m);                                      
							System.out.println("The DbUserId value is :-"+DbUserId);                                      
                                     
		                }                                      
		            }                                      
                    }                             
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                             
                {                             
                    e3.printStackTrace();                              
                }                    
				              
			//if (skipIsoImo.equalsIgnoreCase("TRUE")) { 			              
           
				String query3 = "";               
				  
				query3 = "update REQUEST set request_status = 'Request Rejected' where request_key = '"+RequestID+"'";  				  
				System.out.println("The query3  is :-"+query3);           
				           
				           
				java.sql.Connection  con = null;                         
				java.sql.Statement stmt = null;              
				              
              
                   
				try {                   
					//Connecting to staging database and trying to execute update statement					                      
					Class.forName("oracle.jdbc.OracleDriver");                            
					con=java.sql.DriverManager.getConnection(DbConnectionString,DbUserId,DbPassword);              
					stmt=con.createStatement();   
					System.out.println("Before database update");   
					//query3 = "update REQUEST set request_status = 'Request Completed' where request_key = '"+RequestID+"'";  					              
					stmt.executeUpdate(query3);   
					System.out.println("Completed database update of query :- "+query3);   
				}                          
				catch(Exception e){					                      
					System.out.println("Exception on trying to update database");                      
					System.out.println(e);                      
					e.printStackTrace();                       
					System.out.println("--------------------------------------");                      
                   
				}                            
				finally {                      
					stmt.close();                         
					con.close();                         
				}               
					              
					              
					              
					              
					              
						              
			//}			              
						              
	}catch (java.lang.Exception e){                                                  
                    e.printStackTrace();                                                  
            }</bpelx:exec><invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService1" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv23"/><receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv12"/></sequence>
               </scope>
            </sequence>
            <bpelx:exec name="RJ-2" version="1.5" id="BxExe18">
               setVariableData("EmailAttribute","REJECTED@aa-epa.gov");    
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");   
setVariableData("AdminGroupEmail","");  
setVariableData("SKIP_ISOIMO","FALSE");
            </bpelx:exec>
         </sequence>
      </case>
      <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:outcome') = 'APPROVE'">
         <bpelx:annotation>
            <bpelx:pattern>Task outcome is APPROVE</bpelx:pattern>
            <bpelx:general>
               <bpelx:property name="userLabel">Task outcome is APPROVE</bpelx:property>
            </bpelx:general>
         </bpelx:annotation>
         <sequence id="BpSeq52">
            <assign id="BpAss41">
               <copy>
                  <from expression="string('approved')"/>
                  <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
               </copy>
               <copy>
                  <from expression="ora:getConversationId()"/>
                  <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
               </copy>
               <copy>
                  <from expression="string('approved')"/>
                  <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
               </copy>
            </assign>
                    <bpelx:exec name="Call-Process-Task" version="1.5" id="BxExe19">
                        System.out.println("Calling AD Process Task");           
String  processTask = "NO";                                                                
                                                                                                                                   
try {                 
            
            
// Set webURL            
            
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                             
            String hostName = localMachine.getHostName().toString();                
          //  String webUrl = "http://" +hostName +":15000/";               
          //  setVariableData("webserUrl",webUrl);               
          //  System.out.println("hostName in NL1 : " + hostName);              
          //  System.out.println("webUrl of NL1 : " + webUrl);              
            
            String  envPwd = (String) getVariableData("EnvPwd");       			           
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                                      
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key ="", procDefTaskKey = "", usrEmpType = ""; // Staging                                    
                                  
                        java.lang.Object userLogin = "";                                                      
                        java.lang.Object isoManager = "";                                                     
                        java.lang.Object managerOutcome = "";                                               
                        java.lang.Object rEmail = "";                                                   
                                 			                                                
                                                               
                        //get oimurl                                                                
            Object obj = getVariableData("oimurl");                                                                                                                             
			String tempStr = obj.toString();                                                                                      
            oimURL = getVariableData("mcurl").toString();                                                                           
			System.out.println("oimURL is == "+oimURL);                                                               
                                                               
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                                         
                        String authLoginConfig = "java.security.auth.login.config";                                                                         
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                                         
			// set up the environment for making the OIM API invocation                                                                        
			                                                                    
			java.util.Hashtable env = new java.util.Hashtable();                                                                         
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                                         
			oimInitialContextFactory);                                                                         
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                                         
			env.put(authLoginConfig, authLoginConfigPath);                                                                         
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                                       
			                                                                    
			client.login(oimUserName, oimPassword.toCharArray());                                                                      
			java.lang.Object roleXMLString = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestTarget");                                                                    
			String roleString = ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                                         
                        System.out.println("Role in NL1 is :- "+roleString);                                                
                        System.out.println("Before getting the request ID");                                                 
                        //java.lang.Object requestIDXML = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestId");                                                 
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                                
                        String RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                                   
  			System.out.println("RequestID in NL1 is == "+RequestID);                                                        
 	                userLogin =getVariableData("inputVariable", "payload",                                                                  
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                                      
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                                    
                        System.out.println("User Login in N1 is:- "+usrLogin);                                                   
                                     
 	                                                    
                           
                               
						                                
                             
                                          
                           //-----------------06/12/20                                     
                                                            
                    try {                                                       
                                                Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                     
                                                com.thortech.xl.dataaccess.tcDataProvider dbProvider4 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                                                                  
                                                String query4 = "select usr_key as userKey from usr where usr_login='"+usrLogin+"'";                                                       
                                                System.out.println("usr_key Query4 in NL1 is == "+query4);                                                                                             
                                                com.thortech.xl.dataaccess.tcDataSet usersDataSet4 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                    
                                                usersDataSet4.setQuery(dbProvider4, query4);                                                                     
                                                usersDataSet4.executeQuery();                                     
                                                int numColumns2 = usersDataSet4.getColumnCount();                                                                    
                                                int numRecords2 = usersDataSet4.getTotalRowCount();                                                             
                                                                           
                                                System.out.println("Column Count:- "+numColumns2);                                                               
                                                System.out.println("Record Count:- "+numRecords2);                                                                           
                                                //iterate through each record                                                                    
                                                for(int r = 0; r &lt; numRecords2; r++)                                                                    
                                                {                                                                    
                                                    usersDataSet4.goToRow(r);                                                                    
                                                                         
                                                //iterate through each column of a record                                                                    
                                                for(int s = 0; s &lt; numColumns2; s++)                                                                    
                                                {                                                                              
                                                    usr_key += usersDataSet4.getString(s);                                     
												System.out.println("usr_key-->"+usr_key);                                     
													                                    
                                                }                                                          
                                            }                                     
						}catch (java.lang.Exception e6){                                                                            
								e6.printStackTrace();                                                                            
						}                                     
                                                                
                           //-----------------06/16/21                                    
                                                            
                    try {                                                       
                                                Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                     
                                                com.thortech.xl.dataaccess.tcDataProvider dbProvider5 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                                                                  
                                                String query5 = "select MIL_KEY from MIL where MIL_NAME='AD UserName Change Preferred'";                                                       
                                                System.out.println("usr_key Query4 in NL1 is == "+query5);                                                                                             
                                                com.thortech.xl.dataaccess.tcDataSet usersDataSet5 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                    
                                                usersDataSet5.setQuery(dbProvider5, query5);                                                                     
                                                usersDataSet5.executeQuery();                                     
                                                int numColumns5 = usersDataSet5.getColumnCount();                                                                    
                                                int numRecords5 = usersDataSet5.getTotalRowCount();                                                             
                                                                           
                                                System.out.println("Column Count:- "+numColumns5);                                                               
                                                System.out.println("Record Count:- "+numRecords5);                                                                           
                                                //iterate through each record                                                                    
                                                for(int r = 0; r &lt; numRecords5; r++)                                                                    
                                                {                                                                    
                                                    usersDataSet5.goToRow(r);                                                                    
                                                                         
                                                //iterate through each column of a record                                                                    
                                                for(int s = 0; s &lt; numColumns5; s++)                                                                    
                                                {                                                                              
                                                    procDefTaskKey += usersDataSet5.getString(s);                                     
												System.out.println("MIL_KEY-->"+procDefTaskKey);                                     
													                                    
                                                }                                                          
                                            }                                     
						}catch (java.lang.Exception e6){                                                                            
								e6.printStackTrace();                                                                            
						}                                                                                                                             
                                                              
 
               try                                             
                    {                                            
                                                                    
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                      
				com.thortech.xl.dataaccess.tcDataProvider dbProviderN = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                     
                                String queryR = "select  LKV_DECODED from LKV where LKV_ENCODED ='ProcessTask'";                                                  
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                     
				usersDataSet1.setQuery(dbProviderN, queryR);                                                      
				usersDataSet1.executeQuery();                                                     
					                                                     
		                                                                 
                                int numColumns1 = usersDataSet1.getColumnCount();                                                     
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                              
                                            
                                System.out.println("Column Count:- "+numColumns1);                                                
                                System.out.println("Record Count:- "+numRecords1);                                                
                                //iterate through each record                                                     
                             for(int k = 0; k &lt; numRecords1; k++)                                                     
                                {                                                     
		                usersDataSet1.goToRow(k);                                                     
		                                                      
		                //iterate through each column of a record                                                     
		                for(int m = 0; m &lt; numColumns1; m++)                                                     
		                {                                                     
		                    String columnName = usersDataSet1.getColumnName(m);                                                     
		                    String value = usersDataSet1.getString(m);                
									if (value != "" ) {           
									processTask = value; 									              
									System.out.println("The processTask value is set to "+value);                                                     
                                   }                 
		                }                                                     
		            }                                                     
                    }                                            
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                            
                {                                            
                    e3.printStackTrace();                                             
                }  
 
						                                     
						String appInstName = "PRNCACCOUNT";  
 
	    if (!processTask.equals("NO")) 
		{ 
						 
               						       				                                                                             
         try           
        {           
		                                   
		// OIM Client           
        System.out.println("Starting Process Task Call");    
        Thor.API.Operations.tcProvisioningOperationsIntf  provOps = null;           
        Thor.API.Operations.TaskDefinitionOperationsIntf taskDefOps =null; 	           
			           
            // Get API Service           
            oracle.iam.identity.usermgmt.api.UserManager usrMgr = client.getService(oracle.iam.identity.usermgmt.api.UserManager.class);           
            oracle.iam.provisioning.api.ProvisioningService provService = client.getService(oracle.iam.provisioning.api.ProvisioningService.class);           
            provOps = client.getService(Thor.API.Operations.tcProvisioningOperationsIntf.class);           
            taskDefOps = client.getService(Thor.API.Operations.TaskDefinitionOperationsIntf.class);          
			         
		                      
            // Change variables accordingly           
           // String userLogin = usrLogin; // OIM User Login           
            String resourceObjectName = "PRNC User";  // Resource Object Name           
            String procTaskName = "AD UserName Change Preferred"; // To change for PRNC user          
                                                           
            // Get user's details           
            boolean useUserLogin = true;           
            java.util.HashSet&lt;String> retAttrs = new java.util.HashSet&lt;String>();           
           // retAttrs.add(oracle.iam.identity.usermgmt.api.UserManagerConstants.AttributeName.USER_KEY.getId()); // usr_key           
           // oracle.iam.identity.usermgmt.vo.User user = usrMgr.getDetails(userLogin, retAttrs, useUserLogin);           
          
            //String userKey = user.getId(); // Get usr_key           
			String userKey = usr_key; // Get usr_key           
           
            // Get user's resource accounts for a specific resource object           
            //oracle.iam.platform.entitymgr.vo.SearchCriteria criteria = new oracle.iam.platform.entitymgr.vo.SearchCriteria(oracle.iam.provisioning.api.ProvisioningConstants.AccountSearchAttribute.OBJ_NAME.getId(), resourceObjectName, SearchCriteria.Operator.EQUAL);                  
           // java.util.List&lt;oracle.iam.provisioning.vo.Account> accounts = provService.getAccountsProvisionedToUser(userKey, criteria, null, useUserLogin);           
          
			java.util.List&lt;oracle.iam.provisioning.vo.Account> accounts = null;           
			accounts = provService.getAccountsProvisionedToUser(usr_key,false);           
                       
            // Iterate User's accounts of a specific resource object           
            for(oracle.iam.provisioning.vo.Account resourceAcct: accounts)           
            {           
                String accountId = resourceAcct.getAccountID(); // OIU_KEY           
                String procInstFormKey = resourceAcct.getProcessInstanceKey(); // (ORC_KEY) Process Form Instance Key            
                String appName = resourceAcct.getAppInstance().getApplicationInstanceName(); // Application Instance Name           
			             
			  System.out.println("Account Id  --> "+accountId);           
			  System.out.println("Process Instance Form Key  --> "+procInstFormKey);           
			  System.out.println("Application Instance Name  --> "+appName);           
                  
                           
                // Get a specific process task            
                java.util.HashMap&lt;String,String> filter = new java.util.HashMap&lt;String,String>();           
                filter.put("Process Definition.Tasks.Task Name", procTaskName);           
                Thor.API.tcResultSet results = taskDefOps.getTaskDetail(Long.valueOf(procInstFormKey), filter);           
                int rows = results.getTotalRowCount();           
              //  String procDefTaskKey = mil_key;           
                           
                // Should only be one since Process Task Name is unique           
             /**   for(int i = 0; i &lt; rows; i++)           
                {           
                    results.goToRow(i);           
                    procDefTaskKey = results.getStringValue("Process Definition.Tasks.Key"); // MIL_KEY           
                } */          
                           
                System.out.println("Process Definition Task Key  --> "+procDefTaskKey);           
				           
                if(procDefTaskKey != null)           
                {                    
                    // Call a process task directly on an application instance    
					System.out.println("Before calling Process Task");    
                    long schKey = provOps.addProcessTaskInstance(Long.valueOf(procDefTaskKey), Long.valueOf(procInstFormKey));           
				  setVariableData("SCH_JOB", "PASS");   
				  System.out.println("Process Task Instance Key  --> "+schKey);   
				  System.out.println("SCH_JOB  --> PASS, Process Task call completed");   
				  break;          
                }  
					setVariableData("SCH_JOB", "FAIL");    
				  System.out.println("procDefTaskKey is Null SCH_JOB  --> Fail, Process Task call failed");  
				break;          
            }           
        }            
                   
        catch (java.lang.Exception ex)            
        {            
			System.out.println(" SEVERE  --> "+ ex.getMessage());           
        }  
 
		} else  
		{ 
 
               //  Schedule Task code below 
			    
							 try            
							{          
         
								oracle.iam.scheduler.api.SchedulerService schedulerService = client.getService(oracle.iam.scheduler.api.SchedulerService.class);         
								String scheduleJobName="EPA AAES UserName Change Task";         
								oracle.iam.scheduler.vo.JobDetails jobdetails=schedulerService.getJobDetail(scheduleJobName);         
								 java.util.HashMap&lt;String, oracle.iam.scheduler.vo.JobParameter> params= jobdetails.getParams();         
								         
								         
								String parameterName="User_Login";         
								String parameterValue=usrLogin;        
								System.out.println("parameterValue-->"+parameterValue);         
								//String parameterValue="(objectclass=inetorgperson)";         
								//Retrieving the Job Parameter Object         
								oracle.iam.scheduler.vo.JobParameter jobParam= params.get(parameterName);         
								//Updating the Job Parameter Value in the Object         
								jobParam.setValue(parameterValue);         
								params.put(parameterName, jobParam);         
								parameterName = "WORKFLOW";         
								parameterValue= "Preferred";         
								//System.out.println("parameterName -->"+parameterValue);         
								jobParam= params.get(parameterName);         
								jobParam.setValue(parameterValue);         
								params.put(parameterName, jobParam);         
								         
								//Udating the Schedule Task Parameters in OIM         
								schedulerService.updateJob(jobdetails);         
								         
								// Invoking the Schedule Task         
								System.out.println("Calling schedulerService Trigger");  
								  
								schedulerService.triggerNow(scheduleJobName);   
								  
								System.out.println("Calling schedulerService getStatusOfJob ");  
								  
								int schJobStatus = schedulerService.getStatusOfJob(scheduleJobName);  
								System.out.println("schJobStatus status " +schJobStatus);  
								  
								//String checkParameters = (String)schedulerService.lookupScheduledTask(scheduleJobName);  
								  
							/**	try  
								{  
									System.out.println("Calling schedulerService lookupScheduledTask ");  
									System.out.println("schedulerService job details are " +schedulerService.lookupScheduledTask(scheduleJobName));  
								  
								}catch (oracle.iam.scheduler.exception.IncorrectScheduleTaskDefinationException inEx)  
								{  
								  System.out.println(" SEVERE IncorrectScheduleTaskDefinationException  --> "+ inEx.getMessage());  
								} */  
								  
								if ((schJobStatus == 1) || (schJobStatus == 2) || (schJobStatus == 5))  
								{  
								  
									System.out.println("schedulerService Triggered");         
								  
									setVariableData("SCH_JOB","PASS"); 
									System.out.println(" Sechedule Job Call Success ");									 
								}								  
											         
							}             
							            
							catch (java.lang.Exception ex)             
							{        								  
								setVariableData("SCH_JOB","FAIL");  
								System.out.println(" SEVERE  --> "+ ex.getMessage());            
							} 
 
 
				}		 
                                                  
            }catch (java.lang.Exception e){                                                                       
                    e.printStackTrace();                                                                       
            }
                    </bpelx:exec></sequence>
      </case>
      <otherwise>
         <sequence id="BpSeq53">
            <empty name="Empty1" id="BpEmp10"/></sequence>
      </otherwise>
   </switch><assign name="Assign_1" id="BpAss42">
            <copy>
                <from><EndpointReference xmlns="http://www.w3.org/2005/08/addressing">
                        <Address/>
                    </EndpointReference></from>
                <to variable="partnerLink"/>
            </copy>
        <!--    <copy>
                <from variable="inputVariable" part="payload"
                      query="/ns3:process/ns4:url"/>
                <to variable="partnerLink"
                    query="/ns14:EndpointReference/ns14:Address"/>
            </copy> -->
            <copy>
                <from expression="bpws:getVariableData('callbackServiceUrl')"/>
                <to variable="partnerLink" query="/ns14:EndpointReference/ns14:Address"/>
            </copy> 
            <copy>
                <from variable="partnerLink"/>
                <to partnerLink="CallbackService"/>
            </copy>
        </assign>
        <switch name="Switch1" id="BpSwt14">
      <case condition="(bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:outcome') = 'APPROVE'  and  (bpws:getVariableData(&quot;SKIP_ISOIMO&quot;) != 'FALSE'))">
         <bpelx:annotation>
            <bpelx:general>
               <bpelx:property name="userLabel">
                            SKIP_ISOIMO is Null or False
                        </bpelx:property>
            </bpelx:general>
         </bpelx:annotation>
         <sequence id="BpSeq54"><assign id="BpAss43">
      <copy>
         <from expression="string('approved')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
         <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
      </copy>
      <copy>
         <from expression="ora:getConversationId()"/>
         <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
      </copy>
      <copy>
         <from expression="string('approved')"/>
         <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
      </copy>
   </assign>
                    <bpelx:exec name="Call-Prov-1" version="1.5" id="BxExe20">
                        System.out.println("Calling OUD Process Task");   
                                                      
                                                                                                                           
try {         
    
    
// Set webURL    
    
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                     
            String hostName = localMachine.getHostName().toString();        
          //  String webUrl = "http://" +hostName +":15000/";       
          //  setVariableData("webserUrl",webUrl);       
          //  System.out.println("hostName in NL1 : " + hostName);      
          //  System.out.println("webUrl of NL1 : " + webUrl);      
    
            String  envPwd = (String) getVariableData("EnvPwd");       			   
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                              
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key ="", procDefTaskKey = ""; // Staging                            
                          
                        java.lang.Object userLogin = "";                                              
                        java.lang.Object isoManager = "";                                             
                        java.lang.Object managerOutcome = "";                                       
                        java.lang.Object rEmail = "";                                           
                                 			                                        
                                                       
                        //get oimurl                                                        
            Object obj = getVariableData("oimurl");                                                                                                                     
			String tempStr = obj.toString();                                                                              
            oimURL = getVariableData("mcurl").toString();                                                                   
			System.out.println("oimURL is == "+oimURL);                                                       
                                                       
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                                 
                        String authLoginConfig = "java.security.auth.login.config";                                                                 
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                                 
			// set up the environment for making the OIM API invocation                                                                
			                                                            
			java.util.Hashtable env = new java.util.Hashtable();                                                                 
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                                 
			oimInitialContextFactory);                                                                 
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                                 
			env.put(authLoginConfig, authLoginConfigPath);                                                                 
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                               
			                                                            
			client.login(oimUserName, oimPassword.toCharArray());                                                              
			java.lang.Object roleXMLString = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestTarget");                                                            
			String roleString = ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                                 
                        System.out.println("Role in NL1 is :- "+roleString);                                        
                        System.out.println("Before getting the request ID");                                         
                        //java.lang.Object requestIDXML = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestId");                                         
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                        
                        String RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                           
  			System.out.println("RequestID in NL1 is == "+RequestID);                                                
 	                userLogin =getVariableData("inputVariable", "payload",                                                          
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                              
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                            
                        System.out.println("User Login in N1 is:- "+usrLogin);                                           
                             
 	                                            
                   
                       
						                        
                     
                                  
                           //-----------------06/12/20                             
                                                    
                    try {                                               
                                                Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                             
                                                com.thortech.xl.dataaccess.tcDataProvider dbProvider4 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                                                          
                                                String query4 = "select usr_key as userKey from usr where usr_login='"+usrLogin+"'";                                               
                                                System.out.println("usr_key Query4 in NL1 is == "+query4);                                                                                     
                                                com.thortech.xl.dataaccess.tcDataSet usersDataSet4 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                            
                                                usersDataSet4.setQuery(dbProvider4, query4);                                                             
                                                usersDataSet4.executeQuery();                             
                                                int numColumns2 = usersDataSet4.getColumnCount();                                                            
                                                int numRecords2 = usersDataSet4.getTotalRowCount();                                                     
                                                                   
                                                System.out.println("Column Count:- "+numColumns2);                                                       
                                                System.out.println("Record Count:- "+numRecords2);                                                                   
                                                //iterate through each record                                                            
                                                for(int r = 0; r &lt; numRecords2; r++)                                                            
                                                {                                                            
                                                    usersDataSet4.goToRow(r);                                                            
                                                                 
                                                //iterate through each column of a record                                                            
                                                for(int s = 0; s &lt; numColumns2; s++)                                                            
                                                {                                                                      
                                                    usr_key += usersDataSet4.getString(s);                             
												System.out.println("usr_key-->"+usr_key);                             
													                            
                                                }                                                  
                                            }                             
						}catch (java.lang.Exception e6){                                                                    
								e6.printStackTrace();                                                                    
						}                             
                                                        
                           //-----------------06/16/20                             
                                                    
                    try {                                               
                                                Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                             
                                                com.thortech.xl.dataaccess.tcDataProvider dbProvider5 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                                                          
                                                String query5 = "select MIL_KEY from MIL where MIL_NAME='Change Epaawrole'";                                               
                                                System.out.println("usr_key Query4 in NL1 is == "+query5);                                                                                     
                                                com.thortech.xl.dataaccess.tcDataSet usersDataSet5 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                            
                                                usersDataSet5.setQuery(dbProvider5, query5);                                                             
                                                usersDataSet5.executeQuery();                             
                                                int numColumns5 = usersDataSet5.getColumnCount();                                                            
                                                int numRecords5 = usersDataSet5.getTotalRowCount();                                                     
                                                                   
                                                System.out.println("Column Count:- "+numColumns5);                                                       
                                                System.out.println("Record Count:- "+numRecords5);                                                                   
                                                //iterate through each record                                                            
                                                for(int r = 0; r &lt; numRecords5; r++)                                                            
                                                {                                                            
                                                    usersDataSet5.goToRow(r);                                                            
                                                                 
                                                //iterate through each column of a record                                                            
                                                for(int s = 0; s &lt; numColumns5; s++)                                                            
                                                {                                                                      
                                                    procDefTaskKey += usersDataSet5.getString(s);                             
												System.out.println("MIL_KEY-->"+procDefTaskKey);                             
													                            
                                                }                                                  
                                            }                             
						}catch (java.lang.Exception e6){                                                                    
								e6.printStackTrace();                                                                    
						}                                                                                                                     
                                                
						                             
						String appInstName = "OUDInternalApplicationInstance2";    
   
						   
				/**		 try {                             
						 System.out.println("Try 1");                             
						 oracle.iam.provisioning.api.ProvisioningService provService = client.getService(oracle.iam.provisioning.api.ProvisioningService.class);                             
						 						 System.out.println("Try 2   usr_key --> "+usr_key);                             
                            
                                        	java.util.List&lt;oracle.iam.provisioning.vo.Account> accounts = null;                             
								accounts = provService.getAccountsProvisionedToUser(usr_key,false);                             
								 System.out.println("Try 3  --> client"+client);                            
	                             
									for(oracle.iam.provisioning.vo.Account resourceAcct: accounts)                             
									{                             
										String appName = resourceAcct.getAppInstance().getApplicationInstanceName();                             
										//System.out.println(".enableAccountIfDisabled() appName == "+ appName +" Account Status == "+resourceAcct.getAccountStatus());         
										String accStatus = resourceAcct.getAccountStatus().toString();       
										System.out.println("The account status berore updating epaawrole is"+accStatus);       
					//if (!mgrRequest.equalsIgnoreCase("YES"))         
							         //{         
										if(appName.equalsIgnoreCase(appInstName))                             
										 {                             
											System.out.println("Epaawrole set in Enabled Account appInstName : "+ appInstName+"  resourceAcct.getAccountID() == "+resourceAcct.getAccountID());        
											System.out.println("The account status in to enable is"+accStatus);	       
											long accid = Long.parseLong(resourceAcct.getAccountID());                            
											System.out.println("Before Epaawrole set in Enabled Account Is  accid--> "+accid);                            
											provService.Epaawrole(accid);                              
											System.out.println("After Epaawrole set in Enabled Account  accid--> "+accid); 											       
											break;       
										 }                             
									 //}else          
									    //{      										         
										         
										//}         
								  }                         
								} catch (oracle.iam.provisioning.exception.UserNotFoundException | oracle.iam.provisioning.exception.GenericProvisioningException e) {                             
									System.out.println("Failed While trying to check account status for user  -->  "+oimUserName+"  With Message  --> "+ e.getErrorMessage());                             
									e.printStackTrace();                             
								} catch (oracle.iam.platform.authopss.exception.AccessDeniedException e) {                             
									System.out.println("Failed While trying to Enable Account for  user  -->  "+oimUserName+"  With Message  --> "+ e.getMessage());                             
									e.printStackTrace();                             
								} catch (oracle.iam.provisioning.exception.AccountNotFoundException e) {                             
									System.out.println("Failed While trying to Enable Account for  user  -->  "+oimUserName+"  With Message  --> "+ e.getMessage());                             
									e.printStackTrace();                             
								} catch (oracle.iam.provisioning.exception.ImproperAccountStateException e) {                             
									System.out.println("Failed While trying to Enable Account for  user  -->  "+oimUserName+"  With Message  --> "+ e.getMessage());                             
									e.printStackTrace();                             
								}                            
								catch (java.lang.Exception e) {                             
									System.out.println(" With Message  --> "+ e.getMessage());                             
									e.printStackTrace();                             
								}								                            
						                                                 
	**/					                       
                                          
         try   
        {   
		   
		/**   
            // Set system properties required for OIMClient   
            System.setProperty("java.security.auth.login.config", AUTHWL_PATH);   
            System.setProperty("APPSERVER_TYPE", APPSERVER_TYPE);   
   
            // Create an instance of OIMClient with OIM environment information    
            Hashtable&lt;String, String> env = new Hashtable&lt;String, String>();   
            env.put(OIMClient.JAVA_NAMING_FACTORY_INITIAL, FACTORY_INITIAL_TYPE);   
            env.put(OIMClient.JAVA_NAMING_PROVIDER_URL, OIM_PROVIDER_URL);   
               
            // Establish an OIM Client   
            oimClient = new OIMClient(env);   
               
            // Login to OIM with System Administrator Credentials   
            oimClient.login(OIM_ADMIN_USERNAME, OIM_ADMIN_PASSWORD.toCharArray());   
			   
			**/   
 
    String childTableName = "UD_INLD_AWS"; //child table name  
    String columnName = "UD_INLD_AWS_ROLE"; //column name 
    String columnValue = getVariableData("OudValue").toString(); ; //column value  
 
               
			        // OIM Client   
   
        Thor.API.Operations.tcProvisioningOperationsIntf  provOps = null;   
        Thor.API.Operations.TaskDefinitionOperationsIntf taskDefOps =null; 	   
			   
            // Get API Service   
            oracle.iam.identity.usermgmt.api.UserManager usrMgr = client.getService(oracle.iam.identity.usermgmt.api.UserManager.class);   
            oracle.iam.provisioning.api.ProvisioningService provService = client.getService(oracle.iam.provisioning.api.ProvisioningService.class);   
            provOps = client.getService(Thor.API.Operations.tcProvisioningOperationsIntf.class);   
            taskDefOps = client.getService(Thor.API.Operations.TaskDefinitionOperationsIntf.class);  
			 
		              
            // Change variables accordingly   
           // String userLogin = usrLogin; // OIM User Login   
            String resourceObjectName = "Int LDAP User";  // Resource Object Name   
            String procTaskName = "Add AWS Role to User";   
                                                   
            // Get user's details   
            boolean useUserLogin = true;   
            java.util.HashSet&lt;String> retAttrs = new java.util.HashSet&lt;String>();   
           // retAttrs.add(oracle.iam.identity.usermgmt.api.UserManagerConstants.AttributeName.USER_KEY.getId()); // usr_key   
           // oracle.iam.identity.usermgmt.vo.User user = usrMgr.getDetails(userLogin, retAttrs, useUserLogin);   
  
            //String userKey = user.getId(); // Get usr_key   
			String userKey = usr_key; // Get usr_key   
   
            // Get user's resource accounts for a specific resource object   
            //oracle.iam.platform.entitymgr.vo.SearchCriteria criteria = new oracle.iam.platform.entitymgr.vo.SearchCriteria(oracle.iam.provisioning.api.ProvisioningConstants.AccountSearchAttribute.OBJ_NAME.getId(), resourceObjectName, SearchCriteria.Operator.EQUAL);          
           // java.util.List&lt;oracle.iam.provisioning.vo.Account> accounts = provService.getAccountsProvisionedToUser(userKey, criteria, null, useUserLogin);   
  
			java.util.List&lt;oracle.iam.provisioning.vo.Account> accounts = null;   
			accounts = provService.getAccountsProvisionedToUser(usr_key,false);   
               
            // Iterate User's accounts of a specific resource object   
            for(oracle.iam.provisioning.vo.Account resourceAcct: accounts)   
            {   
                String accountId = resourceAcct.getAccountID(); // OIU_KEY   
                String procInstFormKey = resourceAcct.getProcessInstanceKey(); // (ORC_KEY) Process Form Instance Key    
                String appName = resourceAcct.getAppInstance().getApplicationInstanceName(); // Application Instance Name   
			     
			  System.out.println("Account Id  --> "+accountId);   
			  System.out.println("Process Instance Form Key  --> "+procInstFormKey);   
			  System.out.println("Application Instance Name  --> "+appName);   
 
 
			// Insert AWS Role into Child Table 
			 
    Thor.API.Operations.tcFormInstanceOperationsIntf formInstanceOperationsIntf = client.getService(Thor.API.Operations.tcFormInstanceOperationsIntf.class); 
     
  long processFormDefinitionKey = formInstanceOperationsIntf.getProcessFormDefinitionKey(Long.valueOf(procInstFormKey)); 
 int processParentFormVersion =   formInstanceOperationsIntf.getProcessFormVersion(Long.valueOf(procInstFormKey)); 
  
 Thor.API.tcResultSet childFormDefinition = formInstanceOperationsIntf.getChildFormDefinition(processFormDefinitionKey,processParentFormVersion); 
  
 for(int i = 0; i &lt; childFormDefinition.getRowCount(); i++){ 
  childFormDefinition.goToRow(i); 
  String childFrmName = childFormDefinition.getStringValue("Structure Utility.Table Name"); 
   
   if(childFrmName.equalsIgnoreCase(childTableName)){ 
   long childKey = childFormDefinition.getLongValue("Structure Utility.Child Tables.Child Key"); 
    
   java.util.HashMap&lt;String,String> addAttr = new java.util.HashMap&lt;String,String>(); 
   addAttr.put(columnName, columnValue); 
    
   formInstanceOperationsIntf.addProcessFormChildData(childKey, Long.valueOf(procInstFormKey), addAttr); 
   System.out.println(columnValue + " Added successfully!!!"); 
   } 
  } 
 
 
 
 
 
                   
                // Get a specific process task    
                java.util.HashMap&lt;String,String> filter = new java.util.HashMap&lt;String,String>();   
                filter.put("Process Definition.Tasks.Task Name", procTaskName);   
                Thor.API.tcResultSet results = taskDefOps.getTaskDetail(Long.valueOf(procInstFormKey), filter);   
                int rows = results.getTotalRowCount();   
              //  String procDefTaskKey = mil_key;   
                   
                // Should only be one since Process Task Name is unique   
             /**   for(int i = 0; i &lt; rows; i++)   
                {   
                    results.goToRow(i);   
                    procDefTaskKey = results.getStringValue("Process Definition.Tasks.Key"); // MIL_KEY   
                } */  
                   
                System.out.println("Process Definition Task Key  --> "+procDefTaskKey);   
				   
                if(procDefTaskKey != null)   
                {            
                    // Call a process task directly on an application instance   
                    long schKey = provOps.addProcessTaskInstance(Long.valueOf(procDefTaskKey), Long.valueOf(procInstFormKey));   
				  System.out.println("Process Task Instance Key  --> "+schKey);   
				  break;  
                }  
				break;  
            }   
        }    
           
        catch (java.lang.Exception ex)    
        {    
			System.out.println(" SEVERE  --> "+ ex.getMessage());   
        }                                                             
                                          
            }catch (java.lang.Exception e){                                                               
                    e.printStackTrace();                                                               
            }
                    </bpelx:exec>
                    <bpelx:exec name="RJ-Prov" version="1.5" id="BxExe21">
                        String skipIsoImo = (String) getVariableData("SKIP_ISOIMO");            
System.out.println("The skipIsoImo value before Provisioning :- "+skipIsoImo);    
String appInstName = "ADSERAccount";    
            String  envPwd = (String) getVariableData("EnvPwd");    
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key =""; // Staging           
                         //get oimurl                                                      
                        Object obj = getVariableData("oimurl");                                                                             
                    //    oimURL = obj.toString();                                        
			String tempStr = obj.toString();                                       
			String[] tempArr = tempStr.split("//");                                       
			//oimURL = "t3://"+tempArr[1].split("/")[0]; 						                                      
			//oimURL ="t3://192.168.1.62:14000";            
                        oimURL = getVariableData("mcurl").toString();       
			System.out.println("oimURL is == "+oimURL);                                                     
                                                     
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                               
                        String authLoginConfig = "java.security.auth.login.config";                                                               
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                               
			// set up the environment for making the OIM API invocation                                                              
			                                                          
			java.util.Hashtable env = new java.util.Hashtable();                                                               
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                               
			oimInitialContextFactory);                                                               
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                               
			env.put(authLoginConfig, authLoginConfigPath);                                                               
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                             
			                                                          
			//client.login(oimUserName, oimPassword.toCharArray());    
                        java.lang.Object userLogin = "";                                            
                        java.lang.Object isoManager = "";                                           
                        java.lang.Object managerOutcome = "";                                     
                        java.lang.Object rEmail = ""; 			   
									String manOutcome = "";       
						String mgrRequest = getVariableData("RequestByManager").toString();       
						String requestForOthers = getVariableData("RequestForOthers").toString();	      
						System.out.println("The mgrRequest's request is :- "+mgrRequest);                       
						                      
						if ((mgrRequest.equalsIgnoreCase("YES")) || (requestForOthers.equalsIgnoreCase("YES"))){                      
						                      
							manOutcome = "APPROVE";                      
						}else        
						{	       
							managerOutcome = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:systemAttributes/task:outcome");                                            
							manOutcome =  ((oracle.xml.parser.v2.XMLElement)managerOutcome).getText();            
       
						}       
                        System.out.println("The user's manager managerOutcome2:- "+manOutcome);  						                      
						String rejectEmail = "";       
			   
try {      
// Set webURL      
      
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                       
            String hostName = localMachine.getHostName().toString();          
            String webUrl = "http://" +hostName +":15000/";         
            setVariableData("webserUrl",webUrl);         
            System.out.println("hostName in NL1 : " + hostName);        
            System.out.println("webUrl of NL1 : " + webUrl);     
            client.login(oimUserName, oimPassword.toCharArray());   
			userLogin =getVariableData("inputVariable", "payload",                                                       
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");   
			String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                         
            System.out.println("User Login in N1 is:- "+usrLogin);  
   
 try {                                            
                                                Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                          
                                                com.thortech.xl.dataaccess.tcDataProvider dbProvider4 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                         
                                               // String query2 = "select usr_email from usr where usr_login in ("+userIDS+")";                                               
                                                String query4 = "select usr_key as userKey from usr where usr_login='"+usrLogin+"'";                                            
                                                System.out.println("usr_key Query4 in NL1 is == "+query4);                                           
                                                //setVariableData("commentc","");                                          
                                                com.thortech.xl.dataaccess.tcDataSet usersDataSet4 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                         
                                                usersDataSet4.setQuery(dbProvider4, query4);                                                          
                                                usersDataSet4.executeQuery();                          
                                                int numColumns2 = usersDataSet4.getColumnCount();                                                         
                                                int numRecords2 = usersDataSet4.getTotalRowCount();                                                  
                                                                
                                                System.out.println("Column Count:- "+numColumns2);                                                    
                                                System.out.println("Record Count:- "+numRecords2);                                                                
                                                //iterate through each record                                                         
                                                for(int r = 0; r &lt; numRecords2; r++)                                                         
                                                {                                                         
                                                    usersDataSet4.goToRow(r);                                                         
                                                              
                                                //iterate through each column of a record                                                         
                                                for(int s = 0; s &lt; numColumns2; s++)                                                         
                                                {                                                                   
                                                    usr_key += usersDataSet4.getString(s);                          
												System.out.println("usr_key-->"+usr_key);                          
													                         
                                                }                                               
                                            }                          
						}catch (java.lang.Exception e6){                                                                 
								e6.printStackTrace();                                                                 
						}                
						  
   						                  						                    
                        System.out.println("The user's manager has:- "+manOutcome);                                   
                        rEmail = getVariableData("EmailAttribute");                               
                        System.out.println("The user's manager rEmail:- "+rEmail);                                                         						                        					  
						  
						 try {                           
								System.out.println("Try 1");                           
								oracle.iam.provisioning.api.ProvisioningService provService = client.getService(oracle.iam.provisioning.api.ProvisioningService.class);                           
						 		System.out.println("Try 2   usr_key --> "+usr_key);                           
                          
                                java.util.List&lt;oracle.iam.provisioning.vo.Account> accounts = null;                           
								accounts = provService.getAccountsProvisionedToUser(usr_key,false);                           
								System.out.println("Try 3  --> client"+client);                          
	                           
									for(oracle.iam.provisioning.vo.Account resourceAcct: accounts)                           
									{                           
										String appName = resourceAcct.getAppInstance().getApplicationInstanceName();                           
										System.out.println(".enableAccountIfDisabled() appName == "+ appName +" Account Status == "+resourceAcct.getAccountStatus());       
										String accStatus = resourceAcct.getAccountStatus().toString();     
										System.out.println("The account status berore mgrRequest check is"+accStatus);        
										if(appName.equalsIgnoreCase(appInstName) &amp;&amp; (!manOutcome.equalsIgnoreCase("REJECT")))                           
										 {                									    
											//System.out.println(".enableAccountIfDisabled() Disabled appInstName : "+ appInstName+"  resourceAcct.getAccountID() == "+resourceAcct.getAccountID());      
											System.out.println("The account status in to enable is"+accStatus);	     
											//long accid = Long.parseLong(resourceAcct.getAccountID());                          
											//System.out.println("Before Enable Account ID  accid--> "+accid);                          
											//provService.enable(accid);     
											//List&lt;Account> provisionedAccounts = provAPI.getAccountsProvisionedToUser(usr_key);   
											if (!oracle.iam.provisioning.api.ProvisioningConstants.ObjectStatus.DISABLED.getId().equalsIgnoreCase(resourceAcct.getAccountStatus()))  
											{  
  
											resourceAcct.setServiceAccount(true);  
											provService.modify(resourceAcct);	  
											}																						    
																						     
											break;     
										 }                           										       
										         
								  }                       
								} catch (oracle.iam.provisioning.exception.UserNotFoundException | oracle.iam.provisioning.exception.GenericProvisioningException e) {                           
									System.out.println("Failed While trying to check account status for user  -->  "+oimUserName+"  With Message  --> "+ e.getErrorMessage());                           
									e.printStackTrace();                           
								} catch (oracle.iam.platform.authopss.exception.AccessDeniedException e) {                           
									System.out.println("Failed While trying to Enable Account for  user  -->  "+oimUserName+"  With Message  --> "+ e.getMessage());                           
									e.printStackTrace();                           
								} catch (oracle.iam.provisioning.exception.AccountNotFoundException e) {                           
									System.out.println("Failed While trying to Enable Account for  user  -->  "+oimUserName+"  With Message  --> "+ e.getMessage());                           
									e.printStackTrace();                           
								}                       
								catch (java.lang.Exception e) {                           
									System.out.println(" With Message  --> "+ e.getMessage());                           
									e.printStackTrace();                           
								}   
   
   
   
			   
            String callbackServiceUrl="http://"+hostName+":15000"+"/workflowservice/CallbackService";      
            setVariableData("callbackServiceUrl",callbackServiceUrl);      
      
}catch (java.lang.Exception e){                                                       
                    e.printStackTrace();                                                       
            }
                    </bpelx:exec><invoke name="Invoke_1" inputVariable="Invoke_1_callback_InputVariable_1" outputVariable="Invoke_1_callback_OutputVariable_1" partnerLink="CallbackService" portType="ns1:CallbackService" operation="callback" id="BpInv24"/><invoke name="callbackClient" portType="client:ApprovalProcessCallback" operation="processResponse" partnerLink="RequestApprovalService" inputVariable="outputVariable" id="BpInv25"/></sequence>
      </case>
      <otherwise>
         <bpelx:annotation>
            <bpelx:documentation>
               Continue
            </bpelx:documentation>
         </bpelx:annotation>
         <sequence name="Sequence4" id="BpSeq55">
            
         <bpelx:exec name="RJ-END" version="1.5" id="BxExe22">
                        //setVariableData("SKIP_ISOIMO", "COMPLETED");   
// Modified to use this path for AW Sevice to set status ="Request Completed" in the Database. -- 04/28/2020      
String skipIsoImo = (String) getVariableData("SKIP_ISOIMO");   
String schJob = (String) getVariableData("SCH_JOB");          
String mgrRequest = (String) getVariableData("RequestByManager");                   
System.out.println("The skipIsoImo value before setting in Last java Block :- "+skipIsoImo);                   
                                                          
String usrAccStatus = (String) getVariableData("ADSV_ACCOUNT");        
System.out.println("The usrAccStatus value in ISO is:- "+usrAccStatus);                                          
                                
                                       
try {                    
    
// Set webURL     
     
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                      
            String hostName = localMachine.getHostName().toString();         
            String webUrl = "http://" +hostName +":15000/";        
            setVariableData("webserUrl",webUrl);        
            System.out.println("hostName in NL1 : " + hostName);       
            System.out.println("webUrl of NL1 : " + webUrl);       
    
            String  envPwd = (String) getVariableData("EnvPwd");         
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                    
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key ="",DbConnectionString="", DbUserId=""; // Staging                  
          
         
                        java.lang.Object userLogin = "";                                         
                        java.lang.Object isoManager = "";                                        
                        java.lang.Object managerOutcome = "";                                  
                        java.lang.Object rEmail = "";                            
                       // java.lang.Object managerComment = "";                          
                		                                   
                                                  
                                               
            Object obj = getVariableData("oimurl");                                                                                             
			String tempStr = obj.toString();                                    
			String[] tempArr = tempStr.split("//");                                    
			//oimURL = "t3://"+tempArr[1].split("/")[0]; 						                                   
			//oimURL ="t3://192.168.1.62:14000";      
                        oimURL = getVariableData("mcurl").toString();       
			System.out.println("oimURL is == "+oimURL);                                                  
                                                  
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                            
                        String authLoginConfig = "java.security.auth.login.config";                                                            
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                            
			// set up the environment for making the OIM API invocation                                                           
			                                                       
			java.util.Hashtable env = new java.util.Hashtable();                                                            
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                            
			oimInitialContextFactory);                                                            
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                            
			env.put(authLoginConfig, authLoginConfigPath);                                                            
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                          
			                                                       
			client.login(oimUserName, oimPassword.toCharArray());                                                         
			java.lang.Object roleXMLString = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestTarget");                                                       
			String roleString = ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                            
                        System.out.println("Role in NL1 is :- "+roleString);                                   
                        System.out.println("Before getting the request ID");                                    
                        //java.lang.Object requestIDXML = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestId");                                    
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                   
                        String RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                      
  			System.out.println("RequestID in NL1 is == "+RequestID);                                           
 	                userLogin =getVariableData("inputVariable", "payload",                                                     
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                         
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                       
                        System.out.println("User Login in N1 is:- "+usrLogin);                                      
                        System.out.println("Before user's manager managerOutcome1:- ");                    
                          
 	             //   managerComment = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:userComment/task:comment");                                         
                     //   String manComment =  ((oracle.xml.parser.v2.XMLElement)managerComment).getText();                            
                    String manOutcome = "";      
                  if ((mgrRequest.equalsIgnoreCase("YES"))) // || (usrAccStatus.equalsIgnoreCase("DISABLED"))) -- commented out on 06/36/2019       
				     {        
						manOutcome = "APPROVE";        
                        System.out.println("The request for others is made by manager and manOutcome is set to :- "+manOutcome);                
						               
					 }else {        
 	                managerOutcome = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:systemAttributes/task:outcome");                                         
                        manOutcome =  ((oracle.xml.parser.v2.XMLElement)managerOutcome).getText(); 					         
                        System.out.println("The user's manager managerOutcome2:- "+manOutcome);  					         
					 }        
						                 
 
 
				DbUserId = (String) getVariableData("DbUserId");   
				DbConnectionString = (String) getVariableData("DbUrl");   
				DbPassword = (String) getVariableData("DbPwd");   
				 
				               
			//if (skipIsoImo.equalsIgnoreCase("TRUE")) { 			               
            
				String query3 = "";                
				   
			if (schJob.equalsIgnoreCase("PASS"))     
			{ 			                 
                         				     
				query3 = "update REQUEST set request_status = 'Request Completed' where request_key = '"+RequestID+"'";  				     
				System.out.println("The query3  is :-"+query3);              
				     
			}else    
			{    
				query3 = "update REQUEST set request_status = 'Request Failed' where request_key = '"+RequestID+"'";  				     
				System.out.println("The query3  is :-"+query3); 			    
			}            
				            
				            
				java.sql.Connection  con = null;                          
				java.sql.Statement stmt = null;               
				               
               
                    
				try {                    
					//Connecting to staging database and trying to execute update statement					                       
					Class.forName("oracle.jdbc.OracleDriver");                             
					con=java.sql.DriverManager.getConnection(DbConnectionString,DbUserId,DbPassword);               
					stmt=con.createStatement();    
					System.out.println("Before database update");    
					//query3 = "update REQUEST set request_status = 'Request Completed' where request_key = '"+RequestID+"'";  					               
					stmt.executeUpdate(query3);    
					System.out.println("Completed database update of query :- "+query3);    
				}                           
				catch(Exception e){					                       
					System.out.println("Exception on trying to update database");                       
					System.out.println(e);                       
					e.printStackTrace();                        
					System.out.println("--------------------------------------");                       
                    
				}                             
				finally {                       
					stmt.close();                          
					con.close();                          
				}                
					               
					               
					               
					               
					               
						               
			//}			               
						               
	}catch (java.lang.Exception e){                                                   
                    e.printStackTrace();                                                   
            }
                    </bpelx:exec></sequence>
      </otherwise>
   </switch>
    </sequence>
</process>