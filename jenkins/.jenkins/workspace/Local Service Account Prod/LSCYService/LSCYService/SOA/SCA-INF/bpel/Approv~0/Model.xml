<?xml version = '1.0' encoding = 'UTF-8'?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Thu Apr 08 19:27:41 IST 2010
  Author:  nitpatel
  Purpose: Asynchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--><process name="ApprovalProcess" targetNamespace="http://xmlns.oracle.com/ApprovalApp_jws/LSCYServiceAccount/ApprovalProcess" xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:client="http://xmlns.oracle.com/ApprovalApp_jws/LSCYServiceAccount/ApprovalProcess" xmlns:ora="http://schemas.oracle.com/xpath/extension" xmlns:bpelx="http://schemas.oracle.com/bpel/extension" xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:ns1="http://wls.ws.workflowservice.platform.iam.oracle/" xmlns:ns2="http://xmlns.oracle.com/bpel/workflow/taskService" xmlns:ns4="http://xmlns.oracle.com/request/RequestDetails" xmlns:ns3="http://xmlns.oracle.com/ApprovalApp/LSCYServiceAccount/ApprovalProcess" xmlns:task="http://xmlns.oracle.com/bpel/workflow/task" xmlns:wfcommon="http://xmlns.oracle.com/bpel/workflow/common" xmlns:ns6="http://xmlns.oracle.com/bpel/workflow/routingSlip" xmlns:ns5="http://xmlns.oracle.com/bpel/workflow/TaskEvidenceService" xmlns:ns7="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20" xmlns:ns10="http://docs.oasis-open.org/wsbpel/2.0/process/executable" xmlns:ns9="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc" xmlns:ns12="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue" xmlns:ns13="http://schemas.oracle.com/bpel/extension/xpath/function/xdk" xmlns:ns11="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions" xmlns:ns8="http://schemas.oracle.com/xpath/extension/ldap" xmlns:ns14="http://www.w3.org/2005/08/addressing" xmlns:ns15="http://xmlns.oracle.com/RequestServiceApp_jws/RequestDataService/RequestDataService" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns16="http://xmlns.oracle.com/RequestServiceApp/RequestDataService/RequestData" xmlns:ns17="http://xmlns.oracle.com/RequestServiceApp/RequestDataService/UserData" xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath" xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions" xmlns:ess="http://xmlns.oracle.com/scheduler" xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns18="http://xmlns.oracle.com/ias/pcbpel/NotificationService" xmlns:ns19="http://xmlns.oracle.com/RequestServiceApp/RequestDataService/GeneralData" xmlns:wf="http://schemas.oracle.com/bpel/extensions/workflow" xmlns:ns20="http://schemas.oracle.com/bpel/extension/workflow" id="BpPrc0">

    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        PARTNERLINKS                                                      
        List of services participating in this BPEL process               
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <bpelx:annotation>
        <bpelx:analysis>
            <bpelx:property name="wsdlFile">
                ApprovalProcess.wsdl
            </bpelx:property>
        </bpelx:analysis>
    </bpelx:annotation>
    <partnerLinks>
        <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
        <partnerLink name="RequestApprovalService" partnerLinkType="client:ApprovalProcess" myRole="ApprovalProcessProvider" partnerRole="ApprovalProcessRequester"/>
        <partnerLink name="CallbackService" partnerRole="CallbackService_Role" partnerLinkType="ns1:CallbackService_PL"/>
        <partnerLink myRole="TaskServiceCallbackListener" name="ApprovalTask.TaskService_1" partnerRole="TaskService" partnerLinkType="ns2:TaskService"/>
        <partnerLink name="RequestWSPartnerLink" partnerLinkType="ns15:RequestDataService" partnerRole="RequestDataServiceProvider"/>
        <partnerLink name="NotificationService1" partnerLinkType="ns18:NotificationServiceLink" partnerRole="NotificationServiceProvider"/>
        <partnerLink name="NotificationService2" partnerLinkType="ns18:NotificationServiceLink" partnerRole="NotificationServiceProvider"/>
    </partnerLinks>

    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        VARIABLES                                                        
        List of messages and XML documents used within this BPEL process 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <variables>
        <!-- Reference to the message passed as input during initiation -->
        <variable name="inputVariable" messageType="client:ApprovalProcessRequestMessage"/>

        <!-- Reference to the message that will be sent back to the requester during callback -->
        <variable name="outputVariable" messageType="client:ApprovalProcessResponseMessage"/>
        <variable name="Invoke_1_callback_InputVariable_1" messageType="ns1:callback"/>
        <variable name="Invoke_1_callback_OutputVariable_1" messageType="ns1:callbackResponse"/>
        <variable name="partnerLink" element="ns14:EndpointReference"/>
        <variable name="ApprovalTask_1_globalVariable" messageType="ns2:taskMessage"/>
        <variable name="RequestID" messageType="ns15:RequestDataServiceRequestMessage"/>
        <variable name="getMAdd_getUserDetails_OutputVariable" messageType="ns15:UserDataServiceResponseMessage"/>
        <variable name="getMAdd_getRequestDetails_OutputVariable" messageType="ns15:RequestDataServiceResponseMessage"/>
        <variable name="EmailAttribute" type="xsd:string"/>
        <variable name="groupName" type="xsd:string"/>
        <variable name="commentc" type="xsd:string"/>
        <variable name="oimurl" type="xsd:string"/>
        <variable name="OIMServer" type="xsd:string"/>
        <variable name="AdminGroupEmail" type="xsd:string"/>
        <variable name="ApprovalTask_2_globalVariable" messageType="ns2:taskMessage"/>
        <variable name="ApprovalTask_3_globalVariable" messageType="ns2:taskMessage"/>
        <variable name="madd" type="xsd:string"/>
        <variable name="initiateTask_ApprovalTask_1_reinitiateTask_InputVariable" messageType="ns2:reinitiateTaskMessage"/>
        <variable name="initiateTask_ApprovalTask_1_reinitiateTask_OutputVariable" messageType="ns2:reinitiateTaskResponseMessage"/>
        <variable name="reinitiateTask_ApprovalTask_3_initiateTask_InputVariable" messageType="ns2:initiateTaskMessage"/>
        <variable name="reinitiateTask_ApprovalTask_3_initiateTask_OutputVariable" messageType="ns2:initiateTaskResponseMessage"/>
        <variable name="Invoke1_getRequestDetails_OutputVariable" messageType="ns15:RequestDataServiceResponseMessage"/>
        <variable name="ApproverComment" type="xsd:string"/>
        <variable name="userEmail" type="xsd:string"/>
        <variable name="SKIP_ISOIMO" type="xsd:string"/>
        <variable name="RequestByManager" type="xsd:string"/>
        <variable name="ADSV_ACCOUNT" type="xsd:string"/>
        <variable name="EnvPwd" type="xsd:string"/>
        <variable name="ADSV_DEPT" type="xsd:string"/>
        <variable name="USR_DEPT" type="xsd:string"/>
        <variable name="SupportEmail" type="xsd:string"/>
        <variable name="NO_REQUEST" type="xsd:string"/>
        <variable name="PREV_REQ" type="xsd:string"/>
        <variable name="EmailTemp" type="xsd:string"/>
        <variable name="RequestForOthers" type="xsd:string"/>
        <variable name="callbackServiceUrl" type="xsd:string"/>
        <variable name="webserUrl" type="xsd:string"/>
        <variable name="mcurl" type="xsd:string"/>
        <variable name="NoServiceAccount" type="xsd:string"/>
        <variable name="ServiceDetails" type="xsd:string"/>
        <variable name="MGR_STATUS" type="xsd:string"/>
        <variable name="DbName" type="xsd:string"/>
        <variable name="DbPwd" type="xsd:string"/>
        <variable name="DbUserId" type="xsd:string"/>
        <variable name="DbUrl" type="xsd:string"/>
        <variable name="SVC_ACC" type="xsd:string"/>
        <variable name="CYA_ADMINS" type="xsd:string"/>
    </variables>
    
    <faultHandlers id="BpFhs0">
        <catchAll id="BpCAl0">
            <sequence id="BpSeq0">
                <assign name="AssignPartnerLink" id="BpAss0">
                    <copy>
                        <from expression="ora:getFaultAsString()"/>
                        <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
                    </copy>
                    <copy>
                        <from expression="ora:getConversationId()"/>
                        <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
                    </copy>
                    <copy>
                        <from expression="ora:getFaultAsString()"/>
                        <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
                    </copy>
                    <copy>
                        <from>
                            <EndpointReference xmlns="http://www.w3.org/2005/08/addressing">
                                <Address/>
                            </EndpointReference>
                        </from>
                        <to variable="partnerLink"/>
                    </copy>
                    <copy>
                      <!--  <from variable="inputVariable" part="payload"
                              query="/ns3:process/ns4:url"/> -->
                        <from expression="bpws:getVariableData('callbackServiceUrl')"/>
                        <to query="/ns14:EndpointReference/ns14:Address" variable="partnerLink"/>
                    </copy>
                    <copy>
                        <from variable="partnerLink"/>
                        <to partnerLink="CallbackService"/>
                    </copy>
                </assign>
                <invoke name="InvokeErrorCallback" inputVariable="Invoke_1_callback_InputVariable_1" outputVariable="Invoke_1_callback_OutputVariable_1" portType="ns1:CallbackService" partnerLink="CallbackService" operation="callback" id="BpInv0"/>
            </sequence>
        </catchAll>
    </faultHandlers>

    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
       ORCHESTRATION LOGIC                                               
       Set of activities coordinating the flow of messages across the    
       services integrated within this business process                  
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <sequence name="main" id="BpSeq1">
        <!-- Receive input from requestor. (Note: This maps to operation defined in ApprovalProcess.wsdl) --><receive name="receiveInput" partnerLink="RequestApprovalService" portType="client:ApprovalProcess" operation="process" variable="inputVariable" createInstance="yes" id="BpRcv0"/>
        <bpelx:exec name="set_webserver" version="1.5" id="BxExe0">
            System.out.println("Setting WebService");                            
                                                                  
try {                
              
              
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                   
            String hostName = localMachine.getHostName().toString();      
            String webUrl = ""; //"http://" +hostName +":15000/";     
            String oimURL="";   
            System.out.println("hostName of local machine: " + hostName);    
      
 
  
            String callbackServiceUrl= ""; //"http://"+hostName+":15000"+"/workflowservice/CallbackService";   
            //setVariableData("callbackServiceUrl",callbackServiceUrl);   
            String host = hostName.substring(6, hostName.indexOf(".")-1);                     
            System.out.println("Env of local machine: " + host);       
   
            if (host.equals("prd")){                     
                System.out.println("Prod Hostname of local machine: " + hostName);                     
                setVariableData("EnvPwd","t3I0We0W5");   
                webUrl = "http://" +hostName +":15000/"; 
                oimURL = "t3://"+hostName	+ ":15000";   
                callbackServiceUrl = webUrl + "workflowservice/CallbackService"; 
            }else if (host.equals("stg")) {                     
                System.out.println("Stage Hostname of local machine: " + hostName);                     
                setVariableData("EnvPwd","aj3ARa1Z6");    
                webUrl = "http://" +hostName +":15000/";   
                oimURL = "t3://"+hostName	+ ":15000";   
                callbackServiceUrl = webUrl + "workflowservice/CallbackService"; 
            }else {                     
                System.out.println("Dev Hostname of local machine: " + hostName);                     
                setVariableData("EnvPwd","TxGy4IX98");   
                webUrl = "http://" +hostName +":16000/";  
                oimURL = "t3://"+hostName	+ ":16000";   
                callbackServiceUrl = webUrl + "workflowservice/CallbackService"; 
            }    
 
            setVariableData("webserUrl",webUrl);    
            System.out.println("webUrl of local machine: " + webUrl);   
            setVariableData("callbackServiceUrl",callbackServiceUrl);  
            System.out.println("callbackServiceUrl of local machine: " + callbackServiceUrl);  
            setVariableData("mcurl",oimURL);   
            System.out.println("oimURL of local machine: " + oimURL);   
 
      }catch (java.lang.Exception e){                                                            
                    e.printStackTrace();                                                            
      }
        </bpelx:exec>
        <assign name="AssignRequestWSURL" id="BpAss1">
            <copy>
                <from><EndpointReference xmlns="http://www.w3.org/2005/08/addressing"><Address/>
                    </EndpointReference></from>
                <to variable="partnerLink"/>
            </copy>
            <copy>
                <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestID"/>
                <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="RequestID" part="RequestId" query="/ns16:RequestId"/>
            </copy>
            <copy>
                <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="inputVariable" part="payload" query="/ns3:process/ns4:BeneficiaryDetails/ns4:Email"/>
                <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="userEmail"/>
            </copy>
            <copy>
                <!--   <from expression="concat(substring-before(bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:url'),'workflowservice'),'reqsvc/reqsvc')" -->
                <from expression="concat(bpws:getVariableData('webserUrl'),'reqsvc/reqsvc')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                <to variable="partnerLink" query="/ns14:EndpointReference/ns14:Address"/>
            </copy>
            <copy>
                <from variable="partnerLink"/>
                <to partnerLink="RequestWSPartnerLink"/>
            </copy>
            <copy>
                <from expression="bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:url')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="oimurl"/>
            </copy>
        </assign><bpelx:exec name="Setup_Env" version="1.5" id="BxExe1">
            System.out.println("Checking if a previous Request exists");                          
 String adminGroup = "";                                                               
try {              
            
            
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                 
            String hostName = localMachine.getHostName().toString();                 
            System.out.println("Hostname of local machine: " + hostName);                 
            String host = hostName.substring(6, hostName.indexOf(".")-1);                 
            System.out.println("Env of local machine: " + host);                 
                 
        /**    if (host.equals("prd")){                 
                System.out.println("Prod Hostname of local machine: " + hostName);                 
                setVariableData("EnvPwd","t3I0We0W5");                  
            }else if (host.equals("stg")) {                 
                System.out.println("Stage Hostname of local machine: " + hostName);                 
                setVariableData("EnvPwd","aj3ARa1Z6");                  
            }else {                 
                System.out.println("Dev Hostname of local machine: " + hostName);                 
                setVariableData("EnvPwd","TxGy4IX98");                  
        } */            
            
            
            
                                     
            String  envPwd = (String) getVariableData("EnvPwd");       
			String  prevReqStatus = "";       
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                           
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key ="",DbConnectionString="", DbUserId=""; // Staging                         
                 
                
                        java.lang.Object userLogin = "";                                                
                        java.lang.Object isoManager = "";                                               
                        java.lang.Object managerOutcome = "";                                         
                        java.lang.Object rEmail = "";                                   
                       // java.lang.Object managerComment = "";                                 
                		                                          
                                                         
                                                      
            Object obj = getVariableData("oimurl");                                                                                                    
			String tempStr = obj.toString();                                           
			String[] tempArr = tempStr.split("//");                                           
			//oimURL = "t3://"+tempArr[1].split("/")[0]; 						                                          
			//oimURL ="t3://192.168.1.62:14000";          
			String[] tempArr2 = tempStr.split(":");            
                       // oimURL = "t3://"+hostName	+ ":15000";            
                        //setVariableData("mcurl",oimURL);       
                        oimURL = getVariableData("mcurl").toString();      
			System.out.println("oimURL is == "+oimURL);                                                         
                                                         
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                                   
                        String authLoginConfig = "java.security.auth.login.config";                                                                   
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                                   
			// set up the environment for making the OIM API invocation                                                                  
			                                                              
			java.util.Hashtable env = new java.util.Hashtable();                                                                   
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                                   
			oimInitialContextFactory);                                                                   
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                                   
			env.put(authLoginConfig, authLoginConfigPath);                                                                   
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                                 
			                                                              
			client.login(oimUserName, oimPassword.toCharArray());                                                                
			java.lang.Object roleXMLString = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestTarget");                                                              
			String roleString = ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                                   
                        System.out.println("Role in NL1 is :- "+roleString);                                          
                        System.out.println("Before getting the request ID");                                           
                        //java.lang.Object requestIDXML = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestId");                                           
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                          
                        String RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                             
  			System.out.println("RequestID in No_request is == "+RequestID);                                                  
 	                userLogin =getVariableData("inputVariable", "payload",                                                            
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                                
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                              
                        System.out.println("User Login in N1 is:- "+usrLogin);        
       
						String roleValue = "Active Directory - Service Account";                            
						setVariableData("groupName",roleValue); 						       
						System.out.println("groupName in CheckPrevRequest is:- "+roleValue);   
 
 
               try                                                                                         
                    {                                                                                        
                                                                                                                
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                                                  
				com.thortech.xl.dataaccess.tcDataProvider dbProviderU = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                                                 
                             //   String queryU = "select USR_STATUS from usr where usr_login ='"+mgrLogin+"'";     
                                String queryU = "select USR_LOGIN, USR_STATUS from usr where USR_KEY = (select USR_MANAGER_KEY from usr where usr_login ='"+usrLogin+"')";   								  
                                System.out.println("QueryU in NativeLogic is == "+queryU);                                                                                          
                                com.thortech.xl.dataaccess.tcDataSet usersDataSetU = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                                                 
				usersDataSetU.setQuery(dbProviderU, queryU);                                                                                                  
				usersDataSetU.executeQuery();                                                                                                 
					                                                                                                 
		                                                                                                             
                                int numColumnsU = usersDataSetU.getColumnCount();                                                                                                 
                                int numRecordsU = usersDataSetU.getTotalRowCount();                                                                                          
                                                                                        
                                System.out.println("Column Count:- "+numColumnsU);                                                                                            
                                System.out.println("Record Count:- "+numRecordsU);                                                                                            
                                //iterate through each record                                                                                                 
                             for(int k = 0; k &lt; numRecordsU; k++)                                                                                                 
                                {                                                                                                 
		                usersDataSetU.goToRow(k);                                                                                                 
		                                                                                                  
		                //iterate through each column of a record                                                                                                 
		                for(int m = 0; m &lt; numColumnsU; m++)                                                                                                 
		                {                                                                                                 
		                    String columnName = usersDataSetU.getColumnName(m);                                                                                                 
		                    String value = usersDataSetU.getString(m);  
								if (m==0)                    
								{          
									setVariableData("commentc",value.toUpperCase());                   								                     
									System.out.println("The User manager login commentc value is :- "+value);   
								}else if (m==1)  
								{  
									setVariableData("MGR_STATUS",value.toUpperCase());                   								                     
									System.out.println("The User manager status is :- "+value); 								  
								}  
                                                                                                
		                }                                                                                                 
		            }                                                                                                 
                    }                                                                                        
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                                                        
                {                                                                                        
                    e3.printStackTrace();                                                                                         
                }  
 
 
						 
               try                                         
                    {                                        
                                                                
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                  
				com.thortech.xl.dataaccess.tcDataProvider dbProviderN = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                 
                                String queryR = "select  LKV_DECODED from LKV where LKV_ENCODED ='PreviousRequestStatus'";                                              
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                 
				usersDataSet1.setQuery(dbProviderN, queryR);                                                  
				usersDataSet1.executeQuery();                                                 
					                                                 
		                                                             
                                int numColumns1 = usersDataSet1.getColumnCount();                                                 
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                          
                                        
                                System.out.println("Column Count:- "+numColumns1);                                            
                                System.out.println("Record Count:- "+numRecords1);                                            
                                //iterate through each record                                                 
                             for(int k = 0; k &lt; numRecords1; k++)                                                 
                                {                                                 
		                usersDataSet1.goToRow(k);                                                 
		                                                  
		                //iterate through each column of a record                                                 
		                for(int m = 0; m &lt; numColumns1; m++)                                                 
		                {                                                 
		                    String columnName = usersDataSet1.getColumnName(m);                                                 
		                    String value = usersDataSet1.getString(m);            
									if (value != "" ) {       
									prevReqStatus = value; 									          
									System.out.println("The PrevReqStatus value is set to "+value);                                                 
                                   }             
		                }                                                 
		            }                                                 
                    }                                        
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                        
                {                                        
                    e3.printStackTrace();                                         
                }       
       
				       
               try                                         
                    {                                        
                                                                
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                  
				com.thortech.xl.dataaccess.tcDataProvider dbProviderN = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                 
                               // String query1 = "select  LKV_DECODED from LKV where LKV_ENCODED ='OIM_Server'";            
								String queryN = "SELECT REQUEST.REQUEST_ID FROM REQUEST, USR, OBJ " +            
												"WHERE REQUEST.REQUESTER_KEY = USR.USR_KEY " +     
												"AND REQUEST.REQUESTER_KEY = OBJ.OBJ_KEY " + 												    
												"AND REQUEST.REQUEST_STATUS IN  " + prevReqStatus +     
												" AND OBJ.OBJ_NAME LIKE  'SERAD%'" +  												    
												" AND REQUEST.REQUEST_ID &lt;'"+RequestID+"'" +          
												" AND USR.USR_LOGIN ='"+usrLogin+"'";            
                                System.out.println("QueryN in NativeLogic is = "+queryN);                                          
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                 
				usersDataSet1.setQuery(dbProviderN, queryN);                                                  
				usersDataSet1.executeQuery();                                                 
					                                                 
		                                                             
                                int numColumns1 = usersDataSet1.getColumnCount();                                                 
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                          
                                        
                                System.out.println("Column Count:- "+numColumns1);                                            
                                System.out.println("Record Count:- "+numRecords1);                                            
                                //iterate through each record                                                 
                             for(int k = 0; k &lt; numRecords1; k++)                                                 
                                {                                                 
		                usersDataSet1.goToRow(k);                                                 
		                                                  
		                //iterate through each column of a record                                                 
		                for(int m = 0; m &lt; numColumns1; m++)                                                 
		                {                                                 
		                    String columnName = usersDataSet1.getColumnName(m);                                                 
		                    String value = usersDataSet1.getString(m);            
									if (value != "" ) {							            
                                    setVariableData("NO_REQUEST","FALSE");          
									setVariableData("PREV_REQ",value); 									          
									System.out.println("The NO_REQUEST value is set to FALSE");                                                 
                                   }             
		                }                                                 
		            }                                                 
                    }                                        
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                        
                {                                        
                    e3.printStackTrace();                                         
                }            
					                      
              try                                       
                    {                                      
                                                              
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                
				com.thortech.xl.dataaccess.tcDataProvider dbProvider4 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                    
								String userStatus = "";	               
								String query4 =	"SELECT USR_UDF_DEPARTMENT from USR WHERE USR_LOGIN ='"+usrLogin+"'"; 							               
                                System.out.println("Query4 in NativeLogic is == "+query4);                                        
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet4 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                               
				usersDataSet4.setQuery(dbProvider4, query4);                                                
				usersDataSet4.executeQuery();                                               
					                                               
		                                                           
                                int numColumns4 = usersDataSet4.getColumnCount();                                               
                                int numRecords4 = usersDataSet4.getTotalRowCount();                                        
                                      
                                System.out.println("Column Count:- "+numColumns4);                                          
                                System.out.println("Record Count:- "+numRecords4);                                          
                                //iterate through each record                                               
                             for(int r = 0; r &lt; numRecords4; r++)                                               
                                {                                               
		                usersDataSet4.goToRow(r);                                               
		                                                
		                //iterate through each column of a record                                               
		                for(int s = 0; s &lt; numColumns4; s++)                                               
		                {                                               
		                    String columnName = usersDataSet4.getColumnName(s);                                               
		                    String value = usersDataSet4.getString(s);                 
                                    System.out.println("The Department name is :-"+value);                 
                                    if (value != ""){                 
								{                                     
                                        setVariableData("ADSV_DEPT","TRUE"); 								                   
                                        System.out.println("The Department name is :-  AVAILABLE");                   
								}								                 
                                    }else{              
                                        setVariableData("ADSV_DEPT","FALSE"); 								                   
                                        System.out.println("The Department name is :-  NOTAVAILABLE");              
                                        String adsv = getVariableData("ADSV_DEPT").toString();             
                                        System.out.println("The ADSV_DEPT value is :- "+adsv);              
             
              
                                    }              
		                }                                               
		            }                                               
                    }                                      
                catch(com.thortech.xl.dataaccess.tcDataSetException e4)                                      
                {                                      
                    e4.printStackTrace();                                       
                }          
    
               try                                         
                    {                                        
                                                                
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                  
				com.thortech.xl.dataaccess.tcDataProvider dbProvider1 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                 
                                String query1 = "select  LKV_DECODED from LKV where LKV_ENCODED ='AdminGroupEmail'";                                                  
                                System.out.println("Query1 in NativeLogic is == "+query1);                                          
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                 
				usersDataSet1.setQuery(dbProvider1, query1);                                                  
				usersDataSet1.executeQuery();                                                 
					                                                 
		                                                             
                                int numColumns1 = usersDataSet1.getColumnCount();                                                 
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                          
                                        
                                System.out.println("Column Count:- "+numColumns1);                                            
                                System.out.println("Record Count:- "+numRecords1);                                            
                                //iterate through each record                                                 
                             for(int k = 0; k &lt; numRecords1; k++)                                                 
                                {                                                 
		                usersDataSet1.goToRow(k);                                                 
		                                                  
		                //iterate through each column of a record                                                 
		                for(int m = 0; m &lt; numColumns1; m++)                                                 
		                {                                                 
		                    String columnName = usersDataSet1.getColumnName(m);                                                 
		                    String value = usersDataSet1.getString(m);                                                 
                            //setVariableData("AdminGroupEmail",value);   
							  for (String retval: value.split(",")) {   
								 adminGroup += "'" + retval.toUpperCase() + "',";   
							  }   
								adminGroup =adminGroup.substring(0,adminGroup.length()-1);							     
                                System.out.println("The AdminGroup value is :-"+adminGroup);  							                                               
                                                
		                }                                                 
		            }                                                 
                    }                                        
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                        
                {                                        
                    e3.printStackTrace();                                         
                }                                     
   
                                        // Checking Admins Status                                           
                                        try                                              
                                            {                                                                       
                                                Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                       
                                                com.thortech.xl.dataaccess.tcDataProvider dbProvider3 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                      
                                                String query5 = "select usr_email,usr_login from usr where usr_login in ("+adminGroup+") and usr_status ='Active'";                                             
                                                System.out.println("Query5 in NL1 is == "+query5);                                               
                                                com.thortech.xl.dataaccess.tcDataSet usersDataSet3 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                      
                                                usersDataSet3.setQuery(dbProvider3, query5);                                                       
                                                usersDataSet3.executeQuery();                                                      
                                                                                                              
                                                                                                  
                                                int numColumns2 = usersDataSet3.getColumnCount();                                                      
                                                int numRecords2 = usersDataSet3.getTotalRowCount();                                               
                                                             
                                                System.out.println("Column Count:- "+numColumns2);                                                 
                                                System.out.println("Record Count:- "+numRecords2);                                            
                                                String email = "";                
												String usr_names = "";               
												String appNames  = "";												               
                                                //iterate through each record               
												if (numRecords2 > 0)               
												{               
													for(int r = 0; r &lt; numRecords2; r++)                                                      
													{                                                      
															usersDataSet3.goToRow(r);                                                      
													               
														//iterate through each column of a record                                                      
														for(int s = 0; s &lt; numColumns2; s++)                                                      
														{                  
															if (s==0)               
															{               
																email += usersDataSet3.getString(s) +",";               
															}else{               
															usr_names += usersDataSet3.getString(s) +",";													               
															}               
																				               
														}                                            
													}                                           
													email = email.substring(0,email.length()-1);                
												   usr_names =usr_names.substring(0,usr_names.length()-1);               
													//appNames = usr_names + "," +getVariableData("AdminGroupEmail");                
													setVariableData("AdminGroupEmail",usr_names);                           
													System.out.println("Final Admin Approvers:- "+usr_names);													                  
												}else               
												{                                  
													System.out.println("No AdminGroup Approvers Assigned");													               
												               
												}                          
										}                                             
										catch(com.thortech.xl.dataaccess.tcDataSetException e4)                                             
										{                                             
											e4.printStackTrace();                                              
										}     
										 
										 
					// To get IT resoursce DB password for prod/dev/stg environments        
				        
				try                                                            
				{          
					Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);         
        
					Thor.API.Operations.tcITResourceInstanceOperationsIntf resourceFactory = null;        
					long vdResourceKey = 0L;        
					java.util.Map&lt;String, String> result = new java.util.HashMap&lt;String, String>();        
					        
				try {        
						resourceFactory = (Thor.API.Operations.tcITResourceInstanceOperationsIntf) client.getService(Thor.API.Operations.tcITResourceInstanceOperationsIntf.class);        
						java.util.Map&lt;String, String> filter = new java.util.HashMap&lt;String, String>();        
						filter.put("IT Resource.Name", "OIMDB");        
						Thor.API.tcResultSet resources = resourceFactory.findITResourceInstances(filter);        
						vdResourceKey = resources.getLongValue("IT Resource.Key");        
						System.out.println("IT Resource key : " + vdResourceKey);        
						Thor.API.tcResultSet params = resourceFactory.getITResourceInstanceParameters(vdResourceKey);   
						int objectRowCount = params.getRowCount();  
						for (int j = 0; j &lt; objectRowCount; j++)         
						{        
							params.goToRow(j);        
							result.put(params.getStringValue("IT Resources Type Parameter.Name"),        
							params.getStringValue("IT Resource.Parameter.Value"));        
			        
				        
						}        
		        
					String dbName = (String) result.get("DatabaseName");   
					setVariableData("DbName",dbName);  
					  
					String dbPassword = (String) result.get("Password");  
					setVariableData("DbPwd",dbPassword);  
					  
					String dbUser = (String) result.get("UserID");  
					setVariableData("DbUserId",dbUser);		  
					  
					String dbURL = (String) result.get("URL");	  
                    setVariableData("DbUrl",dbURL);					  
     
                      
        
					System.out.println("dbName is : " +dbName);        
					System.out.println("dbPassword is : " +dbPassword);     
					System.out.println("dbUser is : " +dbUser);        
					System.out.println("dbURL is : " +dbURL);  					  
     					        
						        
				} catch (Thor.API.Exceptions.tcAPIException e) {        
					e.printStackTrace();        
				} catch (Thor.API.Exceptions.tcColumnNotFoundException e) {        
					e.printStackTrace();        
				} catch (Exception e) {        
					e.printStackTrace();        
				}        
					      					      					        
			}        
			catch(Exception e5)                                                            
			{                                                            
				e5.printStackTrace();                                                             
			} 										 
										 
										 
					client.logout(); 			          
						                      
	}catch (java.lang.Exception e){                                                          
                    e.printStackTrace();                                                          
            }
        </bpelx:exec><switch name="Switch1" id="BpSwt0">
            <case condition="((bpws:getVariableData(&quot;MGR_STATUS&quot;) != 'ACTIVE')  or (bpws:getVariableData(&quot;MGR_STATUS&quot;) = ''))">
                <bpelx:annotation>
                    <bpelx:general>
                        <bpelx:property name="userLabel">
                            Manager name is Null
                        </bpelx:property>
                    </bpelx:general>
                </bpelx:annotation><sequence id="BpSeq2">
      <assign id="BpAss2">
                        <copy>
                            <from expression="string('rejected')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                            <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
                        </copy>
                        <copy>
                            <from expression="ora:getConversationId()"/>
                            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
                        </copy>
                        <copy>
                            <from expression="string('rejected')"/>
                            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
                        </copy>
                    </assign>
      <scope name="Manager_Name_Missing" id="BpScp0">
         <bpelx:annotation>
            <bpelx:pattern patternName="bpelx:email"/>
         </bpelx:annotation>
         <variables>
            <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
            <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
            <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
         </variables>
         <sequence name="Sequence1" id="BpSeq3">
            <assign name="EmailParamsAssign" id="BpAss3">
                                <copy>
                                    <from expression="string('Default')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                </copy>
                                <copy>
                                    <from expression="string('')"/>
                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                </copy>
                                <copy>
                                    <from expression="string('')"/>
                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                </copy>
                                <copy>
                                    <from expression="string('')"/>
                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                </copy>
                                <copy>
                                    <from expression="'New Active Directory - Service Account request rejected'" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                </copy>
                                <copy>
                                    <from expression="bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:Email')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                </copy>
                                <copy>
                                    <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), ', ', string('   '), '&lt;BR> &lt;BR> Your request for Active Directory - Service Account has been rejected. Reject details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', string('Active Directory - Service Account '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'),'&lt;BR> &lt;B>Justification: &lt;/B>', string('  '),  string('You have no Manager assigned.  Please check with &lt;B>wam_support@epa.gov&lt;/B>  to update your Manager name  and submit'), bpws:getVariableData('OIMServer'), string(' request again.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                </copy>
                                <copy>
                                    <from expression="string('text/html; charset=UTF-8')"/>
                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                </copy>
                            </assign><bpelx:exec name="RJ-NoManager" version="1.5" id="BxExe2">
                                setVariableData("EmailAttribute","REJECTED@aa-epa.gov");          
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");         
setVariableData("AdminGroupEmail","");        
setVariableData("commentc","");        
        
//String deptStatus = (String) getVariableData("ADSV_DEPT");                  
System.out.println("Entering the Manager is null flow");                  
                                                        
try {         
    
    
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();         
            String hostName = localMachine.getHostName().toString();         
            System.out.println("Hostname of local machine: " + hostName);         
            String host = hostName.substring(6, hostName.indexOf(".")-1);         
            System.out.println("Env of local machine: " + host);         
   
                          
            String  envPwd = (String) getVariableData("EnvPwd");        
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                   
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key ="",DbConnectionString="", DbUserId=""; // Staging                 
         
        
                        java.lang.Object userLogin = "";                                        
                        java.lang.Object isoManager = "";                                       
                        java.lang.Object managerOutcome = "";                                 
                        java.lang.Object rEmail = "";                           
                       // java.lang.Object managerComment = "";                         
                		                                  
                                                 
                                              
            Object obj = getVariableData("oimurl");                                                                                            
			String tempStr = obj.toString();                                   
			String[] tempArr = tempStr.split("//");                                   
			//oimURL = "t3://"+tempArr[1].split("/")[0]; 						                                  
			//oimURL ="t3://192.168.1.62:14000";           
                        oimURL = getVariableData("mcurl").toString();   
			System.out.println("oimURL is == "+oimURL);                                                 
                                                 
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                           
                        String authLoginConfig = "java.security.auth.login.config";                                                           
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                           
			// set up the environment for making the OIM API invocation                                                          
			                                                      
			java.util.Hashtable env = new java.util.Hashtable();                                                           
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                           
			oimInitialContextFactory);                                                           
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                           
			env.put(authLoginConfig, authLoginConfigPath);                                                           
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                         
			                                                      
			client.login(oimUserName, oimPassword.toCharArray());                                                        
			java.lang.Object roleXMLString = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestTarget");                                                      
			String roleString = ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                           
                        System.out.println("Role in NL1 is :- "+roleString);                                  
                        System.out.println("Before getting the request ID");                                   
                        //java.lang.Object requestIDXML = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestId");                                   
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                  
                        String RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                     
  			System.out.println("RequestID in NL1 is == "+RequestID);                                          
 	                userLogin =getVariableData("inputVariable", "payload",                                                    
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                        
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                      
                        System.out.println("User Login in N1 is:- "+usrLogin);                                     
                                             
						                    
						                    
 
 
				DbUserId = (String) getVariableData("DbUserId");   
				DbConnectionString = (String) getVariableData("DbUrl");   
				DbPassword = (String) getVariableData("DbPwd");	 
				 
				              
         
				String query3 = "update REQUEST set request_status = 'Request Rejected' where request_key = '"+RequestID+"'";             
				              
				System.out.println("The query3  is :-"+query3);           
				           
				           
				java.sql.Connection  con = null;                         
				java.sql.Statement stmt = null;              
				              
              
                   
				try {                   
					//Connecting to staging database and trying to execute update statement					                      
					Class.forName("oracle.jdbc.OracleDriver");                            
					con=java.sql.DriverManager.getConnection(DbConnectionString,DbUserId,DbPassword);              
					stmt=con.createStatement();               				              
					stmt.executeUpdate(query3);       
					System.out.println("The Request for "+RequestID+" set to Request Rejected because there is no Manager assigned, Email sent to the requester");					       
				}                          
				catch(Exception e){					                      
					System.out.println("Exception on trying to update database");                      
					System.out.println(e);                      
					e.printStackTrace();                       
					System.out.println("--------------------------------------");                      
                   
				}                            
				finally {                      
					stmt.close();                         
					con.close();                         
				}               
					              
					              
					              
					              
					              
						              
			//}			              
						              
	}catch (java.lang.Exception e){                                                  
                    e.printStackTrace();                                                  
            }
                            </bpelx:exec><invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService1" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv1"/><receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv1"/></sequence>
      </scope>
   </sequence></case>
            <otherwise>
                <bpelx:annotation>
                    <bpelx:documentation>
                        Continue
                    </bpelx:documentation>
                </bpelx:annotation>
                <sequence name="Sequence4" id="BpSeq4">
                    <switch name="Switch13" id="BpSwt1">
                        <case condition="bpws:getVariableData(&quot;ADSV_DEPT&quot;) = 'FALSE'">
                            <bpelx:annotation>
                                <bpelx:general>
                                    <bpelx:property name="userLabel">
                                        Department name is  NULL
                                    </bpelx:property>
                                </bpelx:general>
                            </bpelx:annotation><sequence id="BpSeq5">
      <assign id="BpAss4">
         <copy>
            <from expression="string('rejected')"/>
            <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
         </copy>
         <copy>
            <from expression="ora:getConversationId()"/>
            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
         </copy>
         <copy>
            <from expression="string('rejected')"/>
            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
         </copy>
      </assign>
      <scope name="Department_NULL" id="BpScp1">
         <bpelx:annotation>
            <bpelx:pattern patternName="bpelx:email"/>
         </bpelx:annotation>
         <variables>
            <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
            <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
            <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
         </variables>
         <sequence name="Sequence11" id="BpSeq6">
            <sequence name="Sequence1" id="BpSeq7">
               <assign name="EmailParamsAssign" id="BpAss5">
                                                <copy>
                                                    <from expression="string('Default')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                                </copy>
                                                <copy>
                                                    <from expression="string('')"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                                </copy>
                                                <copy>
                                                    <from expression="string('')"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                                </copy>
                                                <copy>
                                                    <from expression="string('')"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                                </copy>
                                                <copy>
                                                    <from expression="'New Active Directory - Service Account  request rejected'" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                                </copy>
                                                <copy>
                                                    <from expression="bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:Email')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                                </copy>
                                                <copy>
                                                    <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), ', ', string('   '), '&lt;BR> &lt;BR> Your request for Active Directory - Service Account has been rejected. Reject details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', string('Active Directory - Service Account '),'&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '),  string('You have no Department assigned.  Please check with &lt;B>wam_support@epa.gov&lt;/B>  to update your Department name  and submit'), bpws:getVariableData('OIMServer'), string(' request again.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                                </copy>
                                                <copy>
                                                    <from expression="string('text/html; charset=UTF-8')"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                                </copy>
                                            </assign>
               <bpelx:exec name="RJ-NoDept" version="1.5" id="BxExe3">
                                                setVariableData("EmailAttribute","REJECTED@aa-epa.gov");       
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");      
setVariableData("AdminGroupEmail","");     
setVariableData("commentc","");     
     
String deptStatus = (String) getVariableData("ADSV_DEPT");               
System.out.println("The department Status value before setting Enable :- "+deptStatus);               
                                                     
try {                            
            String  envPwd = (String) getVariableData("EnvPwd");     
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key ="",DbConnectionString="", DbUserId=""; // Staging              
      
     
                        java.lang.Object userLogin = "";                                     
                        java.lang.Object isoManager = "";                                    
                        java.lang.Object managerOutcome = "";                              
                        java.lang.Object rEmail = "";                        
                       // java.lang.Object managerComment = "";                      
                		                               
                                              
                                           
            Object obj = getVariableData("oimurl");                                                                                         
			String tempStr = obj.toString();                                
			String[] tempArr = tempStr.split("//");                                
			//oimURL = "t3://"+tempArr[1].split("/")[0]; 						                               
			//oimURL ="t3://192.168.1.62:14000";       
                        oimURL = getVariableData("mcurl").toString();   
			System.out.println("oimURL is == "+oimURL);                                              
                                              
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                        
                        String authLoginConfig = "java.security.auth.login.config";                                                        
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                        
			// set up the environment for making the OIM API invocation                                                       
			                                                   
			java.util.Hashtable env = new java.util.Hashtable();                                                        
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                        
			oimInitialContextFactory);                                                        
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                        
			env.put(authLoginConfig, authLoginConfigPath);                                                        
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                      
			                                                   
			client.login(oimUserName, oimPassword.toCharArray());                                                     
			java.lang.Object roleXMLString = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestTarget");                                                   
			String roleString = ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                        
                        System.out.println("Role in NL1 is :- "+roleString);                               
                        System.out.println("Before getting the request ID");                                
                        //java.lang.Object requestIDXML = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestId");                                
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                               
                        String RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                  
  			System.out.println("RequestID in NL1 is == "+RequestID);                                       
 	                userLogin =getVariableData("inputVariable", "payload",                                                 
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                     
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                   
                        System.out.println("User Login in N1 is:- "+usrLogin);                                  
                                          
						                 
						                  
 
 
				DbUserId = (String) getVariableData("DbUserId");   
				DbConnectionString = (String) getVariableData("DbUrl");   
				DbPassword = (String) getVariableData("DbPwd");	 
 
				 
				           
			//if (skipIsoImo.equalsIgnoreCase("TRUE")) { 			           
        
				String query3 = "";        
				if (deptStatus.equalsIgnoreCase("FALSE")) {        
					query3 = "update REQUEST set request_status = 'Request Rejected' where request_key = '"+RequestID+"'";        
				}      
				           
				System.out.println("The query3  is :-"+query3);        
				        
				        
				java.sql.Connection  con = null;                      
				java.sql.Statement stmt = null;           
				           
           
                
				try {                
					//Connecting to staging database and trying to execute update statement					                   
					Class.forName("oracle.jdbc.OracleDriver");                         
					con=java.sql.DriverManager.getConnection(DbConnectionString,DbUserId,DbPassword);           
					stmt=con.createStatement();               
					//query3 = "update REQUEST set request_status = 'Request Completed' where request_key = '"+RequestID+"'";  					           
					stmt.executeUpdate(query3);    
					System.out.println("The Request for "+RequestID+" set to Request Rejected");					    
				}                       
				catch(Exception e){					                   
					System.out.println("Exception on trying to update database");                   
					System.out.println(e);                   
					e.printStackTrace();                    
					System.out.println("--------------------------------------");                   
                
				}                         
				finally {                   
					stmt.close();                      
					con.close();                      
				}            
					           
					           
					           
					           
					           
						           
			//}			           
						           
	}catch (java.lang.Exception e){                                               
                    e.printStackTrace();                                               
            }
                                            </bpelx:exec>
               <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService1" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv2"/>
               <receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv2"/>
            </sequence>
         </sequence>
      </scope>
   </sequence></case>
                        <case condition="bpws:getVariableData(&quot;NO_REQUEST&quot;) = 'FALSE'">
                            <bpelx:annotation>
                                <bpelx:general>
                                    <bpelx:property name="userLabel">
                                        Previous Request Exists
                                    </bpelx:property>
                                </bpelx:general>
                            </bpelx:annotation><sequence name="Sequence12" id="BpSeq8"><assign id="BpAss6">
      <copy>
         <from expression="string('rejected')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
         <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
      </copy>
      <copy>
         <from expression="ora:getConversationId()"/>
         <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
      </copy>
      <copy>
         <from expression="string('rejected')"/>
         <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
      </copy>
   </assign><scope name="Previous_Request_Exists" id="BpScp2">
      <bpelx:annotation>
         <bpelx:pattern patternName="bpelx:email"/>
      </bpelx:annotation>
      <variables>
         <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
         <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
         <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
      </variables>
      <sequence name="Sequence1" id="BpSeq9">
         <assign name="EmailParamsAssign" id="BpAss7">
                                            <copy>
                                                <from expression="string('Default')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                            </copy>
                                            <copy>
                                                <from expression="string('')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                            </copy>
                                            <copy>
                                                <from expression="string('')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                            </copy>
                                            <copy>
                                                <from expression="string('')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                            </copy>
                                            <copy>
                                                <from expression="'New Active Directory - Service Account request rejected'" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                            </copy>
                                            <copy>
                                                <from expression="bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:Email')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                            </copy>
                                            <copy>
                                                <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), ', ', string('   '), '&lt;BR> &lt;BR> Your request for Active Directory - Service Account has been rejected. Reject details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', string('Active Directory - Service Account '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'),'&lt;BR> &lt;B>Justification: &lt;/B>', string('  '),  string('You have a previous  request'), string('  '), bpws:getVariableData('PREV_REQ'), string(' awaiting approval.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                            </copy>
                                            <copy>
                                                <from expression="string('text/html; charset=UTF-8')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                            </copy>
                                        </assign>
         <bpelx:exec name="RJ-Prev_Req_Exists" version="1.5" id="BxExe4">
                                            setVariableData("EmailAttribute","REJECTED@aa-epa.gov");         
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");        
setVariableData("AdminGroupEmail","");       
setVariableData("commentc","");                   
System.out.println("Rejecting the new duplicate request  ");                 
                                                       
try {                              
            String  envPwd = (String) getVariableData("EnvPwd");       
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                  
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key ="",DbConnectionString="", DbUserId=""; // Staging                
        
       
                        java.lang.Object userLogin = "";                                       
                        java.lang.Object isoManager = "";                                      
                        java.lang.Object managerOutcome = "";                                
                        java.lang.Object rEmail = "";                          
                       // java.lang.Object managerComment = "";                        
                		                                 
                                                
                                             
            Object obj = getVariableData("oimurl");                                                                                           
			String tempStr = obj.toString();                                  
			String[] tempArr = tempStr.split("//");                                  
			//oimURL = "t3://"+tempArr[1].split("/")[0]; 						                                 
			//oimURL ="t3://192.168.1.62:14000";            
                        oimURL = getVariableData("mcurl").toString();   
			System.out.println("oimURL is == "+oimURL);                                                
                                                
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                          
                        String authLoginConfig = "java.security.auth.login.config";                                                          
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                          
			// set up the environment for making the OIM API invocation                                                         
			                                                     
			java.util.Hashtable env = new java.util.Hashtable();                                                          
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                          
			oimInitialContextFactory);                                                          
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                          
			env.put(authLoginConfig, authLoginConfigPath);                                                          
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                        
			                                                     
			client.login(oimUserName, oimPassword.toCharArray());                                                       
			java.lang.Object roleXMLString = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestTarget");                                                     
			String roleString = ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                          
                        System.out.println("Role in NL1 is :- "+roleString);                                 
                        System.out.println("Before getting the request ID");                                  
                        //java.lang.Object requestIDXML = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestId");                                  
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                 
                        String RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                    
  			System.out.println("RequestID in NL1 is == "+RequestID);                                         
 	                userLogin =getVariableData("inputVariable", "payload",                                                   
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                       
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                     
                        System.out.println("User Login in N1 is:- "+usrLogin);                                    
                                            
						                   
						                         
 
 
				DbUserId = (String) getVariableData("DbUserId");   
				DbConnectionString = (String) getVariableData("DbUrl");   
				DbPassword = (String) getVariableData("DbPwd");	 
 
 
				 
				             
			//if (skipIsoImo.equalsIgnoreCase("TRUE")) { 			             
                   
				String	query3 = "update REQUEST set request_status = 'Request Rejected' where request_key = '"+RequestID+"'";          
      
				             
				System.out.println("The query3  is :-"+query3);          
				          
				          
				java.sql.Connection  con = null;                        
				java.sql.Statement stmt = null;             
				             
             
                  
				try {                  
					//Connecting to staging database and trying to execute update statement					                     
					Class.forName("oracle.jdbc.OracleDriver");                           
					con=java.sql.DriverManager.getConnection(DbConnectionString,DbUserId,DbPassword);             
					stmt=con.createStatement();                 
					//query3 = "update REQUEST set request_status = 'Request Completed' where request_key = '"+RequestID+"'";  					             
					stmt.executeUpdate(query3);      
					System.out.println("The Request for "+RequestID+" set to Request Rejected because another request "+getVariableData("PREV_REQ")+ " is pending");					      
				}                         
				catch(Exception e){					                     
					System.out.println("Exception on trying to update database");                     
					System.out.println(e);                     
					e.printStackTrace();                      
					System.out.println("--------------------------------------");                     
                  
				}                           
				finally {                     
					stmt.close();                        
					con.close();                        
				}              
					             
					             
					             
					             
					             
						             
			//}			             
						             
	}catch (java.lang.Exception e){                                                 
                    e.printStackTrace();                                                 
            }
                                        </bpelx:exec>
         <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService1" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv3"/><receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv3"/></sequence>
   </scope></sequence></case>
                        <otherwise><empty name="Empty2" id="BpEmp0"/></otherwise>
                    </switch>
                </sequence>
            </otherwise>
        </switch>
        <invoke name="Invoke1" partnerLink="RequestWSPartnerLink" inputVariable="RequestID" outputVariable="Invoke1_getRequestDetails_OutputVariable" portType="ns15:RequestDataService" operation="getRequestDetails" id="BpInv4"/><assign name="Assign1" id="BpAss8">
            <copy>
                <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="Invoke1_getRequestDetails_OutputVariable" part="RequestData" query="/ns16:RequestData/ns16:Justification"/>
                <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="madd"/>
            </copy>
        </assign>
        <bpelx:exec name="Native_Logic" version="1.5" id="BxExe5">
            System.out.println("Before CyberArk Admin Approval");                                              
setVariableData("SKIP_ISOIMO","FALSE");                                    
String adminGroup =  "";                
String valueS = "";             
String userIDS = "";          
String RequestID ="";      
String templateUserNames = "";  
String OIM_Server = "";   
              
                
                                 
//System.out.println("Column Count:- after DKOTLIN, with new OIM URL CODE***************");                                                    
                                                    
/*                                                                   
Custom operations                                                                   
*/                                                                   
try {                                                               
            java.lang.Object managerLogin = "";                                                          
            java.lang.Object userLogin = "";                                       
			java.lang.Object loginUser = "";			                                     
            java.lang.Object isoManager = "";                                     
			java.lang.Object procState = "";                        
			java.lang.Object reqModel = "";	 
			java.lang.Object UserDisplayName = "";				 
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                                 
            String hostName = localMachine.getHostName().toString();                                 
            System.out.println("Hostname of local machine: " + hostName);                                 
            String host = hostName.substring(6, hostName.indexOf(".")-1);                                 
            System.out.println("Env of local machine: " + host);                                 
                              
            String  envPwd = (String) getVariableData("EnvPwd");                                                                  
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ; // Staging                                          
                                                             
          /**  oracle.security.jps.JpsContext ctx =                                                                   
            oracle.security.jps.JpsContextFactory.getContextFactory().getContext();                                                                   
                                                                   
            final oracle.security.jps.service.credstore.CredentialStore cs =                                                                   
		(oracle.security.jps.service.credstore.CredentialStore)                                                                   
            ctx.getServiceInstance(oracle.security.jps.service.credstore.CredentialStore.class);                                                                   
            oracle.security.jps.service.credstore.CredentialMap cmap =                                                                   
             cs.getCredentialMap("oracle.oim.sysadminMap");                                                                   
            oracle.security.jps.service.credstore.Credential cred = cmap.getCredential("sysadmin");                                                                   
            if (cred instanceof oracle.security.jps.service.credstore.PasswordCredential)                                                              
                {                                                                   
                    oracle.security.jps.service.credstore.PasswordCredential pcred =                                                                   
                    (oracle.security.jps.service.credstore.PasswordCredential)cred;                                                                   
                    char[] p = pcred.getPassword();                                                                   
                    oimUserName = pcred.getName();                                                                   
                    oimPassword = new String(p);                                                                   
                }                                                     
**/                                                   
                                                           
      //get oimurl                                                           
      Object obj = getVariableData("oimurl");                                                   
      String tempStr = obj.toString();                                                  
      String[] tempArr = tempStr.split("//");                                                      
      oimURL = getVariableData("mcurl").toString();                       
	                                                          
      System.out.println("oimURL in NativeLogic is :- "+oimURL);                                                
                                            
      String roleValue = "Local Service Account";                                                
      setVariableData("groupName",roleValue);                                              
      System.out.println("The groupName value is :-"+roleValue);            		                                                                   
            String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                                   
            String authLoginConfig = "java.security.auth.login.config";                                                                   
            String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                                   
			// set up the environment for making the OIM API invocation                                                                   
			java.util.Hashtable env = new java.util.Hashtable();                                                                   
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                                   
			oimInitialContextFactory);                                                                   
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                                   
			env.put(authLoginConfig, authLoginConfigPath);                                                                   
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                                   
			client.login(oimUserName, oimPassword.toCharArray());                                                              
                                                             
                                                             
                        Thor.API.Operations.tcUserOperationsIntf userintf = client.getService(Thor.API.Operations.tcUserOperationsIntf.class);                                                                   
	                managerLogin =getVariableData("inputVariable", "payload",                                                                   
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:ManagerLogin");                                                       
 	                userLogin =getVariableData("inputVariable", "payload",                                                                   
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                                                            
 	                loginUser =getVariableData("inputVariable", "payload",                                                                 
	        		   "/ns3:process/ns4:RequesterDetails/ns4:Login"); 	 
 	                UserDisplayName =getVariableData("inputVariable", "payload",                                                                 
	        		   "/ns3:process/ns4:RequesterDetails/ns4:DisplayName"); 					    
                   // procState =getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:systemAttributes/task:state");                        
 	                reqModel =getVariableData("inputVariable", "payload",                                                                 
	        		   "/ns3:process/ns4:RequestModel"); 				                        		                                                                               
                        ///ns3:process/ns4:RequestTarget                                                                 
                        java.lang.Object roleXMLString = getVariableData("inputVariable", "payload",                                                                   
	        		   "/ns3:process/ns4:RequestTarget");                                                                
                                                                   
                        String roleString =  ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                                   
                                                            
                        System.out.println("Role in NativeLogic is :- "+roleString);                                     
                       // Object mgrLogin = getVariableData("commentc");                                        
						Object loginMgr = getVariableData("inputVariable", "payload",                                                                 
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:ManagerLogin");                                      
					   String mgrLogin =  ((oracle.xml.parser.v2.XMLElement)loginMgr).getText();                                      
                                                                 
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                     
						String loginUsr =  ((oracle.xml.parser.v2.XMLElement)loginUser).getText();  
						String loginUsrDisplayName =  ((oracle.xml.parser.v2.XMLElement)UserDisplayName).getText(); 						 
						String requestModel =  ((oracle.xml.parser.v2.XMLElement)reqModel).getText(); 							                        
						//	String processState =  ((oracle.xml.parser.v2.XMLElement)procState).getText();						                                         
                          
                          
						                          
                        System.out.println("User Login in NativeLogic is:- "+usrLogin);                                     
						System.out.println("The Login Requester in NativeLogic is:- "+loginUsr); 						                                     
					//	System.out.println("Process State in NativeLogic is:- "+processState);                               
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                                        
                        RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                                           
						System.out.println("RequestID in NativeLogic is == "+RequestID); 						                          
						System.out.println("The Request Model in NativeLogic is == "+requestModel);          						                                     
                        java.util.HashMap userMap = new java.util.HashMap();                              
						java.util.HashMap&lt;String, String> svcMap = new java.util.HashMap&lt;String, String>();						 
                        System.out.println("Manager Login in NativeLogic is:- "+mgrLogin);                                         
                                                             
                
                
	             try {                                                                   
                
                                        Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                           
                                        com.thortech.xl.dataaccess.tcDataProvider dbProvider = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                                               
										String query = "SELECT  e.PRIMARY_LSA_LOGINID, u.usr_udf_department FROM usr u ,EPA_SECURITY_OFFICERS e where u.usr_login ='"+usrLogin+"'" + " and u.usr_status= 'Active' AND e.program = substr(u.usr_udf_department,1,DECODE(instr(u.usr_udf_department,'-',1,1),0,length(u.usr_udf_department) + 1,instr(u.usr_udf_department,'-',1,1)) - 1)";                         
										                        
                                        System.out.println("query in NL1 is == "+query);                                                                     
                                        com.thortech.xl.dataaccess.tcDataSet usersDataSet = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                          
                                        usersDataSet.setQuery(dbProvider, query);                                                                           
                                        usersDataSet.executeQuery();                                                                          
                                                                                                                  
                                        int numColumns = usersDataSet.getColumnCount();                                                                          
                                        int numRecords = usersDataSet.getTotalRowCount();                                                                          
                                                                                    
                                        System.out.println("Column Count:- "+numColumns);                                                                    
                                        System.out.println("Record Count:- "+numRecords);                                                                
                                                                                                
                                        String columnName = "";                                                                
                                        //String value = "";                               
										String  value1 = "";                       
										String	usrDept = "";                       
                                                                                                
                                        //iterate through each record                                                                          
                                        for(int i = 0; i &lt; numRecords; i++)                                                                          
                                        {                                                                          
                                                usersDataSet.goToRow(i);                                                                          
                                                //iterate through each column of a record                                                                          
                                                for(int j = 0; j &lt; numColumns; j++)                                                                          
                                                {                                                                          
                                                    columnName = usersDataSet.getColumnName(j);                                                                          
                                                    valueS = usersDataSet.getString(j);                            
													if (valueS != "" )                            
												{                            
													value1 = usersDataSet.getString(j) + "," +getVariableData("AdminGroupEmail");                       
													usrDept = usersDataSet.getString(j+1);                       
													setVariableData("USR_DEPT",usrDept);                                       
													System.out.println("All AD Approvers:- "+value1+ " for "+usrDept);                     
													break;                      
												}else                             
													{                            
													value1 = getVariableData("AdminGroupEmail").toString();                                      
													setVariableData("USR_DEPT","TRUE");                                       
													System.out.println("All AD Approvers:- "+value1);                      
                                                                                                        break;                      
													                            
													}                            
                                                                                         
                                                }                                                                          
                                        }                                                         
                                                                        
                                        boolean commaVal = valueS.contains(",");                                                        
                                        String [] arrOfStr = valueS.split(",");                                                        
                                       // String userIDS = "";                                                       
                                        if (commaVal) {                                                        
                                            for (String a : arrOfStr){                                                        
                                                System.out.println("Users.User ID: "+a);                                                        
                                                userIDS += "'"+a+"',";                                                       
                                            }                                                        
                                            userIDS = userIDS.substring(0,userIDS.length()-1);                                                       
                                        }else if(null!= valueS){                                                         
                                            System.out.println("Users.User ID: "+valueS);                                                       
                                            userIDS = "'"+valueS+"'";                                                       
                                        } else {                             
											System.out.println("AD Manager missing or Disabled");                                
										}	                
                
										                
                                                              
	                 }                                                                   
	             catch (java.lang.Exception e)                                                                    
                    {                                                                   
	              e.printStackTrace();                                                                   
	             }                 
                       	                                    
                                    
                                      // For sending emails                
                                      try               
                                            {                                                                                   
                                                Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                   
                                                com.thortech.xl.dataaccess.tcDataProvider dbProvider2 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                  
                                                String query2 = "select usr_email,usr_login from usr where usr_login in ("+userIDS+") and usr_status ='Active'";                                                         
                                                System.out.println("Query2 in NL1 is == "+query2);                                                           
                                                com.thortech.xl.dataaccess.tcDataSet usersDataSet2 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                  
                                                usersDataSet2.setQuery(dbProvider2, query2);                                                                   
                                                usersDataSet2.executeQuery();                                                                  
                                                                                                                          
                                                                                                              
                                                int numColumns2 = usersDataSet2.getColumnCount();                                                                  
                                                int numRecords2 = usersDataSet2.getTotalRowCount();                                                           
                                                                         
                                                System.out.println("Column Count:- "+numColumns2);                                                             
                                                System.out.println("Record Count:- "+numRecords2);                                                        
                                                String email = "";                            
												String usr_names = "";                           
												String appNames  = "";												                           
                                                //iterate through each record                           
												if (numRecords2 > 0)                           
												{                           
													for(int r = 0; r &lt; numRecords2; r++)                                                                  
													{                                                                  
															usersDataSet2.goToRow(r);                                                                  
													                           
														//iterate through each column of a record                                                                  
														for(int s = 0; s &lt; numColumns2; s++)                                                                  
														{                              
															if (s==0)                           
															{                           
																email += usersDataSet2.getString(s) +",";                           
															}else{                           
															usr_names += usersDataSet2.getString(s) +",";													                           
															}                           
																				                           
														}                                                        
													}                                                       
													email = email.substring(0,email.length()-1);                            
												   usr_names =usr_names.substring(0,usr_names.length()-1);    
													templateUserNames = usr_names;  
													setVariableData("CYA_ADMINS",usr_names); 
													appNames = usr_names + "," +getVariableData("AdminGroupEmail");                            
													setVariableData("commentc",appNames);                                       
													System.out.println("Final AD Approvers:- "+appNames);													                              
												}else                           
												{                           
													appNames = getVariableData("AdminGroupEmail").toString();                            
													setVariableData("commentc",appNames);                                       
													System.out.println("Only AdminGroup Approvers Assigned :- "+appNames);													                           
												                           
												}                           
											   if (email != "")                          
												{                          
												setVariableData("EmailAttribute",email);                                                       
															System.out.println("Email  sent to  :-"+email);                          
												}else                          
												{                          
												                       
															System.out.println("AD Approver is Null or disabled, Email  sent to wam_support");															                          
												                          
												}                          
                                    }                                                         
                                catch(com.thortech.xl.dataaccess.tcDataSetException e4)                                                         
                                {                                                         
                                    e4.printStackTrace();                                                          
                                }                  
                
                                           
                                                        
               try                                                         
                    {                                                        
                                                                                
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                  
				com.thortech.xl.dataaccess.tcDataProvider dbProvider1 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                 
                                String query1 = "select  LKV_DECODED from LKV where LKV_ENCODED ='OIM_Server'";                                                                  
                                System.out.println("Query1 in NativeLogic is == "+query1);                                                          
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                 
				usersDataSet1.setQuery(dbProvider1, query1);                                                                  
				usersDataSet1.executeQuery();                                                                 
					                                                                 
		                                                                             
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                 
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                          
                                                        
                                System.out.println("Column Count:- "+numColumns1);                                                            
                                System.out.println("Record Count:- "+numRecords1);                                                            
                                //iterate through each record                                                                 
                             for(int k = 0; k &lt; numRecords1; k++)                                                                 
                                {                                                                 
		                usersDataSet1.goToRow(k);                                                                 
		                                                                  
		                //iterate through each column of a record                                                                 
		                for(int m = 0; m &lt; numColumns1; m++)                                                                 
		                {                                                                 
		                    String columnName = usersDataSet1.getColumnName(m);                                                                 
		                    String value = usersDataSet1.getString(m);                                                                 
                                    setVariableData("OIMServer",value);    
									OIM_Server	= 	value;							 
                                System.out.println("The OIMServer value is :-"+value);                                                                 
                                                                
		                }                                                                 
		            }                                                                 
                    }                                                        
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                        
                {                                                        
                    e3.printStackTrace();                                                         
                }                                                        
                             
               try                                                         
                    {                                                        
                                                                                
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                  
				com.thortech.xl.dataaccess.tcDataProvider dbProvider1 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                 
                                String queryE = "select  LKV_DECODED from LKV where LKV_ENCODED ='SupportEmail'";                                                                  
                                System.out.println("QueryE in NativeLogic is == "+queryE);                                                          
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                 
				usersDataSet1.setQuery(dbProvider1, queryE);                                                                  
				usersDataSet1.executeQuery();                                                                 
					                                                                 
		                                                                             
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                 
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                          
                                                        
                                System.out.println("Column Count:- "+numColumns1);                                                            
                                System.out.println("Record Count:- "+numRecords1);                                                            
                                //iterate through each record                                                                 
                             for(int k = 0; k &lt; numRecords1; k++)                                                                 
                                {                                                                 
		                usersDataSet1.goToRow(k);                                                                 
		                                                                  
		                //iterate through each column of a record                                                                 
		                for(int m = 0; m &lt; numColumns1; m++)                                                                 
		                {                                                                 
		                    String columnName = usersDataSet1.getColumnName(m);                                                                 
		                    String value = usersDataSet1.getString(m);                                                                 
                                    setVariableData("SupportEmail",value);                                                                   
                                System.out.println("The OIMServer value is :-"+value);                                                                 
                                                                
		                }                                                                 
		            }                                                                 
                    }                                                        
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                        
                {                                                        
                    e3.printStackTrace();                                                         
                }                              
                				                				                   
               try                                                         
                    {                                                        
                                                                                
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                  
				com.thortech.xl.dataaccess.tcDataProvider svcProvider = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                 
                                //String svcQuery = "select  LKV_DECODED from LKV where LKV_ENCODED ='SupportEmail'";           
												String svcQuery =  "select RBED_ENTITY_FIELD_NAME, RBED_ENTITY_FIELD_VALUE from REQUEST_BENEFICIARY_ENTITYDATA where rbed_rbe_key in (select rbe_key from REQUEST_BENEFICIARY_ENTITIES where rbe_request_key='" + RequestID + "')";								          
                                System.out.println("svcQuery in NativeLogic is == "+svcQuery);                           
								          
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                 
				usersDataSet1.setQuery(svcProvider, svcQuery);                                                                  
				usersDataSet1.executeQuery();                                                                 
					                                                                 
		                                                                             
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                 
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                          
                                                        
                                System.out.println("Column Count:- "+numColumns1);                                                            
                                System.out.println("Record Count:- "+numRecords1);                                                            
                                //iterate through each record            
                                String userSvc = "";              
                             for(int k = 0; k &lt; numRecords1; k++)                                                                  
                                {                                                                 
		                usersDataSet1.goToRow(k);                                                                 
                                                
		                //iterate through each column of a record                                                                 
		                for(int m = 0; m &lt; numColumns1-1; m++)                                                                 
		                {                                                                 
		                    String columnName = usersDataSet1.getString(0);                                                                 
		                    String value = usersDataSet1.getString(1);         
                                             
                                    if (!(columnName.equals("AD Server") || columnName.equals("#endDate") || columnName.equals("#startDate")))          
                                  {         
     
									 userSvc += columnName +":-- " + value + "&lt;BR>";   
									 svcMap.put(columnName,value);  
										 
									if (columnName.equals("ServiceAccountName")) 
									{ 
										setVariableData("SVC_ACC",value); 
									} 
     
                                 }                                                                                                                                                                     
		                }        
						          
		            }          
							userSvc = userSvc.substring(0,userSvc.length()-1);           
							setVariableData("ServiceDetails",userSvc);           
                            System.out.println("The Service request details :-"+userSvc); 							          
                    }                                                        
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                        
                {                                                        
                    e3.printStackTrace();                                                         
                }           
  
  
             try                                                                      
                   {                                                                     
                                                                                             
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client); 	   
							oracle.iam.notification.api.NotificationService notsvc = client.getService(oracle.iam.notification.api.NotificationService.class);   
							oracle.iam.notification.vo.NotificationEvent notevent = new oracle.iam.notification.vo.NotificationEvent();	 							  
							java.util.HashMap templateParams = new java.util.HashMap();  
							templateParams.put("UserId",usrLogin); 
							templateParams.put("UserName",loginUsrDisplayName);							 
							templateParams.put("RequestId",RequestID); 
							templateParams.put("OIM_Server",OIM_Server); 
							templateParams.put("Justification",getVariableData("madd"));							 
							String templateName = "";  
							//String recEmail = getVariableData("EmailAttribute").toString();  
							String[] userIdEmails = { usrLogin };  
							String[] receiverUserIds = templateUserNames.split(",");  
  
  
               try                                                         
                    {                                                        
                                                                                
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                  
				com.thortech.xl.dataaccess.tcDataProvider svcProvider = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                 
                                String svcQuery = "select LKV_ENCODED, LKV_DECODED from LKV where LKU_KEY =(select LKU_KEY from lku where lku.lku_type_string_key = 'LSCYTemplatesParams') and (LKV_ENCODED like 'Lsa%'  or LKV_ENCODED like 'Usr%')";           
                                System.out.println("svcQuery in NativeLogic is == "+svcQuery);                           
								          
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                 
				usersDataSet1.setQuery(svcProvider, svcQuery);                                                                  
				usersDataSet1.executeQuery();                                                                 
					                                                                 
		                                                                             
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                 
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                          
                                                        
                                System.out.println("Column Count:- "+numColumns1);                                                            
                                System.out.println("Record Count:- "+numRecords1);                                                            
                                //iterate through each record            
                                String userSvc = "";       
							//	java.util.ArrayList&lt;java.lang.String> listTemplate = new ArrayList&lt;java.lang.String>();  
							String listTemplate = "";  
                             for(int k = 0; k &lt; numRecords1; k++)                                                                  
                                {                                                                 
		                usersDataSet1.goToRow(k);                                                                 
                                                
		                //iterate through each column of a record                                                                 
		                for(int m = 0; m &lt; numColumns1-1; m++)                                                                 
		                {                                                                 
		                    String columnName = usersDataSet1.getString(0);                                                                 
		                    String value = usersDataSet1.getString(1);         
										System.out.println("The columnName is "+columnName) ;  
										System.out.println("The value is "+value);							  
                                             
                                  //  if ((columnName.equals("ManagerTemplate") ))  
									if ((columnName.contains("Template") ))   
                                  {         
										System.out.println("The Template Name is "+value) ;  
										System.out.println("The UserIds are "+ receiverUserIds);  
										System.out.println("The UserIds are Done");										  
										//listTemplate.add(value);  
										listTemplate += value + ",";  
										//templateName = value;  
										//notevent.setTemplateName(value);										  
										//notevent.setUserIds(receiverUserIds);   
										  
									  
                                   }else {  
										System.out.println("The Param value is "+ value);   
										templateParams.put(columnName,value);   
										  
								   }  
			  
								     
		                }  
							notevent.setSender(null);   
							notevent.setParams(templateParams);   
  
						  
						          
		            }   
 
							java.util.Set&lt;java.util.Map.Entry&lt;String,String>> s = svcMap.entrySet();  
							for (java.util.Map.Entry&lt;String,String> entry: s){  
							  templateParams.put(entry.getKey(),entry.getValue());  
							System.out.println("ParamValues for "+entry.getKey().toString()+ "," +entry.getValue().toString()); 							   
							}						 
							listTemplate = listTemplate.substring(0,listTemplate.length()-1);  
							String[] parList = listTemplate.split(",");  
					        for(String template:parList)  
							{  
							notevent.setTemplateName(template); 
							if ((template.contains("Usr") )){ 
							notevent.setUserIds(userIdEmails);  
							} else { 
							notevent.setUserIds(receiverUserIds);  
							} 
							System.out.println("Sending Email for "+template);   
							notsvc.notify(notevent);								  
							}  
						          
                    }                                                        
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                        
                {                                                        
                    e3.printStackTrace();                                                         
                }    
  
					                                                                            
   
                    }                                                                     
                catch(Exception e4)                                                                     
                {                                                                     
                    e4.printStackTrace();                                                                      
                }                                                     
     				                                 
                    client.logout();                                                                 
    }                                                                   
 catch (java.lang.Exception e)                                                                   
 {                                                                   
    System.out.println("----------------------");                                                                   
    e.printStackTrace();                                                                   
    System.out.println("----------------------");                                                                   
}
        </bpelx:exec>
        <!-- 
          Asynchronous callback to the requester. (Note: the callback location and correlation id is transparently handled using WS-addressing.)
        -->
        <scope name="ApprovalTask_1" xmlns:wf="http://schemas.oracle.com/bpel/extension/workflow" wf:key="ApprovalTask_1_globalVariable" id="BpScp3">
            <bpelx:annotation>
                <bpelx:pattern patternName="bpelx:workflow"/>
            </bpelx:annotation>
            <variables>
                <variable name="initiateTaskInput" messageType="ns2:initiateTaskMessage"/>
                <variable name="initiateTaskResponseMessage" messageType="ns2:initiateTaskResponseMessage"/>
            </variables>
            <sequence id="BpSeq10">
                <switch name="Switch2" id="BpSwt2">
                    <case condition="bpws:getVariableData(&quot;RequestByManager&quot;) = 'YES'">
                        <bpelx:annotation>
                            <bpelx:general>
                                <bpelx:property name="userLabel">
                                    Request By Manager
                                </bpelx:property>
                            </bpelx:general>
                        </bpelx:annotation>
                        <sequence name="Sequence14" id="BpSeq11">
                            <empty name="Empty1" id="BpEmp1"/>
                        </sequence>
                    </case>
                    <case condition="(bpws:getVariableData(&quot;ADSV_DEPT&quot;) = 'TRUE' and  bpws:getVariableData(&quot;ADSV_ACCOUNT&quot;) != 'DISABLED' )">
                        <bpelx:annotation>
                            <bpelx:general>
                                <bpelx:property name="userLabel">
                                    Department is Available
                                </bpelx:property>
                            </bpelx:general>
                        </bpelx:annotation><scope name="Pmompt_Manager" id="BpScp4">
      <bpelx:annotation>
         <bpelx:pattern patternName="bpelx:email"/>
      </bpelx:annotation>
      <variables>
         <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
         <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
         <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
      </variables>
      <sequence name="Sequence2" id="BpSeq12">
         <assign name="EmailParamsAssign" id="BpAss9">
                                    <copy>
                                        <from expression="string('Default')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(' A new ', bpws:getVariableData('groupName') , '  request submitted for  ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(' &lt;BR> A new request for ',bpws:getVariableData('groupName'),'  is awaiting your approval.  &lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'),'&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Service Details: &lt;/B>',string('&lt;BR> '), bpws:getVariableData('ServiceDetails'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to Approve or Reject the request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('text/html; charset=UTF-8')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                    </copy>
                                </assign>
         <assign name="EmailParamsAssign" id="BpAss10">
                                    <copy>
                                        <from expression="string('Default')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat( 'New ', bpws:getVariableData('groupName'), '  request submitted for  ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                    </copy>
                                    <copy>
                                        <from expression="bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:Email')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), ', ', string('   '), '&lt;BR> &lt;BR> Your request for ', bpws:getVariableData('groupName'), '  has been submitted. Request details are provided below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Service Details: &lt;/B>',string(' &lt;BR> '), bpws:getVariableData('ServiceDetails'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to track your request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('text/html; charset=UTF-8')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                    </copy>
                                </assign>
      </sequence>
   </scope></case>
                    <case condition="bpws:getVariableData(&quot;ADSV_ACCOUNT&quot;) = 'DISABLED' ">
                        <bpelx:annotation>
                            <bpelx:general>
                                <bpelx:property name="userLabel">
                                    User Status Disabled
                                </bpelx:property>
                            </bpelx:general>
                        </bpelx:annotation>
                        <scope name="Pmompt_Manager_Dis" id="BpScp5">
      <bpelx:annotation>
         <bpelx:pattern patternName="bpelx:email"/>
      </bpelx:annotation>
      <variables>
         <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
         <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
         <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
      </variables>
      <sequence name="Sequence2" id="BpSeq13">
         <assign name="EmailParamsAssign" id="BpAss11">
                                    <copy>
                                        <from expression="string('Default')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(' Request to enable  ', bpws:getVariableData('groupName'), ' for  ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), string(' '))"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                    </copy>
                                    <copy>
                                        <from expression="(concat(' &lt;BR> A request to enable an ',bpws:getVariableData('groupName'),' that is disabled due to 30 days of  inactivity is awaiting  your approval. &lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '),string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Service Details:- &lt;/B>',string('&lt;BR>  '), bpws:getVariableData('ServiceDetails'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to Approve or Reject the request.')))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('text/html; charset=UTF-8')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                    </copy>
                                </assign>
         <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService2" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv5"/>
         <assign name="EmailParamsAssign" id="BpAss12">
                                    <copy>
                                        <from expression="string('Default')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat( 'Request to enable ', bpws:getVariableData('groupName'), ' for ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                    </copy>
                                    <copy>
                                        <from expression="bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:Email')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), ', ', string('   '), '&lt;BR> &lt;BR> Your request to enable your ', bpws:getVariableData('groupName'), '  has been submitted. Request details are provided below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Service Details: &lt;/B>',string('&lt;BR> '), bpws:getVariableData('ServiceDetails'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to track your request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('text/html; charset=UTF-8')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                    </copy>
                                </assign>
         <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService2" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv6"/>
      </sequence>
   </scope></case>
                </switch>
                <switch name="Switch14" id="BpSwt3">
                    <case condition=" bpws:getVariableData(&quot;RequestByManager&quot;) = 'YES'">
                        <bpelx:annotation>
                            <bpelx:general>
                                <bpelx:property name="userLabel">
                                    Manager Request
                                </bpelx:property>
                            </bpelx:general>
                        </bpelx:annotation>
                        <sequence name="Sequence15" id="BpSeq14"><empty name="Empty1" id="BpEmp2"/>
                        </sequence>
                    </case>
                    <otherwise><sequence name="Sequence13" id="BpSeq15"><assign name="ApprovalTask_1_AssignTaskAttributes" id="BpAss13">
                                <copy>
                                    <from expression="number(3)" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:priority"/>
                                </copy>
                                <copy>
                                    <from>
            <payload xmlns="http://xmlns.oracle.com/bpel/workflow/task">
 <Parameter1/>
 <RequestID/>
 <RequestModel/>
 <RequestTarget/>
 <url/>
	<RequesterDetails xmlns="http://xmlns.oracle.com/request/RequestDetails"/> 
	<BeneficiaryDetails xmlns="http://xmlns.oracle.com/request/RequestDetails"/> 
	<ObjectDetails xmlns="http://xmlns.oracle.com/request/RequestDetails"/> 
	<OtherDetails xmlns="http://xmlns.oracle.com/request/RequestDetails"/> 
 <RequesterDisplayName/>
 <BeneficiaryDisplayName/>
 <Requester/>
</payload>
         </from>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestID"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:RequestID"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestModel"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:RequestModel"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestTarget"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:RequestTarget"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:url"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:url"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/ns4:RequesterDetails"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:BeneficiaryDetails"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/ns4:BeneficiaryDetails"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:ObjectDetails"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/ns4:ObjectDetails"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:OtherDetails"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/ns4:OtherDetails"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails/ns4:DisplayName"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:RequesterDisplayName"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:BeneficiaryDisplayName"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails/ns4:Login"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:Requester"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestID"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:identificationKey"/>
                                </copy>
                                <copy>
                                    <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails/ns4:Login"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:creator"/>
                                </copy>
                                <copy bpelx:ignoreMissingFromData="yes" bpelx:insertMissingToData="yes">
                                    <from variable="commentc"/>
                                    <to variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:Parameter1"/>
                                </copy>
                                <copy bpelx:insertMissingToData="yes">
                                    <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="EmailAttribute"/>
                                    <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:Parameter2"/>
                                </copy>
                                <copy bpelx:ignoreMissingFromData="yes" bpelx:insertMissingToData="yes">
                                    <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="OIMServer"/>
                                    <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="initiateTaskInput" part="payload" query="/ns2:initiateTask/task:task/task:payload/task:Parameter4"/>
                                </copy>
                            </assign><invoke name="initiateTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskService" operation="initiateTask" inputVariable="initiateTaskInput" outputVariable="initiateTaskResponseMessage" id="BpInv7"/><receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv4"/></sequence></otherwise>
                </switch>
            </sequence>
        </scope>
        <switch name="taskSwitch" id="BpSwt4">
            <case condition=" bpws:getVariableData(&quot;RequestByManager&quot;) = 'YES' ">
                <bpelx:annotation>
                    <bpelx:general>
                        <bpelx:property name="userLabel">
                            Manager Request
                        </bpelx:property>
                    </bpelx:general>
                </bpelx:annotation><empty name="Empty1" id="BpEmp3"/></case>
            <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:state') = 'WITHDRAWN'">
                <bpelx:annotation>
                    <bpelx:general>
                        <bpelx:property name="userLabel">
                            Task is withdrawn
                        </bpelx:property>
                    </bpelx:general>
                </bpelx:annotation><sequence id="BpSeq16">
      <assign id="BpAss14">
         <copy>
            <from expression="string('rejected')"/>
            <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
         </copy>
         <copy>
            <from expression="ora:getConversationId()"/>
            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
         </copy>
         <copy>
            <from expression="string('rejected')"/>
            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
         </copy>
      </assign>
      <scope name="Benificiary_Withdrawn" id="BpScp6">
         <bpelx:annotation>
            <bpelx:pattern patternName="bpelx:email"/>
         </bpelx:annotation>
         <variables>
            <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
            <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
            <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
         </variables>
         <sequence name="Sequence5" id="BpSeq17">
            <sequence name="Sequence1" id="BpSeq18">
               <assign name="EmailParamsAssign" id="BpAss15">
                                    <copy>
                                        <from expression="string('Default')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(bpws:getVariableData('groupName'), ' request has been withdrawn')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat( bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), '  ', string(' has  withdrawn '), '   ', bpws:getVariableData('groupName'), '  request. &lt;BR>&lt;BR>Request details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Service Details: &lt;/B>',string('&lt;BR> '), bpws:getVariableData('ServiceDetails'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('text/html; charset=UTF-8')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                    </copy>
                                </assign>
               <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService1" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv8"/><receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv5"/></sequence>
            <bpelx:exec name="WD-1" version="1.5" id="BxExe6">
                                setVariableData("EmailAttribute","REJECTED@aa-epa.gov");   
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov"); 
setVariableData("AdminGroupEmail","");
                            </bpelx:exec>
         </sequence>
      </scope>
   </sequence></case>
            <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:outcome') = 'REJECT'">
                <bpelx:annotation>
                    <bpelx:pattern>Task outcome is REJECT</bpelx:pattern>
                    <bpelx:general>
                        <bpelx:property name="userLabel">Task outcome is REJECT</bpelx:property>
                    </bpelx:general>
                </bpelx:annotation>
                <sequence id="BpSeq19">
                    <assign id="BpAss16">
                        <copy>
                            <from expression="string('rejected')"/>
                            <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
                        </copy>
                        <copy>
                            <from expression="ora:getConversationId()"/>
                            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
                        </copy>
                        <copy>
                            <from expression="string('rejected')"/>
                            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
                        </copy>
                    </assign>
                    <scope name="Prompt_Benificiary1" id="BpScp7">
                        <bpelx:annotation>
                            <bpelx:pattern patternName="bpelx:email"/>
                        </bpelx:annotation>
                        <variables>
                            <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
                            <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
                            <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
                        </variables><sequence name="Sequence5" id="BpSeq20">
                            <sequence name="Sequence1" id="BpSeq21">
                                <switch name="Switch10" id="BpSwt5">
                                    <case condition="bpws:getVariableData(&quot;ADSV_ACCOUNT&quot;) = 'DISABLED'">
                                        <bpelx:annotation>
                                            <bpelx:general>
                                                <bpelx:property name="userLabel">
                                                    User Disabled
                                                </bpelx:property>
                                            </bpelx:general>
                                        </bpelx:annotation><assign name="EmailEnableParamAssign" id="BpAss17">
      
      
      
      
      
      
      
      
   <copy>
         <from expression="string('Default')"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
      </copy><copy>
         <from expression="string('')"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
      </copy><copy>
         <from expression="string('')"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
      </copy><copy>
         <from expression="string('')"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
      </copy><copy>
         <from expression="concat('Your ' , bpws:getVariableData('groupName'), ' enable request has been rejected')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
      </copy><copy>
         <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'),', ', string('   '), '&lt;BR> &lt;BR> Your request to enable  ', bpws:getVariableData('groupName'),'  has been rejected. Request details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Manager Comment: &lt;/B>', string('  '), bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:userComment/task:comment'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to track your request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
      </copy><copy>
         <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="userEmail"/>
         <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
      </copy><copy>
         <from expression="string('text/html; charset=UTF-8')"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
      </copy></assign></case>
                                    <otherwise><assign name="EmailParamsAssign" id="BpAss18">
      <copy>
         <from expression="string('Default')"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
      </copy>
      <copy>
         <from expression="string('')"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
      </copy>
      <copy>
         <from expression="string('')"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
      </copy>
      <copy>
         <from expression="string('')"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
      </copy>
      <copy>
         <from expression="concat('Your ' , bpws:getVariableData('groupName'), ' request has been rejected')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
      </copy>
      <copy>
         <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'),', ', string('   '), '&lt;BR> &lt;BR> Your request for ', bpws:getVariableData('groupName'),'  has been rejected. Request details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Manager Comment: &lt;/B>', string('  '), bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:userComment/task:comment'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to track your request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
      </copy>
      <copy>
         <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="userEmail"/>
         <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
      </copy>
      <copy>
         <from expression="string('text/html; charset=UTF-8')"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
      </copy>
   </assign></otherwise>
                                </switch><bpelx:exec name="Reject_Admin" version="1.5" id="BxExe7">setVariableData("EmailAttribute","REJECTED@aa-epa.gov");   
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");  
setVariableData("AdminGroupEmail",""); 
setVariableData("SKIP_ISOIMO","FALSE");
   //setVariableData("SKIP_ISOIMO", "COMPLETED");                 
String skipIsoImo = (String) getVariableData("SKIP_ISOIMO");       
String mgrRequest = (String) getVariableData("RequestByManager");                 
System.out.println("The Last java Block is Rejecting Request:- ");                 
                 
//System.out.println("Getting ISO Approvers");                                                      
 //setVariableData("commentc","DKOTLIN");                                           
//System.out.println("Column Count:- after DKOTLIN1, with new OIM URL CODE***************");                                        
String usrAccStatus = (String) getVariableData("ADSV_ACCOUNT");      
                                      
                              
                                     
try {                  
  
// Set webURL   
   
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                    
            String hostName = localMachine.getHostName().toString();       
            String webUrl = "http://" +hostName +":15000/";      
            setVariableData("webserUrl",webUrl);      
            System.out.println("hostName in NL1 : " + hostName);     
            System.out.println("webUrl of NL1 : " + webUrl);     
  
            String  envPwd = (String) getVariableData("EnvPwd");       
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                  
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key ="",DbConnectionString="", DbUserId=""; // Staging                
        
       
                        java.lang.Object userLogin = "";                                       
                        java.lang.Object isoManager = "";                                      
                        java.lang.Object managerOutcome = "";                                
                        java.lang.Object rEmail = "";                          
                       // java.lang.Object managerComment = "";                        
                		                                 
                                                
                                             
            Object obj = getVariableData("oimurl");                                                                                           
			String tempStr = obj.toString();                                  
			String[] tempArr = tempStr.split("//");                                  
			//oimURL = "t3://"+tempArr[1].split("/")[0]; 						                                 
			//oimURL ="t3://192.168.1.62:14000";    
                        oimURL = getVariableData("mcurl").toString();     
			System.out.println("oimURL is == "+oimURL);                                                
                                                
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                          
                        String authLoginConfig = "java.security.auth.login.config";                                                          
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                          
			// set up the environment for making the OIM API invocation                                                         
			                                                     
			java.util.Hashtable env = new java.util.Hashtable();                                                          
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                          
			oimInitialContextFactory);                                                          
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                          
			env.put(authLoginConfig, authLoginConfigPath);                                                          
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                        
			                                                     
			client.login(oimUserName, oimPassword.toCharArray());                                                       
			java.lang.Object roleXMLString = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestTarget");                                                     
			String roleString = ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                          
                        System.out.println("Role in NL1 is :- "+roleString);                                 
                        System.out.println("Before getting the request ID");                                  
                        //java.lang.Object requestIDXML = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestId");                                  
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                 
                        String RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                    
  			System.out.println("RequestID in NL1 is == "+RequestID);                                         
 	                userLogin =getVariableData("inputVariable", "payload",                                                   
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                       
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                     
                        System.out.println("User Login in N1 is:- "+usrLogin);                                    
                        System.out.println("Before user's manager managerOutcome1:- ");                  
                        
 	             //   managerComment = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:userComment/task:comment");                                       
                     //   String manComment =  ((oracle.xml.parser.v2.XMLElement)managerComment).getText();                          
                    String manOutcome = "";    
                  if ((mgrRequest.equalsIgnoreCase("YES"))) // || (usrAccStatus.equalsIgnoreCase("DISABLED"))) -- commented out on 06/36/2019     
				     {      
						manOutcome = "APPROVE";      
                        System.out.println("The request for others is made by manager and manOutcome is set to :- "+manOutcome);              
						             
					 }else {      
 	                managerOutcome = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:systemAttributes/task:outcome");                                       
                        manOutcome =  ((oracle.xml.parser.v2.XMLElement)managerOutcome).getText(); 					       
                        System.out.println("The user's manager managerOutcome2:- "+manOutcome);  					       
					 }      
						             
						               try                             
                    {                            
                                                    
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                      
				com.thortech.xl.dataaccess.tcDataProvider dbProvider1 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                     
                                String query1 = "select  LKV_DECODED from LKV where LKV_ENCODED ='DBPassword'";                                      
                                System.out.println("Query1 in JavaLogic is == "+query1);                              
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                     
				usersDataSet1.setQuery(dbProvider1, query1);                                      
				usersDataSet1.executeQuery();                                     
					                                     
		                                                 
                                int numColumns1 = usersDataSet1.getColumnCount();                                     
                                int numRecords1 = usersDataSet1.getTotalRowCount();                              
                            
                                System.out.println("Column Count:- "+numColumns1);                                
                                System.out.println("Record Count:- "+numRecords1);                                
                                //iterate through each record                                     
                             for(int k = 0; k &lt; numRecords1; k++)                                     
                                {                                     
		                usersDataSet1.goToRow(k);                                     
		                                      
		                //iterate through each column of a record                                     
		                for(int m = 0; m &lt; numColumns1; m++)                                     
		                {                                     
		                    String columnName = usersDataSet1.getColumnName(m);                                     
		                    DbPassword = usersDataSet1.getString(m);                                     
                            System.out.println("The DbPassword value is :-"+DbPassword);                                     
                                    
		                }                                     
		            }                                     
                    }                            
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                            
                {                            
                    e3.printStackTrace();                             
                }                   
					             
             
					try                             
                    {                            
                                                    
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                      
				com.thortech.xl.dataaccess.tcDataProvider dbProvider2 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                     
                                String query2 = "select  LKV_DECODED from LKV where LKV_ENCODED ='DBConnectionString'";                                      
                                System.out.println("Query2 in JavaLogic is == "+query2);                              
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet2 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                     
				usersDataSet2.setQuery(dbProvider2, query2);                                      
				usersDataSet2.executeQuery();                                     
					                                     
		                                                 
                                int numColumns1 = usersDataSet2.getColumnCount();                                     
                                int numRecords1 = usersDataSet2.getTotalRowCount();                              
                            
                                System.out.println("Column Count:- "+numColumns1);                                
                                System.out.println("Record Count:- "+numRecords1);                                
                                //iterate through each record                                     
                             for(int k = 0; k &lt; numRecords1; k++)                                     
                                {                                     
		                usersDataSet2.goToRow(k);                                     
		                                      
		                //iterate through each column of a record                                     
		                for(int m = 0; m &lt; numColumns1; m++)                                     
		                {                                     
		                    String columnName = usersDataSet2.getColumnName(m);                                     
		                    DbConnectionString = usersDataSet2.getString(m);                                     
                            System.out.println("The DbConnectionString value is :-"+DbConnectionString);                                     
                                    
		                }                                     
		            }                                     
                    }                            
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                            
                {                            
                    e3.printStackTrace();                             
                }                   
             
				             
				try                             
                    {                            
                                                    
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                      
				com.thortech.xl.dataaccess.tcDataProvider dbProvider3 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                     
                                String query3 = "select  LKV_DECODED from LKV where LKV_ENCODED ='DBUserID'";                                      
                                System.out.println("Query3 in JavaLogic is == "+query3);                              
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet3 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                     
				usersDataSet3.setQuery(dbProvider3, query3);                                      
				usersDataSet3.executeQuery();                                     
					                                     
		                                                 
                                int numColumns1 = usersDataSet3.getColumnCount();                                     
                                int numRecords1 = usersDataSet3.getTotalRowCount();                              
                            
                                System.out.println("Column Count:- "+numColumns1);                                
                                System.out.println("Record Count:- "+numRecords1);                                
                                //iterate through each record                                     
                             for(int k = 0; k &lt; numRecords1; k++)                                     
                                {                                     
		                usersDataSet3.goToRow(k);                                     
		                                      
		                //iterate through each column of a record                                     
		                for(int m = 0; m &lt; numColumns1; m++)                                     
		                {                                     
		                    String columnName = usersDataSet3.getColumnName(m);                                     
		                    DbUserId =  usersDataSet3.getString(m);                                     
							System.out.println("The DbUserId value is :-"+DbUserId);                                     
                                    
		                }                                     
		            }                                     
                    }                            
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                            
                {                            
                    e3.printStackTrace();                             
                }                   
				             
			//if (skipIsoImo.equalsIgnoreCase("TRUE")) { 			             
          
				String query3 = "";          
			/**	if (skipIsoImo.equalsIgnoreCase("TRUE") &amp;&amp; (manOutcome.equalsIgnoreCase("APPROVE") )) {          
					query3 = "update REQUEST set request_status = 'Request Completed' where request_key = '"+RequestID+"'";          
				}else if (manOutcome.equalsIgnoreCase("REJECT")){          
					query3 = "update REQUEST set request_status = 'Request Rejected' where request_key = '"+RequestID+"'";          
				} */      
					query3 = "update REQUEST set request_status = 'Request Rejected' where request_key = '"+RequestID+"'"; 				 
				             
				System.out.println("The query3  is :-"+query3);          
				          
				          
				java.sql.Connection  con = null;                        
				java.sql.Statement stmt = null;             
				             
             
                  
				try {                  
					//Connecting to staging database and trying to execute update statement					                     
					Class.forName("oracle.jdbc.OracleDriver");                           
					con=java.sql.DriverManager.getConnection(DbConnectionString,DbUserId,DbPassword);             
					stmt=con.createStatement();                 
					//query3 = "update REQUEST set request_status = 'Request Completed' where request_key = '"+RequestID+"'";  					             
					stmt.executeUpdate(query3);                         
				}                         
				catch(Exception e){					                     
					System.out.println("Exception on trying to update database");                     
					System.out.println(e);                     
					e.printStackTrace();                      
					System.out.println("--------------------------------------");                     
                  
				}                           
				finally {                     
					stmt.close();                        
					con.close();                        
				}              
					             
					             
					             
					             
					             
						             
			//}			             
						             
	}catch (java.lang.Exception e){                                                 
                    e.printStackTrace();                                                 
            }</bpelx:exec><invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService1" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv9"/><receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv6"/></sequence><bpelx:exec name="RJ-1" version="1.5" id="BxExe8">
                                setVariableData("EmailAttribute","REJECTED@aa-epa.gov");   
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");  
setVariableData("AdminGroupEmail",""); 
setVariableData("SKIP_ISOIMO","FALSE");
                            </bpelx:exec></sequence></scope></sequence>
            </case>
            <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:outcome') = 'APPROVE'">
                <bpelx:annotation>
                    <bpelx:pattern>Task outcome is APPROVE</bpelx:pattern>
                    <bpelx:general>
                        <bpelx:property name="userLabel">Task outcome is APPROVE</bpelx:property>
                    </bpelx:general>
                </bpelx:annotation>
                <sequence id="BpSeq22">
                    <assign id="BpAss19">
                        <copy>
                            <from expression="string('approved')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                            <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
                        </copy>
                        <copy>
                            <from expression="ora:getConversationId()"/>
                            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
                        </copy>
                        <copy>
                            <from expression="string('approved')"/>
                            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
                        </copy>
                    </assign>
                </sequence>
            </case>
            <otherwise>
                <sequence id="BpSeq23">
                    <empty name="Empty1" id="BpEmp4"/>
                </sequence>
            </otherwise>
        </switch>
        <bpelx:exec name="NL1Man" version="1.5" id="BxExe9">
            System.out.println("Before Manager Approval");                                     
setVariableData("SKIP_ISOIMO","FALSE");            
String adminGroup =  "";        
String RequestID = "";   
String manOutcome = "";    
String templateUserNames = "";    
String OIM_Server = "";    
                        
                        
//System.out.println("Column Count:- after DKOTLIN, with new OIM URL CODE***************");                                           
                                           
/*                                                          
Custom operations                                                          
*/                                                          
try {                                                      
            java.lang.Object managerLogin = "";                                                 
            java.lang.Object userLogin = "";                              
			java.lang.Object loginUser = "";			                            
            java.lang.Object isoManager = "";                            
			java.lang.Object procState = "";               
			java.lang.Object reqModel = "";	   
			java.lang.Object managerOutcome = ""; 
			java.lang.Object UserDisplayName = "";				 
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                        
            String hostName = localMachine.getHostName().toString();                        
            System.out.println("Hostname of local machine: " + hostName);                        
            String host = hostName.substring(6, hostName.indexOf(".")-1);                        
            System.out.println("Env of local machine: " + host);                        
 /**                       
            if (host.equals("prd")){                        
                System.out.println("Prod Hostname of local machine: " + hostName);                        
                setVariableData("EnvPwd","t3I0We0W5");                         
            }else if (host.equals("stg")) {                        
                System.out.println("Stage Hostname of local machine: " + hostName);                        
                setVariableData("EnvPwd","aj3ARa1Z6");                         
            }else {                        
                System.out.println("Dev Hostname of local machine: " + hostName);                        
                setVariableData("EnvPwd","TxGy4IX98");                         
        }                        
 **/                       
            String  envPwd = (String) getVariableData("EnvPwd");                        
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                                   
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ; // Staging                                 
                                                    
          /**  oracle.security.jps.JpsContext ctx =                                                          
            oracle.security.jps.JpsContextFactory.getContextFactory().getContext();                                                          
                                                          
            final oracle.security.jps.service.credstore.CredentialStore cs =                                                          
		(oracle.security.jps.service.credstore.CredentialStore)                                                          
            ctx.getServiceInstance(oracle.security.jps.service.credstore.CredentialStore.class);                                                          
            oracle.security.jps.service.credstore.CredentialMap cmap =                                                          
             cs.getCredentialMap("oracle.oim.sysadminMap");                                                          
            oracle.security.jps.service.credstore.Credential cred = cmap.getCredential("sysadmin");                                                          
            if (cred instanceof oracle.security.jps.service.credstore.PasswordCredential)                                                     
                {                                                          
                    oracle.security.jps.service.credstore.PasswordCredential pcred =                                                          
                    (oracle.security.jps.service.credstore.PasswordCredential)cred;                                                          
                    char[] p = pcred.getPassword();                                                          
                    oimUserName = pcred.getName();                                                          
                    oimPassword = new String(p);                                                          
                }                                            
**/                                          
                                                  
      //get oimurl                                                  
      Object obj = getVariableData("oimurl");                                          
      String tempStr = obj.toString();                                         
      String[] tempArr = tempStr.split("//");                                         
     // oimURL = "t3://"+tempArr[1].split("/")[0];               
      oimURL = getVariableData("mcurl").toString();             
      //oimURL ="t3://192.168.1.62:14000";                                                          
	                                                 
    //  System.out.println("oimURL in NativeLogic is :- "+oimURL);                                       
                                   
    //  String roleValue = "Active Directory - Service Account";                                       
    //  setVariableData("groupName",roleValue);                                     
    //  System.out.println("The groupName value is :-"+roleValue);            		                                                          
            String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                          
            String authLoginConfig = "java.security.auth.login.config";                                                          
            String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                          
			// set up the environment for making the OIM API invocation                                                          
			java.util.Hashtable env = new java.util.Hashtable();                                                          
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                          
			oimInitialContextFactory);                                                          
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                          
			env.put(authLoginConfig, authLoginConfigPath);                                                          
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                          
			client.login(oimUserName, oimPassword.toCharArray());                                                     
                                                    
                                                    
                        Thor.API.Operations.tcUserOperationsIntf userintf = client.getService(Thor.API.Operations.tcUserOperationsIntf.class);                                                          
	                managerLogin =getVariableData("inputVariable", "payload",                                                          
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:ManagerLogin");                                              
 	                userLogin =getVariableData("inputVariable", "payload",                                                          
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                                                   
 	                loginUser =getVariableData("inputVariable", "payload",                                                        
	        		   "/ns3:process/ns4:RequesterDetails/ns4:Login"); 	 
 	                UserDisplayName =getVariableData("inputVariable", "payload",                                                                 
	        		   "/ns3:process/ns4:RequesterDetails/ns4:DisplayName"); 					    
					System.out.println("debug statement 6");  					                               
                   // procState =getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:systemAttributes/task:state");               
 	                reqModel =getVariableData("inputVariable", "payload",                                                        
	        		   "/ns3:process/ns4:RequestModel"); 				                  
					System.out.println("debug statement 7");            		                                                                      
                        ///ns3:process/ns4:RequestTarget                                                        
                        java.lang.Object roleXMLString = getVariableData("inputVariable", "payload",                                                          
	        		   "/ns3:process/ns4:RequestTarget");                                                       
                                                          
                        String roleString =  ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                          
                                                   
                        System.out.println("Role in NativeLogic is :- "+roleString);                            
                       // Object mgrLogin = getVariableData("commentc");         
						  					            
						Object loginMgr = getVariableData("inputVariable", "payload",                                                        
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:ManagerLogin");                             
					   String mgrLogin =  ((oracle.xml.parser.v2.XMLElement)loginMgr).getText();                             
                                                        
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                            
						String loginUsr =  ((oracle.xml.parser.v2.XMLElement)loginUser).getText();    
						String loginUsrDisplayName =  ((oracle.xml.parser.v2.XMLElement)UserDisplayName).getText(); 						 
						String requestModel =  ((oracle.xml.parser.v2.XMLElement)reqModel).getText(); 							               
						//	String processState =  ((oracle.xml.parser.v2.XMLElement)procState).getText();						                                
                 
                 
						                 
                        System.out.println("User Login in NativeLogic is:- "+usrLogin);                            
						System.out.println("The Login Requester in NativeLogic is:- "+loginUsr); 						                            
					//	System.out.println("Process State in NativeLogic is:- "+processState);                      
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                               
                        RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                                  
						System.out.println("RequestID in NativeLogic is == "+RequestID); 						                 
						System.out.println("The Request Model in NativeLogic is == "+requestModel);          						                            
                        java.util.HashMap userMap = new java.util.HashMap();    
						java.util.HashMap&lt;String, String> svcMap = new java.util.HashMap&lt;String, String>(); 						  
                        System.out.println("Manager Login in NativeLogic is:- "+mgrLogin);                                
                                                    
						if (null!= loginUsr &amp;&amp; loginUsr.equals(mgrLogin) &amp;&amp; requestModel.equals("Disable Account")){		                                
							setVariableData("RequestByManager","YES");                
							setVariableData("SKIP_ISOIMO", "TRUE");	               
							System.out.println("RequestByManager in NativeLogic is set to:- YES");                
							System.out.println("SKIP_ISOIMO in NativeLogic is set to:- YES"); 							               
						} else if (null!= loginUsr &amp;&amp; loginUsr.equals(mgrLogin) &amp;&amp; requestModel.equals("Enable Account")){               
							setVariableData("RequestByManager","YES");                
							setVariableData("SKIP_ISOIMO", "TRUE");	               
							System.out.println("RequestByManager in NativeLogic is set to:- YES");                
							System.out.println("SKIP_ISOIMO in NativeLogic is set to:- YES");                
						} else if (null!= loginUsr &amp;&amp; loginUsr.equals(mgrLogin)){               
							//setVariableData("RequestForOthers","YES");                
							System.out.println("RequestForOthers in NativeLogic is set to:- YES");                
						}   
   
						managerOutcome = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:systemAttributes/task:outcome");                                            
                        manOutcome =  ((oracle.xml.parser.v2.XMLElement)managerOutcome).getText();    
                                                        
	             try {                                                          
                            userMap.put("Users.User ID", mgrLogin);                                                          
                             Thor.API.tcResultSet moResultSet = userintf.findUsers(userMap);                                                          
                             setVariableData("EmailAttribute", moResultSet.getStringValue("Users.Email"));                                                          
                                System.out.println("Manager Email is:- " +moResultSet.getStringValue("Users.Email"));                      
                              setVariableData("EmailTemp",getVariableData("EmailAttribute"));                  
							  System.out.println("EmailTemp Email is:- "+getVariableData("EmailTemp"));									                  
                                                     
	                 }                                                          
	             catch (java.lang.Exception e)                                                           
                    {                                                          
	              e.printStackTrace();                                                          
	             }       
				    
             if (!manOutcome.equalsIgnoreCase("REJECT")) { 				    
       
               try                                                         
                    {                                                        
                                                                                
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                  
				com.thortech.xl.dataaccess.tcDataProvider svcProvider = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                 
                                //String svcQuery = "select  LKV_DECODED from LKV where LKV_ENCODED ='SupportEmail'";           
												String svcQuery =  "select RBED_ENTITY_FIELD_NAME, RBED_ENTITY_FIELD_VALUE from REQUEST_BENEFICIARY_ENTITYDATA where rbed_rbe_key in (select rbe_key from REQUEST_BENEFICIARY_ENTITIES where rbe_request_key='" + RequestID + "')";								          
                                System.out.println("svcQuery in NativeLogic is == "+svcQuery);                           
								          
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                 
				usersDataSet1.setQuery(svcProvider, svcQuery);                                                                  
				usersDataSet1.executeQuery();                                                                 
					                                                                 
		                                                                             
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                 
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                          
                                                        
                                System.out.println("Column Count:- "+numColumns1);                                                            
                                System.out.println("Record Count:- "+numRecords1);                                                            
                                //iterate through each record            
                                String userSvc = "";              
                             for(int k = 0; k &lt; numRecords1; k++)                                                                  
                                {                                                                 
		                usersDataSet1.goToRow(k);                                                                 
                                                
		                //iterate through each column of a record                                                                 
		                for(int m = 0; m &lt; numColumns1-1; m++)                                                                
		                {                                                                
		                    String columnName = usersDataSet1.getString(0);                                                                
		                    String value = usersDataSet1.getString(1);        
                                            
                                    if (!(columnName.equals("AD Server") || columnName.equals("#endDate") || columnName.equals("#startDate")))         
                                  {        
									 userSvc += columnName +":-- " + value + "&lt;BR>";     
									 svcMap.put(columnName,value); 									  
                                   }                                                                                                                                                                    
		                }        
						          
		            }          
							userSvc = userSvc.substring(0,userSvc.length()-1);           
							setVariableData("ServiceDetails",userSvc);           
                            System.out.println("The Service request details :-"+userSvc); 							          
                    }                                                        
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                        
                {                                                        
                    e3.printStackTrace();                                                         
                }  				        
						String appNames  = "";	         
         
						appNames = mgrLogin + "," +getVariableData("AdminGroupEmail");                     
						setVariableData("commentc",appNames); 						                                  
        
                                
             try                                                                       
                   {                                                                      
                                                                                              
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client); 	    
							oracle.iam.notification.api.NotificationService notsvc = client.getService(oracle.iam.notification.api.NotificationService.class);    
							oracle.iam.notification.vo.NotificationEvent notevent = new oracle.iam.notification.vo.NotificationEvent();	 							   
							java.util.HashMap templateParams = new java.util.HashMap();  
							templateParams.put("UserId",usrLogin); 
							templateParams.put("UserName",loginUsrDisplayName);							 
							templateParams.put("RequestId",RequestID); 
							templateParams.put("OIM_Server",getVariableData("OIMServer")); 
							templateParams.put("Justification",getVariableData("madd"));							 
							String templateName = "";   
							//String recEmail = getVariableData("EmailAttribute").toString();   
							//String[] receiverUserIds = { templateUserNames };   
							// String[] receiverUserIds = templateUserNames.split(",");   
							String[] receiverUserIds = { mgrLogin }; 							   
   
   
               try                                                          
                    {                                                         
                                                                                 
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                   
				com.thortech.xl.dataaccess.tcDataProvider svcProvider = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                  
                                String svcQuery = "select LKV_ENCODED, LKV_DECODED from LKV where LKU_KEY =(select LKU_KEY from lku where lku.lku_type_string_key = 'LSCYTemplatesParams') and LKV_ENCODED like 'Man%'";            
                                System.out.println("svcQuery in NativeLogic is == "+svcQuery);                            
								           
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                  
				usersDataSet1.setQuery(svcProvider, svcQuery);                                                                   
				usersDataSet1.executeQuery();                                                                  
					                                                                  
		                                                                              
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                  
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                           
                                                         
                                System.out.println("Column Count:- "+numColumns1);                                                             
                                System.out.println("Record Count:- "+numRecords1);                                                             
                                //iterate through each record             
                                String userSvc = "";        
							//	java.util.ArrayList&lt;java.lang.String> listTemplate = new ArrayList&lt;java.lang.String>();   
							String listTemplate = "";   
                             for(int k = 0; k &lt; numRecords1; k++)                                                                   
                                {                                                                  
		                usersDataSet1.goToRow(k);                                                                  
                                                 
		                //iterate through each column of a record                                                                  
		                for(int m = 0; m &lt; numColumns1-1; m++)                                                                  
		                {                                                                  
		                    String columnName = usersDataSet1.getString(0);                                                                  
		                    String value = usersDataSet1.getString(1);          
										System.out.println("The columnName is "+columnName) ;   
										System.out.println("The value is "+value);							   
                                              
                                  //  if ((columnName.equals("ManagerTemplate") ))   
									if ((columnName.contains("Template") ))    
                                  {          
										System.out.println("The Template Name is "+value) ;   
										//System.out.println("The UserIds are "+ receiverUserIds);   
										//listTemplate.add(value);   
										listTemplate += value + ",";   
										//templateName = value;   
										//notevent.setTemplateName(value);										   
										//notevent.setUserIds(receiverUserIds);    
										   
									   
                                   }else {   
										System.out.println("The Param value is "+ value);    
										templateParams.put(columnName,value);    
										   
								   }   
			   
								      
		                }   
							notevent.setSender(null);    
							notevent.setParams(templateParams);    
   
						   
						           
		            }  
  
							java.util.Set&lt;java.util.Map.Entry&lt;String,String>> s = svcMap.entrySet();  
							for (java.util.Map.Entry&lt;String,String> entry: s){  
							  templateParams.put(entry.getKey(),entry.getValue());  
							}					  
							listTemplate = listTemplate.substring(0,listTemplate.length()-1);   
							String[] parList = listTemplate.split(",");   
					        for(String template:parList)   
							{   
							notevent.setTemplateName(template);   
							notevent.setUserIds(receiverUserIds);   
							System.out.println("Sending Email for "+template);    
							notsvc.notify(notevent);								   
							}   
						           
                    }                                                         
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                         
                {                                                         
                    e3.printStackTrace();                                                          
                }     
   
					                                                                             
    
                    }                                                                      
                catch(Exception e4)                                                                      
                {                                                                      
                    e4.printStackTrace();                                                                       
                }             				                                            
                                                   				                        
                    client.logout();    
			}   
    }                                                          
 catch (java.lang.Exception e)                                                          
 {                                                          
    System.out.println("----------------------");                                                          
    e.printStackTrace();                                                          
    System.out.println("----------------------");          
	}
        </bpelx:exec><scope name="ApprovalTask_2" wf:key="ApprovalTask_1_globalVariable" id="BpScp8">
      <bpelx:annotation>
         <bpelx:pattern patternName="bpelx:workflow"/>
      </bpelx:annotation>
            <variables>
                <variable name="reinitiateTaskInput" messageType="ns2:reinitiateTaskMessage"/>
                <variable name="reinitiateTaskResponseMessage" messageType="ns2:reinitiateTaskResponseMessage"/>
            </variables>
            <sequence id="BpSeq24">
                <switch name="Switch7" id="BpSwt6">
                    <case condition="bpws:getVariableData(&quot;RequestByManager&quot;) = 'YES'">
                        <bpelx:annotation>
                            <bpelx:general>
                                <bpelx:property name="userLabel">
                                    Manager Request
                                </bpelx:property>
                            </bpelx:general>
                        </bpelx:annotation><bpelx:exec name="SKIP_1SO" version="1.5" id="BxExe10">
      
   System.out.println("Skipped ISO to Disable account: ");</bpelx:exec></case>
                    <case condition="bpws:getVariableData(&quot;ADSV_ACCOUNT&quot;) = 'DISABLED'">
                        <bpelx:annotation>
                            <bpelx:general>
                                <bpelx:property name="userLabel">
                                    User Disabled
                                </bpelx:property>
                            </bpelx:general>
                        </bpelx:annotation><sequence name="Sequence8" id="BpSeq25"><bpelx:exec name="SKIP_1SO" version="1.5" id="BxExe11">
                                System.out.println("Skipped ISO to enable account: ");
                            </bpelx:exec></sequence></case>
                    <otherwise><sequence name="Sequence19" id="BpSeq26"><sequence name="Sequence17" id="BpSeq27"><scope name="Pmompt_ISO" id="BpScp9"><bpelx:annotation><bpelx:pattern patternName="bpelx:email"/></bpelx:annotation><variables><variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/><variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/><variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/></variables><sequence name="Sequence2" id="BpSeq28"><switch name="Switch11" id="BpSwt7">
                                            <case condition=" bpws:getVariableData(&quot;RequestForOthers&quot;) = 'YES'">
                                                <bpelx:annotation>
                                                    <bpelx:general>
                                                        <bpelx:property name="userLabel">
                                                            Request For Others
                                                        </bpelx:property>
                                                    </bpelx:general>
                                                </bpelx:annotation><sequence name="Sequence22" id="BpSeq29"><sequence name="Sequence20" id="BpSeq30"><assign id="BpAss20">
      <copy>
         <from expression="string('approved')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
         <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
      </copy>
      <copy>
         <from expression="ora:getConversationId()"/>
         <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
      </copy>
      <copy>
         <from expression="string('approved')"/>
         <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
      </copy>
   </assign><assign name="EmailParamsAssign" id="BpAss21">
                                                            <copy>
                                                                <from expression="string('Default')"/>
                                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                                            </copy>
                                                            <copy>
                                                                <from expression="string('')"/>
                                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                                            </copy>
                                                            <copy>
                                                                <from expression="string('')"/>
                                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                                            </copy>
                                                            <copy>
                                                                <from expression="string('')"/>
                                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                                            </copy>
                                                            <copy>
                                                                <from expression="concat('A new ', bpws:getVariableData('groupName'), '  request submitted  for  ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                                            </copy>
                                                            <copy>
                                                                <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                                            </copy>
                                                            <copy>
                                                                <from expression="concat(' &lt;BR> A new request for ',bpws:getVariableData('groupName'),'  is awaiting your approval.  &lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'),string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Service Details: &lt;/B>',string('  '), bpws:getVariableData('ServiceDetails'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to Approve or Reject the request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                                            </copy>
                                                            <copy>
                                                                <from expression="string('text/html; charset=UTF-8')"/>
                                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                                            </copy>
                                                        </assign></sequence></sequence></case><otherwise>
                                                <sequence name="Sequence21" id="BpSeq31">
                                                    <switch name="Switch15" id="BpSwt8">
                                                        <case condition="bpws:getVariableData(&quot;USR_DEPT&quot;) = 'TRUE'">
                                                            <bpelx:annotation>
                                                                <bpelx:general>
                                                                    <bpelx:property name="userLabel">
                                                                        No ISO
                                                                    </bpelx:property>
                                                                </bpelx:general>
                                                            </bpelx:annotation><assign name="EmailParamsAssign" id="BpAss22">
                                                                <copy>
                                                                    <from expression="string('Default')"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="string('')"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="string('')"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="string('')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="concat('A new ', bpws:getVariableData('groupName'), '  request submitted  has no ISO Approver ')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="concat(bpws:getVariableData('SupportEmail'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="concat(' &lt;BR> A new request for ',bpws:getVariableData('groupName'),'  has no ISO approver.  &lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'),string(' '), '&lt;BR> &lt;B>Service Details: &lt;/B>',string(' &lt;BR> '), bpws:getVariableData('ServiceDetails'), string('  &lt;BR>&lt;BR> '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="string('text/html; charset=UTF-8')"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                                                </copy>
                                                            </assign></case>
                                                        <otherwise><assign name="EmailParamsAssign" id="BpAss23">
                                                                <copy>
                                                                    <from expression="string('Default')"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="string('')"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="string('')"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="string('')"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="concat('A new ', bpws:getVariableData('groupName'), '  request submitted  for  ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="concat(' &lt;BR> A new request for ',bpws:getVariableData('groupName'),'  is awaiting your approval.  &lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'),string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Service Details: &lt;/B>',string('&lt;BR> '), bpws:getVariableData('ServiceDetails'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to Approve or Reject the request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="string('text/html; charset=UTF-8')"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                                                </copy>
                                                            </assign></otherwise>
                                                    </switch>
                                                    <assign name="EmailParamsAssign" id="BpAss24">
                                                        <copy>
                                                            <from expression="string('Default')"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="string('')"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="string('')"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="string('')"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="concat('A new ', bpws:getVariableData('groupName'), '  request submitted  for  ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="concat(' &lt;BR> A new request for ',bpws:getVariableData('groupName'),'  is awaiting your approval.  &lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'),string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Service Details: &lt;/B>',string('&lt;BR> '), bpws:getVariableData('ServiceDetails'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to Approve or Reject the request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="string('text/html; charset=UTF-8')"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                                        </copy>
                                                    </assign><assign name="ApprovalTask_2_AssignTaskAttributes" id="BpAss25">
      <copy>
         <from variable="ApprovalTask_1_globalVariable" part="payload"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task"/>
      </copy>
      <copy>
         <from expression="number(3)" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:priority"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestID"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:RequestID"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestModel"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:RequestModel"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestTarget"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:RequestTarget"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:url"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:url"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/ns4:RequesterDetails"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:BeneficiaryDetails"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/ns4:BeneficiaryDetails"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:ObjectDetails"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/ns4:ObjectDetails"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:OtherDetails"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/ns4:OtherDetails"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails/ns4:DisplayName"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:RequesterDisplayName"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:BeneficiaryDisplayName"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails/ns4:Login"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:Requester"/>
      </copy>
      <copy bpelx:ignoreMissingFromData="yes" bpelx:insertMissingToData="yes">
         <from variable="commentc"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:Parameter1"/>
      </copy>
      <copy bpelx:insertMissingToData="yes" bpelx:ignoreMissingFromData="yes">
         <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="SKIP_ISOIMO"/>
         <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:Parameter3"/>
      </copy>
   </assign><invoke name="reinitiateTask_ApprovalTask_2" partnerLink="ApprovalTask.TaskService_1" operation="reinitiateTask" portType="ns2:TaskService" inputVariable="reinitiateTaskInput" outputVariable="reinitiateTaskResponseMessage" id="BpInv10"/><receive name="receiveCompletedTask_ApprovalTask_2" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv7"/></sequence>
                                            </otherwise></switch></sequence></scope></sequence></sequence></otherwise>
                </switch>
            </sequence>
        </scope><switch name="taskSwitch" id="BpSwt9">
            <case condition="bpws:getVariableData(&quot;RequestByManager&quot;) = 'YES'">
                <bpelx:annotation>
                    <bpelx:general>
                        <bpelx:property name="userLabel">
                            Manager Request
                        </bpelx:property>
                    </bpelx:general>
                </bpelx:annotation><empty name="Empty1" id="BpEmp5"/></case>
            <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:state') = 'WITHDRAWN'">
                <bpelx:annotation>
                    <bpelx:general>
                        <bpelx:property name="userLabel">
                            Task is withdrawn
                        </bpelx:property>
                    </bpelx:general>
                </bpelx:annotation><sequence id="BpSeq32">
      <assign id="BpAss26">
         <copy>
            <from expression="string('rejected')"/>
            <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
         </copy>
         <copy>
            <from expression="ora:getConversationId()"/>
            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
         </copy>
         <copy>
            <from expression="string('rejected')"/>
            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
         </copy>
      </assign>
      <scope name="Benificiary_Withdrawn-2" id="BpScp10">
         <bpelx:annotation>
            <bpelx:pattern patternName="bpelx:email"/>
         </bpelx:annotation>
         <variables>
            <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
            <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
            <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
         </variables>
         <sequence name="Sequence5" id="BpSeq33">
            <sequence name="Sequence1" id="BpSeq34">
               <assign name="EmailParamsAssign" id="BpAss27">
                                    <copy>
                                        <from expression="string('Default')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(bpws:getVariableData('groupName'), ' request has been withdrawn')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat( bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), '  ', string(' has  withdrawn '), '   ', bpws:getVariableData('groupName'), '  request. &lt;BR>&lt;BR>Request details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('text/html; charset=UTF-8')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                    </copy>
                                </assign>
               <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService1" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv11"/>
               <receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv8"/>
            </sequence>
            <bpelx:exec name="WD-2" version="1.5" id="BxExe12">
               
            setVariableData("EmailAttribute","REJECTED@aa-epa.gov");    
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");  
setVariableData("AdminGroupEmail","");</bpelx:exec>
         </sequence>
      </scope>
   </sequence></case>
            <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:outcome') = 'REJECT'">
         <bpelx:annotation>
            <bpelx:pattern>Task outcome is REJECT</bpelx:pattern>
            <bpelx:general>
               <bpelx:property name="userLabel">Task outcome is REJECT</bpelx:property>
            </bpelx:general>
         </bpelx:annotation><sequence name="Sequence6" id="BpSeq35"><sequence id="BpSeq36"><assign id="BpAss28"><copy><from expression="string('rejected')"/><to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/></copy><copy><from expression="ora:getConversationId()"/><to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/></copy><copy><from expression="string('rejected')"/><to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/></copy></assign><scope name="Prompt_Benificiary2" id="BpScp11"><bpelx:annotation><bpelx:pattern patternName="bpelx:email"/></bpelx:annotation><variables><variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/><variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/><variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/></variables>
                            <compensationHandler id="BpCoH11"/>
                            <sequence name="Sequence1" id="BpSeq37"><assign name="EmailParamsAssign" id="BpAss29">
                                    <copy>
                                        <from expression="string('Default')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat('Your ' , bpws:getVariableData('groupName'),'  request has been rejected')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'),', ', string('   '), '&lt;BR> &lt;BR> Your request for ', bpws:getVariableData('groupName'),'  has been rejected. Request details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Manager Comment: &lt;/B>', string('  '), bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:userComment/task:comment'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to track your request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                    </copy>
                                    <copy>
                                        <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="userEmail"/>
                                        <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('text/html; charset=UTF-8')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                    </copy>
                                </assign><bpelx:exec name="Reject_Manager" version="1.5" id="BxExe13">setVariableData("EmailAttribute","REJECTED@aa-epa.gov");    
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");   
setVariableData("AdminGroupEmail","");  
setVariableData("SKIP_ISOIMO","FALSE");
   //setVariableData("SKIP_ISOIMO", "COMPLETED");                 
String skipIsoImo = (String) getVariableData("SKIP_ISOIMO");       
String mgrRequest = (String) getVariableData("RequestByManager");                 
System.out.println("The Last java Block is Rejecting Request:- ");                 
                 
//System.out.println("Getting ISO Approvers");                                                      
 //setVariableData("commentc","DKOTLIN");                                           
//System.out.println("Column Count:- after DKOTLIN1, with new OIM URL CODE***************");                                        
String usrAccStatus = (String) getVariableData("ADSV_ACCOUNT");      
                                      
                              
                                     
try {                  
  
// Set webURL   
   
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                    
            String hostName = localMachine.getHostName().toString();       
            String webUrl = "http://" +hostName +":15000/";      
            setVariableData("webserUrl",webUrl);      
            System.out.println("hostName in NL1 : " + hostName);     
            System.out.println("webUrl of NL1 : " + webUrl);     
  
            String  envPwd = (String) getVariableData("EnvPwd");       
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                  
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key ="",DbConnectionString="", DbUserId=""; // Staging                
        
       
                        java.lang.Object userLogin = "";                                       
                        java.lang.Object isoManager = "";                                      
                        java.lang.Object managerOutcome = "";                                
                        java.lang.Object rEmail = "";                          
                       // java.lang.Object managerComment = "";                        
                		                                 
                                                
                                             
            Object obj = getVariableData("oimurl");                                                                                           
			String tempStr = obj.toString();                                  
			String[] tempArr = tempStr.split("//");                                  
			//oimURL = "t3://"+tempArr[1].split("/")[0]; 						                                 
			//oimURL ="t3://192.168.1.62:14000";    
                        oimURL = getVariableData("mcurl").toString();     
			System.out.println("oimURL is == "+oimURL);                                                
                                                
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                          
                        String authLoginConfig = "java.security.auth.login.config";                                                          
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                          
			// set up the environment for making the OIM API invocation                                                         
			                                                     
			java.util.Hashtable env = new java.util.Hashtable();                                                          
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                          
			oimInitialContextFactory);                                                          
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                          
			env.put(authLoginConfig, authLoginConfigPath);                                                          
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                        
			                                                     
			client.login(oimUserName, oimPassword.toCharArray());                                                       
			java.lang.Object roleXMLString = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestTarget");                                                     
			String roleString = ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                          
                        System.out.println("Role in NL1 is :- "+roleString);                                 
                        System.out.println("Before getting the request ID");                                  
                        //java.lang.Object requestIDXML = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestId");                                  
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                 
                        String RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                    
  			System.out.println("RequestID in NL1 is == "+RequestID);                                         
 	                userLogin =getVariableData("inputVariable", "payload",                                                   
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                       
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                     
                        System.out.println("User Login in N1 is:- "+usrLogin);                                    
                        System.out.println("Before user's manager managerOutcome1:- ");                  
                        
 	             //   managerComment = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:userComment/task:comment");                                       
                     //   String manComment =  ((oracle.xml.parser.v2.XMLElement)managerComment).getText();                          
                    String manOutcome = "";    
                  if ((mgrRequest.equalsIgnoreCase("YES"))) // || (usrAccStatus.equalsIgnoreCase("DISABLED"))) -- commented out on 06/36/2019     
				     {      
						manOutcome = "APPROVE";      
                        System.out.println("The request for others is made by manager and manOutcome is set to :- "+manOutcome);              
						             
					 }else {      
 	                managerOutcome = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:systemAttributes/task:outcome");                                       
                        manOutcome =  ((oracle.xml.parser.v2.XMLElement)managerOutcome).getText(); 					       
                        System.out.println("The user's manager managerOutcome2:- "+manOutcome);  					       
					 }      
						             
						               try                             
                    {                            
                                                    
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                      
				com.thortech.xl.dataaccess.tcDataProvider dbProvider1 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                     
                                String query1 = "select  LKV_DECODED from LKV where LKV_ENCODED ='DBPassword'";                                      
                                System.out.println("Query1 in JavaLogic is == "+query1);                              
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                     
				usersDataSet1.setQuery(dbProvider1, query1);                                      
				usersDataSet1.executeQuery();                                     
					                                     
		                                                 
                                int numColumns1 = usersDataSet1.getColumnCount();                                     
                                int numRecords1 = usersDataSet1.getTotalRowCount();                              
                            
                                System.out.println("Column Count:- "+numColumns1);                                
                                System.out.println("Record Count:- "+numRecords1);                                
                                //iterate through each record                                     
                             for(int k = 0; k &lt; numRecords1; k++)                                     
                                {                                     
		                usersDataSet1.goToRow(k);                                     
		                                      
		                //iterate through each column of a record                                     
		                for(int m = 0; m &lt; numColumns1; m++)                                     
		                {                                     
		                    String columnName = usersDataSet1.getColumnName(m);                                     
		                    DbPassword = usersDataSet1.getString(m);                                     
                            System.out.println("The DbPassword value is :-"+DbPassword);                                     
                                    
		                }                                     
		            }                                     
                    }                            
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                            
                {                            
                    e3.printStackTrace();                             
                }                   
					             
             
					try                             
                    {                            
                                                    
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                      
				com.thortech.xl.dataaccess.tcDataProvider dbProvider2 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                     
                                String query2 = "select  LKV_DECODED from LKV where LKV_ENCODED ='DBConnectionString'";                                      
                                System.out.println("Query2 in JavaLogic is == "+query2);                              
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet2 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                     
				usersDataSet2.setQuery(dbProvider2, query2);                                      
				usersDataSet2.executeQuery();                                     
					                                     
		                                                 
                                int numColumns1 = usersDataSet2.getColumnCount();                                     
                                int numRecords1 = usersDataSet2.getTotalRowCount();                              
                            
                                System.out.println("Column Count:- "+numColumns1);                                
                                System.out.println("Record Count:- "+numRecords1);                                
                                //iterate through each record                                     
                             for(int k = 0; k &lt; numRecords1; k++)                                     
                                {                                     
		                usersDataSet2.goToRow(k);                                     
		                                      
		                //iterate through each column of a record                                     
		                for(int m = 0; m &lt; numColumns1; m++)                                     
		                {                                     
		                    String columnName = usersDataSet2.getColumnName(m);                                     
		                    DbConnectionString = usersDataSet2.getString(m);                                     
                            System.out.println("The DbConnectionString value is :-"+DbConnectionString);                                     
                                    
		                }                                     
		            }                                     
                    }                            
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                            
                {                            
                    e3.printStackTrace();                             
                }                   
             
				             
				try                             
                    {                            
                                                    
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                      
				com.thortech.xl.dataaccess.tcDataProvider dbProvider3 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                     
                                String query3 = "select  LKV_DECODED from LKV where LKV_ENCODED ='DBUserID'";                                      
                                System.out.println("Query3 in JavaLogic is == "+query3);                              
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet3 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                     
				usersDataSet3.setQuery(dbProvider3, query3);                                      
				usersDataSet3.executeQuery();                                     
					                                     
		                                                 
                                int numColumns1 = usersDataSet3.getColumnCount();                                     
                                int numRecords1 = usersDataSet3.getTotalRowCount();                              
                            
                                System.out.println("Column Count:- "+numColumns1);                                
                                System.out.println("Record Count:- "+numRecords1);                                
                                //iterate through each record                                     
                             for(int k = 0; k &lt; numRecords1; k++)                                     
                                {                                     
		                usersDataSet3.goToRow(k);                                     
		                                      
		                //iterate through each column of a record                                     
		                for(int m = 0; m &lt; numColumns1; m++)                                     
		                {                                     
		                    String columnName = usersDataSet3.getColumnName(m);                                     
		                    DbUserId =  usersDataSet3.getString(m);                                     
							System.out.println("The DbUserId value is :-"+DbUserId);                                     
                                    
		                }                                     
		            }                                     
                    }                            
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                            
                {                            
                    e3.printStackTrace();                             
                }                   
				             
			//if (skipIsoImo.equalsIgnoreCase("TRUE")) { 			             
          
				String query3 = "";          
			/**	if (skipIsoImo.equalsIgnoreCase("TRUE") &amp;&amp; (manOutcome.equalsIgnoreCase("APPROVE") )) {          
					query3 = "update REQUEST set request_status = 'Request Completed' where request_key = '"+RequestID+"'";          
				}else if (manOutcome.equalsIgnoreCase("REJECT")){          
					query3 = "update REQUEST set request_status = 'Request Rejected' where request_key = '"+RequestID+"'";          
				} */      
					query3 = "update REQUEST set request_status = 'Request Rejected' where request_key = '"+RequestID+"'"; 				 
				             
				System.out.println("The query3  is :-"+query3);          
				          
				          
				java.sql.Connection  con = null;                        
				java.sql.Statement stmt = null;             
				             
             
                  
				try {                  
					//Connecting to staging database and trying to execute update statement					                     
					Class.forName("oracle.jdbc.OracleDriver");                           
					con=java.sql.DriverManager.getConnection(DbConnectionString,DbUserId,DbPassword);             
					stmt=con.createStatement();                 
					//query3 = "update REQUEST set request_status = 'Request Completed' where request_key = '"+RequestID+"'";  					             
					stmt.executeUpdate(query3);                         
				}                         
				catch(Exception e){					                     
					System.out.println("Exception on trying to update database");                     
					System.out.println(e);                     
					e.printStackTrace();                      
					System.out.println("--------------------------------------");                     
                  
				}                           
				finally {                     
					stmt.close();                        
					con.close();                        
				}              
					             
					             
					             
					             
					             
						             
			//}			             
						             
	}catch (java.lang.Exception e){                                                 
                    e.printStackTrace();                                                 
            }</bpelx:exec><invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService1" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv12"/><receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv9"/></sequence></scope></sequence><bpelx:exec name="RJ-2" version="1.5" id="BxExe14">
                        setVariableData("EmailAttribute","REJECTED@aa-epa.gov");    
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");   
setVariableData("AdminGroupEmail","");  
setVariableData("SKIP_ISOIMO","FALSE");
                    </bpelx:exec></sequence></case>
      <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:outcome') = 'APPROVE'">
         <bpelx:annotation>
            <bpelx:pattern>Task outcome is APPROVE</bpelx:pattern>
            <bpelx:general>
               <bpelx:property name="userLabel">Task outcome is APPROVE</bpelx:property>
            </bpelx:general>
         </bpelx:annotation>
         <sequence id="BpSeq38">
            <assign id="BpAss30">
               <copy>
                  <from expression="string('approved')"/>
                  <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
               </copy>
               <copy>
                  <from expression="ora:getConversationId()"/>
                  <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
               </copy>
               <copy>
                  <from expression="string('approved')"/>
                  <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
               </copy>
            </assign>
         </sequence>
      </case>
      <otherwise><sequence id="BpSeq39">
      <empty name="Empty1" id="BpEmp6"/>
   </sequence></otherwise>
   </switch><bpelx:exec name="NLISO" version="1.5" id="BxExe15">
            System.out.println("Getting ISO Approvers");                                                 
            
String RequestID = "";     
String templateUserNames = "";   
String OIM_Server = "";                              
                      
String skipIsoImo = (String) getVariableData("SKIP_ISOIMO");                             
System.out.println("The skipIsoImo value in IMO is:- "+skipIsoImo);                                        
                                      
try {                    
         
// Set webURL          
          
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                           
            String hostName = localMachine.getHostName().toString();              
            String webUrl = "http://" +hostName +":15000/";             
            setVariableData("webserUrl",webUrl);             
            System.out.println("hostName in NL1 : " + hostName);            
            System.out.println("webUrl of NL1 : " + webUrl);            
                   
            String  envPwd = (String) getVariableData("EnvPwd");                   
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                              
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key =""; // Staging                            
                    
                        java.lang.Object userLogin = "";                                           
                        java.lang.Object isoManager = "";                                         
                        java.lang.Object managerOutcome = "";                                         
                        java.lang.Object rEmail = "";   
						java.lang.Object UserDisplayName = "";							 
		/**				                                      
			oracle.security.jps.JpsContext ctx =                                                                 
			oracle.security.jps.JpsContextFactory.getContextFactory().getContext();                                                                 
                                                                 
                        final oracle.security.jps.service.credstore.CredentialStore cs =                                                                 
			(oracle.security.jps.service.credstore.CredentialStore)                                                                 
			ctx.getServiceInstance(oracle.security.jps.service.credstore.CredentialStore.class);                                                                 
			oracle.security.jps.service.credstore.CredentialMap cmap =                                                                 
			cs.getCredentialMap("oracle.oim.sysadminMap");                                                                 
			oracle.security.jps.service.credstore.Credential cred = cmap.getCredential("sysadmin");                                                                 
			if (cred instanceof oracle.security.jps.service.credstore.PasswordCredential) {                                                                 
			oracle.security.jps.service.credstore.PasswordCredential pcred =                                                                 
			(oracle.security.jps.service.credstore.PasswordCredential)cred;                                                                 
                                                                 
			char[] p = pcred.getPassword();                                                                 
			oimUserName = pcred.getName();                                                                 
			oimPassword = new String(p);                                                                 
			}                                           
                                      
**/			                                      
                        //get oimurl                                                      
                        Object obj = getVariableData("oimurl");                                                      
                      //  Object obj = getVariableData("oimurl");                                                                             
                    //    oimURL = obj.toString();                                        
			String tempStr = obj.toString();                                       
			String[] tempArr = tempStr.split("//");                                       
			//oimURL = "t3://"+tempArr[1].split("/")[0]; 	                                                  
			//oimURL ="t3://192.168.1.62:14000";                 
                        oimURL = getVariableData("mcurl").toString();            
                        System.out.println("IMO oimURL is == "+oimURL);                                                  
                                                  
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                                 
                        String authLoginConfig = "java.security.auth.login.config";                                                                 
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                                 
			// set up the environment for making the OIM API invocation                                                                
			                                                            
			java.util.Hashtable env = new java.util.Hashtable();                                                                 
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                                 
			oimInitialContextFactory);                                                                 
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                                 
			env.put(authLoginConfig, authLoginConfigPath);                                                                 
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                               
			                                                            
			client.login(oimUserName, oimPassword.toCharArray());                                                              
			java.lang.Object roleXMLString = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestTarget");                                                            
			String roleString = ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                                 
                        System.out.println("Role in NL2 is :- "+roleString);                                      
                        //java.lang.Object requestIDXML = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestId");                                       
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                                             
                        RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();  
						UserDisplayName =getVariableData("inputVariable", "payload",                                                                 
	        		   "/ns3:process/ns4:RequesterDetails/ns4:DisplayName");  
						String loginUsrDisplayName =  ((oracle.xml.parser.v2.XMLElement)UserDisplayName).getText(); 					    
  			System.out.println("RequestID in NL2 is == "+RequestID);                                             
 	                userLogin =getVariableData("inputVariable", "payload",                                                       
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                           
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                                   
                        System.out.println("User Login in N2 is:- "+usrLogin);                                         
          
						String manOutcome = "";             
						String mgrRequest = getVariableData("RequestByManager").toString();             
						String requestForOthers = getVariableData("RequestForOthers").toString();	            
						System.out.println("The mgrRequest's request is :- "+mgrRequest);        
						java.util.HashMap&lt;String, String> svcMap = new java.util.HashMap&lt;String, String>(); 						  
						                            
						if ((mgrRequest.equalsIgnoreCase("YES")) || (requestForOthers.equalsIgnoreCase("YES"))){                            
						                            
							manOutcome = "APPROVE";                            
						}else              
						{						          
 	                managerOutcome = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:systemAttributes/task:outcome");                                            
                        manOutcome =  ((oracle.xml.parser.v2.XMLElement)managerOutcome).getText();          
						}						          
                        System.out.println("In IMO the user's manager managerOutcomestatus is :- "+manOutcome);                                     
                        rEmail = getVariableData("EmailAttribute");                                 
                        System.out.println("The user's manager rEmail:- "+rEmail);                                     
                                                                           
                        if(skipIsoImo.equalsIgnoreCase("TRUE")){                          
                          System.out.println("The skipIsoImo value is :- "+skipIsoImo);                            
                       //   setVariableData("SKIP_ISOIMO", skipIsoImo);                          
                        }else{          
                        Object statexml = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:systemAttributes/task:state");                                   
                        System.out.println("IMO  state is :- "+ ((oracle.xml.parser.v2.XMLElement)statexml).getText());  						          
							System.out.println("The skipIsoImo value in else is :- "+skipIsoImo);                       
						}						                      
                              
						                      
                        String rejectEmail = (String) rEmail;                                   
                        System.out.println("The user's manager rejectEmail:- "+rejectEmail);                                     
                                   
                        setVariableData("commentc","");                                                
                                   
                        if (!manOutcome.equalsIgnoreCase("REJECT")) {                                         
                                        Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                
                                        com.thortech.xl.dataaccess.tcDataProvider dbProvider = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                               
                                     //   String query = "SELECT  e.PRIMARY_IMO_LOGINID FROM usr u ,EPA_SECURITY_OFFICERS e where e.program = //SUBSTR(u.usr_udf_department,1,instr(u.usr_udf_department,'-',1,1)-1) and u.usr_login ='"+usrLogin+"'" +"and //u.usr_status= 'Active'";              
										String query = "SELECT  e.PRIMARY_ISO_LOGINID, u.usr_udf_department FROM usr u ,EPA_SECURITY_OFFICERS e where u.usr_login ='"+usrLogin+"'" + " and u.usr_status= 'Active' AND e.program = substr(u.usr_udf_department,1,DECODE(instr(u.usr_udf_department,'-',1,1),0,length(u.usr_udf_department) + 1,instr(u.usr_udf_department,'-',1,1)) - 1)";              
									               
                                        System.out.println("query in NL2 is == "+query);                                                   
                                        com.thortech.xl.dataaccess.tcDataSet usersDataSet = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                               
                                        usersDataSet.setQuery(dbProvider, query);                                                                
                                        usersDataSet.executeQuery();                                                               
                                                                                                           
                                        int numColumns = usersDataSet.getColumnCount();                                                               
                                        int numRecords = usersDataSet.getTotalRowCount();                                                               
                                                                         
                                        System.out.println("Column Count:- "+numColumns);                                                         
                                        System.out.println("Record Count:- "+numRecords);                                                  
                                                                  
                                        String columnName = "";                                                  
                                        String value = "";                 
										String  value1 = "";             
										String	usrDept = "";             
										             
                                        //iterate through each record                                                               
                                        for(int i = 0; i &lt; numRecords; i++)                                                               
                                        {                                                               
                                                usersDataSet.goToRow(i);                                                               
                                                //iterate through each column of a record                                                               
                                                for(int j = 0; j &lt; numColumns; j++)                                                               
                                                {                                                               
                                                    columnName = usersDataSet.getColumnName(j);                                                               
                                                    value = usersDataSet.getString(j);                 
													if (value != "" )                 
													{													                 
                                                    value1 = usersDataSet.getString(j) + "," +getVariableData("AdminGroupEmail");              
													usrDept = usersDataSet.getString(j+1);             
													setVariableData("USR_DEPT",usrDept);   													             
													System.out.println("All IM Approvers:- "+value1+ " for "+usrDept);            
													break;             
													}else                  
													{                 
                                                    value1 = getVariableData("AdminGroupEmail").toString();                          
                                                    setVariableData("USR_DEPT","TRUE");                                                
                                                    System.out.println("All IMO Approvers :- "+value1);                       
                                                    break;             
													}													                 
                                                }                                                               
                                        }                                                               
                                                                 
                                        boolean commaVal = value.contains(",");                                           
                                        String [] arrOfStr = value.split(",");                                           
                                        String userIDS = "";                                          
                                        if (commaVal) {                                           
                                            for (String a : arrOfStr){                                           
                                                System.out.println("Users.User ID: "+a);                                           
                                                userIDS += "'"+a+"',";                                          
                                            }                                           
                                            userIDS = userIDS.substring(0,userIDS.length()-1);                                          
                                        }else if(null!= value){                                              
                                            System.out.println("Users.User ID: "+value);                                            
                                            userIDS = "'"+value+"'";                                            
                                        } else {                  
											System.out.println("IMO Manager missing or Disabled");                     
										}		                                   
                                                          
                                        // For sending emails                                         
                                        try                                             
                                            {                                                                      
                                                Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                      
                                                com.thortech.xl.dataaccess.tcDataProvider dbProvider2 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                     
                                                String query2 = "select usr_email,usr_login from usr where usr_login in ("+userIDS+") and usr_status ='Active'";                                            
                                                System.out.println("Query2 in NL2 is == "+query2);                                              
                                                com.thortech.xl.dataaccess.tcDataSet usersDataSet2 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                     
                                                usersDataSet2.setQuery(dbProvider2, query2);                                                      
                                                usersDataSet2.executeQuery();                                                     
                                                                                                             
                                                                                                 
                                                int numColumns2 = usersDataSet2.getColumnCount();                                                     
                                                int numRecords2 = usersDataSet2.getTotalRowCount();                                              
                                                            
                                                System.out.println("Column Count:- "+numColumns2);                                                
                                                System.out.println("Record Count:- "+numRecords2);                                           
                                                String email = "";                
												String usr_names = "";               
												String appNames  = "";               
                                                //iterate through each record                
												if (numRecords2 > 0)                
												{												                
														for(int r = 0; r &lt; numRecords2; r++)                                                     
														{                                                     
															usersDataSet2.goToRow(r);                                                     
												                  
														//iterate through each column of a record                                                     
														for(int s = 0; s &lt; numColumns2; s++)                                                     
														{                                                               
															if (s==0)                
															{                
																email += usersDataSet2.getString(s) +",";                
															}else{                
															usr_names += usersDataSet2.getString(s) +",";													                
															}                                                              
														}                                           
													}                                          
														email = email.substring(0,email.length()-1);                
												   usr_names =usr_names.substring(0,usr_names.length()-1);    
													templateUserNames = usr_names;												     
													appNames = usr_names + "," +getVariableData("AdminGroupEmail");                 
													setVariableData("commentc",appNames);                            
													System.out.println("Actual ISO Approvers:- "+appNames);	               
               
												}else               
												{               
													appNames = getVariableData("AdminGroupEmail").toString();                 
													setVariableData("commentc",appNames);                            
													System.out.println("Only AdminGroup Approvers Assigned:- "+appNames);													               
               
												}               
														if (!rejectEmail.equalsIgnoreCase("REJECTED@aa-epa.gov")&amp;&amp; email != "")               
														{               
														setVariableData("EmailAttribute",email);                                          
														System.out.println("Email  sent to  :-"+email);               
														}else               
														{               
															System.out.println("ISO Approver is Null or disabled, Email sent to wam_support");               
														}               
                
                                    }                                            
                                        catch(com.thortech.xl.dataaccess.tcDataSetException e4)                                            
                                    {                                            
                                        e4.printStackTrace();                                             
                                    }                                                                            
                           }else                                        
                            {                                        
                                                                           
                try {                                        
                                                Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                      
                                                com.thortech.xl.dataaccess.tcDataProvider dbProvider3 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                     
                                               // String query2 = "select usr_email from usr where usr_login in ("+userIDS+")";                                           
                                                String query3 = "update REQUEST_APPROVALS set approval_status = 'approval failure' where request_key = '"+RequestID+"'";                                        
                                                System.out.println("ISO Query23 in NL1 is == "+query3);                                              
                                                com.thortech.xl.dataaccess.tcDataSet usersDataSet3 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                     
                                                usersDataSet3.setQuery(dbProvider3, query3);                                                      
                                                //usersDataSet3.executeQuery();                                          
            }catch (java.lang.Exception e6){                                                             
                    e6.printStackTrace();                                                             
            }                                        
                                        
                            }       
               try                                                         
                    {                                                        
                                                                                
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                  
				com.thortech.xl.dataaccess.tcDataProvider svcProvider = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                 
                                //String svcQuery = "select  LKV_DECODED from LKV where LKV_ENCODED ='SupportEmail'";           
												String svcQuery =  "select RBED_ENTITY_FIELD_NAME, RBED_ENTITY_FIELD_VALUE from REQUEST_BENEFICIARY_ENTITYDATA where rbed_rbe_key in (select rbe_key from REQUEST_BENEFICIARY_ENTITIES where rbe_request_key='" + RequestID + "')";								          
                                System.out.println("svcQuery in NativeLogic is == "+svcQuery);                           
								          
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                 
				usersDataSet1.setQuery(svcProvider, svcQuery);                                                                  
				usersDataSet1.executeQuery();                                                                 
					                                                                 
		                                                                             
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                 
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                          
                                                        
                                System.out.println("Column Count:- "+numColumns1);                                                            
                                System.out.println("Record Count:- "+numRecords1);                                                            
                                //iterate through each record            
                                String userSvc = "";              
                             for(int k = 0; k &lt; numRecords1; k++)                                                                  
                                {                                                                 
		                usersDataSet1.goToRow(k);                                                                 
                                                
		                //iterate through each column of a record                                                                 
		                for(int m = 0; m &lt; numColumns1-1; m++)                                                                
		                {                                                                
		                    String columnName = usersDataSet1.getString(0);                                                                
		                    String value = usersDataSet1.getString(1);        
                                            
                                    if (!(columnName.equals("AD Server") || columnName.equals("#endDate") || columnName.equals("#startDate")))         
                                  {        
									 userSvc += columnName +":-- " + value + "&lt;BR>";    
									 svcMap.put(columnName,value);									   
                                   }                                                                                                                                                                    
		                }              
						          
		            }          
							userSvc = userSvc.substring(0,userSvc.length()-1);           
							setVariableData("ServiceDetails",userSvc);           
                            System.out.println("The Service request details :-"+userSvc); 							          
                    }                                                        
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                        
                {                                                        
                    e3.printStackTrace();                                                         
                }  
  
             try                                                                       
                   {                                                                      
                                                                                              
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client); 	    
							oracle.iam.notification.api.NotificationService notsvc = client.getService(oracle.iam.notification.api.NotificationService.class);    
							oracle.iam.notification.vo.NotificationEvent notevent = new oracle.iam.notification.vo.NotificationEvent();	 							   
							java.util.HashMap templateParams = new java.util.HashMap(); 
							templateParams.put("UserId",usrLogin); 
							templateParams.put("UserName",loginUsrDisplayName);							 
							templateParams.put("RequestId",RequestID); 
							templateParams.put("OIM_Server",getVariableData("OIMServer")); 
							templateParams.put("Justification",getVariableData("madd"));							 
							String templateName = "";   
							//String recEmail = getVariableData("EmailAttribute").toString();   
							//String[] receiverUserIds = { templateUserNames };   
							// String[] receiverUserIds = templateUserNames.split(",");   
							String[] receiverUserIds = templateUserNames.split(",");						   
   
   
               try                                                          
                    {                                                         
                                                                                 
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                   
				com.thortech.xl.dataaccess.tcDataProvider svcProvider = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                  
                                String svcQuery = "select LKV_ENCODED, LKV_DECODED from LKV where LKU_KEY =(select LKU_KEY from lku where lku.lku_type_string_key = 'LSCYTemplatesParams') and LKV_ENCODED like 'Iso%'";            
                                System.out.println("svcQuery in NativeLogic is == "+svcQuery);                            
								           
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                  
				usersDataSet1.setQuery(svcProvider, svcQuery);                                                                   
				usersDataSet1.executeQuery();                                                                  
					                                                                  
		                                                                              
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                  
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                           
                                                         
                                System.out.println("Column Count:- "+numColumns1);                                                             
                                System.out.println("Record Count:- "+numRecords1);                                                             
                                //iterate through each record             
                                String userSvc = "";        
							//	java.util.ArrayList&lt;java.lang.String> listTemplate = new ArrayList&lt;java.lang.String>();   
							String listTemplate = "";   
                             for(int k = 0; k &lt; numRecords1; k++)                                                                   
                                {                                                                  
		                usersDataSet1.goToRow(k);                                                                  
                                                 
		                //iterate through each column of a record                                                                  
		                for(int m = 0; m &lt; numColumns1-1; m++)                                                                  
		                {                                                                  
		                    String columnName = usersDataSet1.getString(0);                                                                  
		                    String value = usersDataSet1.getString(1);          
										System.out.println("The columnName is "+columnName) ;   
										System.out.println("The value is "+value);							   
                                              
                                  //  if ((columnName.equals("ManagerTemplate") ))   
									if ((columnName.contains("Template") ))    
                                  {          
										System.out.println("The Template Name is "+value) ;   
										//System.out.println("The UserIds are "+ receiverUserIds);   
										//listTemplate.add(value);   
										listTemplate += value + ",";   
										//templateName = value;   
										//notevent.setTemplateName(value);										   
										//notevent.setUserIds(receiverUserIds);    
										   
									   
                                   }else {   
										System.out.println("The Param value is "+ value);    
										templateParams.put(columnName,value);    
										   
								   }   
			   
								      
		                }   
							notevent.setSender(null);    
							notevent.setParams(templateParams);    
   
						   
						           
		            }  
  
							java.util.Set&lt;java.util.Map.Entry&lt;String,String>> s = svcMap.entrySet();  
							for (java.util.Map.Entry&lt;String,String> entry: s){  
							  templateParams.put(entry.getKey(),entry.getValue());  
							}					  
							listTemplate = listTemplate.substring(0,listTemplate.length()-1);   
							String[] parList = listTemplate.split(",");   
					        for(String template:parList)   
							{   
							notevent.setTemplateName(template);   
							notevent.setUserIds(receiverUserIds);   
							System.out.println("Sending Email for "+template);    
							notsvc.notify(notevent);								   
							}   
						           
                    }                                                         
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                         
                {                                                         
                    e3.printStackTrace();                                                          
                }     
   
					                                                                             
    
                    }                                                                      
                catch(Exception e4)                                                                      
                {                                                                      
                    e4.printStackTrace();                                                                       
                }   
				 
				setVariableData("SKIP_ISOIMO", "FALSE"); 
				skipIsoImo = (String) getVariableData("SKIP_ISOIMO");                           
				System.out.println("The skipIsoImo value in IMO at the end is:- "+skipIsoImo);   				 
                    client.logout();  				  
                                                                          
            } catch (java.lang.Exception e){                                                               
                e.printStackTrace();                                                               
            }
        </bpelx:exec><scope name="ApprovalTask_ISO" wf:key="ApprovalTask_1_globalVariable" id="BpScp12">
      <bpelx:annotation>
         <bpelx:pattern patternName="bpelx:workflow"/>
      </bpelx:annotation>
      <variables>
         <variable name="reinitiateTaskInput" messageType="ns2:reinitiateTaskMessage"/>
         <variable name="reinitiateTaskResponseMessage" messageType="ns2:reinitiateTaskResponseMessage"/>
      </variables>
      <sequence id="BpSeq40">
         <switch name="Switch7" id="BpSwt10">
            <case condition="bpws:getVariableData(&quot;RequestByManager&quot;) = 'YES'">
               <bpelx:annotation>
                  <bpelx:general>
                     <bpelx:property name="userLabel">
                        Manager Request
                     </bpelx:property>
                  </bpelx:general>
               </bpelx:annotation>
               <bpelx:exec name="SKIP_1SO" version="1.5" id="BxExe16">
                  System.out.println("Skipped ISO to Disable account: ");
               </bpelx:exec>
            </case>
            <case condition="bpws:getVariableData(&quot;ADSV_ACCOUNT&quot;) = 'DISABLED'">
               <bpelx:annotation>
                  <bpelx:general>
                     <bpelx:property name="userLabel">
                        User Disabled
                     </bpelx:property>
                  </bpelx:general>
               </bpelx:annotation>
               <sequence name="Sequence8" id="BpSeq41">
                  <bpelx:exec name="SKIP_1SO" version="1.5" id="BxExe17">
                     System.out.println("Skipped ISO to enable account: ");
                  </bpelx:exec>
               </sequence>
            </case>
            <otherwise>
               <sequence name="Sequence19" id="BpSeq42">
                  <sequence name="Sequence17" id="BpSeq43">
                     <scope name="Pmompt_ISO" id="BpScp13">
                        <bpelx:annotation>
                           <bpelx:pattern patternName="bpelx:email"/>
                        </bpelx:annotation>
                        <variables>
                           <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
                           <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
                           <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
                        </variables>
                        <sequence name="Sequence2" id="BpSeq44">
                           <switch name="Switch11" id="BpSwt11">
                              <case condition=" bpws:getVariableData(&quot;RequestForOthers&quot;) = 'YES'">
                                 <bpelx:annotation>
                                    <bpelx:general>
                                       <bpelx:property name="userLabel">
                                          Request For Others
                                       </bpelx:property>
                                    </bpelx:general>
                                 </bpelx:annotation>
                                 <sequence name="Sequence22" id="BpSeq45">
                                    <sequence name="Sequence20" id="BpSeq46">
                                       <assign id="BpAss31">
                                          <copy>
                                             <from expression="string('approved')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                             <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
                                          </copy>
                                          <copy>
                                             <from expression="ora:getConversationId()"/>
                                             <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
                                          </copy>
                                          <copy>
                                             <from expression="string('approved')"/>
                                             <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
                                          </copy>
                                       </assign>
                                       <assign name="EmailParamsAssign" id="BpAss32">
                                          <copy>
                                             <from expression="string('Default')"/>
                                             <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                          </copy>
                                          <copy>
                                             <from expression="string('')"/>
                                             <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                          </copy>
                                          <copy>
                                             <from expression="string('')"/>
                                             <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                          </copy>
                                          <copy>
                                             <from expression="string('')"/>
                                             <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                          </copy>
                                          <copy>
                                             <from expression="concat('A new ', bpws:getVariableData('groupName'), '  request submitted  for  ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                             <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                          </copy>
                                          <copy>
                                             <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                             <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                          </copy>
                                          <copy>
                                             <from expression="concat(' &lt;BR> A new request for ',bpws:getVariableData('groupName'),'  is awaiting your approval.  &lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to Approve or Reject the request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                             <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                          </copy>
                                          <copy>
                                             <from expression="string('text/html; charset=UTF-8')"/>
                                             <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                          </copy>
                                       </assign>
                                    </sequence>
                                 </sequence>
                              </case>
                              <otherwise>
                                 <sequence name="Sequence21" id="BpSeq47">
                                    <switch name="Switch15" id="BpSwt12">
                                       <case condition="bpws:getVariableData(&quot;USR_DEPT&quot;) = 'TRUE'">
                                          <bpelx:annotation>
                                             <bpelx:general>
                                                <bpelx:property name="userLabel">
                                                   No ISO
                                                </bpelx:property>
                                             </bpelx:general>
                                          </bpelx:annotation>
                                          <assign name="EmailParamsAssign" id="BpAss33">
                                             <copy>
                                                <from expression="string('Default')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                             </copy>
                                             <copy>
                                                <from expression="string('')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                             </copy>
                                             <copy>
                                                <from expression="string('')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                             </copy>
                                             <copy>
                                                <from expression="string('')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                             </copy>
                                             <copy>
                                                <from expression="concat('A new ', bpws:getVariableData('groupName'), '  request submitted  has no ISO Approver ')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                             </copy>
                                             <copy>
                                                <from expression="concat(bpws:getVariableData('SupportEmail'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                             </copy>
                                             <copy>
                                                <from expression="concat(' &lt;BR> A new request for ',bpws:getVariableData('groupName'),'  has no ISO approver.  &lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string('  &lt;BR>&lt;BR> '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                             </copy>
                                             <copy>
                                                <from expression="string('text/html; charset=UTF-8')"/>
                                                <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                             </copy>
                                          </assign>
                                       </case>
                                       <otherwise>
                                          <assign name="EmailParamsAssign" id="BpAss34">
                                                                <copy>
                                                                    <from expression="string('Default')"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="string('')"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="string('')"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="string('')"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="concat('A new ', bpws:getVariableData('groupName'), '  request submitted  for  ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="concat(' &lt;BR> A new request for ',bpws:getVariableData('groupName'),'  is awaiting your approval.  &lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'),string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Service Details: &lt;/B>',string('&lt;BR> '), bpws:getVariableData('ServiceDetails'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to Approve or Reject the request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                                                </copy>
                                                                <copy>
                                                                    <from expression="string('text/html; charset=UTF-8')"/>
                                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                                                </copy>
                                                            </assign>
                                       </otherwise>
                                    </switch>
                                    <assign name="EmailParamsAssign" id="BpAss35">
                                                        <copy>
                                                            <from expression="string('Default')"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="string('')"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="string('')"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="string('')"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="concat('A new ', bpws:getVariableData('groupName'), '  request submitted  for  ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="concat(' &lt;BR> A new request for ',bpws:getVariableData('groupName'),'  is awaiting your approval.  &lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'),string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Service Details: &lt;/B>',string('&lt;BR> '), bpws:getVariableData('ServiceDetails'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to Approve or Reject the request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                                        </copy>
                                                        <copy>
                                                            <from expression="string('text/html; charset=UTF-8')"/>
                                                            <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                                        </copy>
                                                    </assign>
                                    <assign name="ApprovalTask_2_AssignTaskAttributes" id="BpAss36">
                                       <copy>
                                          <from variable="ApprovalTask_1_globalVariable" part="payload"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task"/>
                                       </copy>
                                       <copy>
                                          <from expression="number(3)" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:priority"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestID"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:RequestID"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestModel"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:RequestModel"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestTarget"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:RequestTarget"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:url"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:url"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/ns4:RequesterDetails"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:BeneficiaryDetails"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/ns4:BeneficiaryDetails"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:ObjectDetails"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/ns4:ObjectDetails"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:OtherDetails"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/ns4:OtherDetails"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails/ns4:DisplayName"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:RequesterDisplayName"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:BeneficiaryDisplayName"/>
                                       </copy>
                                       <copy>
                                          <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails/ns4:Login"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:Requester"/>
                                       </copy>
                                       <copy bpelx:ignoreMissingFromData="yes" bpelx:insertMissingToData="yes">
                                          <from variable="commentc"/>
                                          <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:Parameter1"/>
                                       </copy>
                                       <copy bpelx:insertMissingToData="yes" bpelx:ignoreMissingFromData="yes">
                                          <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="SKIP_ISOIMO"/>
                                          <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:Parameter3"/>
                                       </copy>
                                    </assign>
                                    <invoke name="reinitiateTask_ApprovalTask_2" partnerLink="ApprovalTask.TaskService_1" operation="reinitiateTask" portType="ns2:TaskService" inputVariable="reinitiateTaskInput" outputVariable="reinitiateTaskResponseMessage" id="BpInv13"/>
                                    <receive name="receiveCompletedTask_ApprovalTask_2" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv10"/>
                                 </sequence>
                              </otherwise>
                           </switch>
                        </sequence>
                     </scope>
                  </sequence>
               </sequence>
            </otherwise>
         </switch>
      </sequence>
   </scope><switch name="taskSwitch" id="BpSwt13">
      <case condition="bpws:getVariableData(&quot;RequestByManager&quot;) = 'YES'">
         <bpelx:annotation>
            <bpelx:general>
               <bpelx:property name="userLabel">
                  Manager Request
               </bpelx:property>
            </bpelx:general>
         </bpelx:annotation>
         <empty name="Empty1" id="BpEmp7"/>
      </case>
      <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:state') = 'WITHDRAWN'">
         <bpelx:annotation>
            <bpelx:general>
               <bpelx:property name="userLabel">
                  Task is withdrawn
               </bpelx:property>
            </bpelx:general>
         </bpelx:annotation>
         <sequence id="BpSeq48">
            <assign id="BpAss37">
               <copy>
                  <from expression="string('rejected')"/>
                  <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
               </copy>
               <copy>
                  <from expression="ora:getConversationId()"/>
                  <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
               </copy>
               <copy>
                  <from expression="string('rejected')"/>
                  <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
               </copy>
            </assign>
            <scope name="Benificiary_Withdrawn-22" id="BpScp14">
               <bpelx:annotation>
                  <bpelx:pattern patternName="bpelx:email"/>
               </bpelx:annotation>
               <variables>
                  <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
                  <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
                  <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
               </variables>
               <sequence name="Sequence5" id="BpSeq49">
                  <sequence name="Sequence1" id="BpSeq50">
                     <assign name="EmailParamsAssign" id="BpAss38">
                                    <copy>
                                        <from expression="string('Default')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(bpws:getVariableData('groupName'), ' request has been withdrawn')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat( bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), '  ', string(' has  withdrawn '), '   ', bpws:getVariableData('groupName'), '  request. &lt;BR>&lt;BR>Request details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Service Details: &lt;/B>',string('&lt;BR> '), bpws:getVariableData('ServiceDetails'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('text/html; charset=UTF-8')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                    </copy>
                                </assign>
                     <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService1" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv14"/>
                     <receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv11"/>
                  </sequence>
                  <bpelx:exec name="WD-2" version="1.5" id="BxExe18">
                     setVariableData("EmailAttribute","REJECTED@aa-epa.gov");    
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");  
setVariableData("AdminGroupEmail","");
                  </bpelx:exec>
               </sequence>
            </scope>
         </sequence>
      </case>
      <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:outcome') = 'REJECT'">
         <bpelx:annotation>
            <bpelx:pattern>Task outcome is REJECT</bpelx:pattern>
            <bpelx:general>
               <bpelx:property name="userLabel">Task outcome is REJECT</bpelx:property>
            </bpelx:general>
         </bpelx:annotation>
         <sequence name="Sequence6" id="BpSeq51">
            <sequence id="BpSeq52">
               <assign id="BpAss39">
                  <copy>
                     <from expression="string('rejected')"/>
                     <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
                  </copy>
                  <copy>
                     <from expression="ora:getConversationId()"/>
                     <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
                  </copy>
                  <copy>
                     <from expression="string('rejected')"/>
                     <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
                  </copy>
               </assign>
               <scope name="Prompt_Benificiary22" id="BpScp15">
                  <bpelx:annotation>
                     <bpelx:pattern patternName="bpelx:email"/>
                  </bpelx:annotation>
                  <variables>
                     <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
                     <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
                     <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
                  </variables>
                  <compensationHandler id="BpCoH15"/>
                  <sequence name="Sequence1" id="BpSeq53">
                     <assign name="EmailParamsAssign" id="BpAss40">
                        <copy>
                           <from expression="string('Default')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                        </copy>
                        <copy>
                           <from expression="string('')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                        </copy>
                        <copy>
                           <from expression="string('')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                        </copy>
                        <copy>
                           <from expression="string('')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                        </copy>
                        <copy>
                           <from expression="concat('Your ' , bpws:getVariableData('groupName'),'  request has been rejected')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                        </copy>
                        <copy>
                           <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'),', ', string('   '), '&lt;BR> &lt;BR> Your request for ', bpws:getVariableData('groupName'),'  has been rejected. Request details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Manager Comment: &lt;/B>', string('  '), bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:userComment/task:comment'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to track your request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                        </copy>
                        <copy>
                           <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="userEmail"/>
                           <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                        </copy>
                        <copy>
                           <from expression="string('text/html; charset=UTF-8')"/>
                           <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                        </copy>
                     </assign>
                     <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService1" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv15"/>
                  </sequence>
               </scope>
            </sequence>
            <bpelx:exec name="RJ-2" version="1.5" id="BxExe19">
               setVariableData("EmailAttribute","REJECTED@aa-epa.gov");    
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");   
setVariableData("AdminGroupEmail","");  
setVariableData("SKIP_ISOIMO","FALSE");
            </bpelx:exec>
         </sequence>
      </case>
      <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:outcome') = 'APPROVE'">
         <bpelx:annotation>
            <bpelx:pattern>Task outcome is APPROVE</bpelx:pattern>
            <bpelx:general>
               <bpelx:property name="userLabel">Task outcome is APPROVE</bpelx:property>
            </bpelx:general>
         </bpelx:annotation>
         <sequence id="BpSeq54">
            <assign id="BpAss41">
               <copy>
                  <from expression="string('approved')"/>
                  <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
               </copy>
               <copy>
                  <from expression="ora:getConversationId()"/>
                  <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
               </copy>
               <copy>
                  <from expression="string('approved')"/>
                  <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
               </copy>
            </assign>
         </sequence>
      </case>
      <otherwise>
         <sequence id="BpSeq55">
            <empty name="Empty1" id="BpEmp8"/>
         </sequence>
      </otherwise>
   </switch><bpelx:exec name="NL-IMO" version="1.5" id="BxExe20">
            System.out.println("Chnaged and updated Column Count 22:25:- Getting IMO Approvers");                                                
          
String RequestID =  "";     
String templateUserNames = "";  
String OIM_Server = "";                                
                     
String skipIsoImo = (String) getVariableData("SKIP_ISOIMO");                            
System.out.println("The skipIsoImo value in IMO is:- "+skipIsoImo);                                       
                                     
try {                   
        
// Set webURL         
         
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                          
            String hostName = localMachine.getHostName().toString();             
            String webUrl = "http://" +hostName +":15000/";            
            setVariableData("webserUrl",webUrl);            
            System.out.println("hostName in NL1 : " + hostName);           
            System.out.println("webUrl of NL1 : " + webUrl);           
                  
            String  envPwd = (String) getVariableData("EnvPwd");                  
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                             
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key =""; // Staging                           
                   
                        java.lang.Object userLogin = "";                                          
                        java.lang.Object isoManager = "";                                        
                        java.lang.Object managerOutcome = "";                                        
                        java.lang.Object rEmail = "";    
						java.lang.Object UserDisplayName = "";							  
		/**				                                     
			oracle.security.jps.JpsContext ctx =                                                                
			oracle.security.jps.JpsContextFactory.getContextFactory().getContext();                                                                
                                                                
                        final oracle.security.jps.service.credstore.CredentialStore cs =                                                                
			(oracle.security.jps.service.credstore.CredentialStore)                                                                
			ctx.getServiceInstance(oracle.security.jps.service.credstore.CredentialStore.class);                                                                
			oracle.security.jps.service.credstore.CredentialMap cmap =                                                                
			cs.getCredentialMap("oracle.oim.sysadminMap");                                                                
			oracle.security.jps.service.credstore.Credential cred = cmap.getCredential("sysadmin");                                                                
			if (cred instanceof oracle.security.jps.service.credstore.PasswordCredential) {                                                                
			oracle.security.jps.service.credstore.PasswordCredential pcred =                                                                
			(oracle.security.jps.service.credstore.PasswordCredential)cred;                                                                
                                                                
			char[] p = pcred.getPassword();                                                                
			oimUserName = pcred.getName();                                                                
			oimPassword = new String(p);                                                                
			}                                          
                                     
**/			                                     
                        //get oimurl                                                     
                        Object obj = getVariableData("oimurl");                                                     
                      //  Object obj = getVariableData("oimurl");                                                                            
                    //    oimURL = obj.toString();                                       
			String tempStr = obj.toString();                                      
			String[] tempArr = tempStr.split("//");                                      
			//oimURL = "t3://"+tempArr[1].split("/")[0]; 	                                                 
			//oimURL ="t3://192.168.1.62:14000";                
                        oimURL = getVariableData("mcurl").toString();           
                        System.out.println("IMO oimURL is == "+oimURL);                                                 
                                                 
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                                
                        String authLoginConfig = "java.security.auth.login.config";                                                                
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                                
			// set up the environment for making the OIM API invocation                                                               
			                                                           
			java.util.Hashtable env = new java.util.Hashtable();                                                                
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                                
			oimInitialContextFactory);                                                                
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                                
			env.put(authLoginConfig, authLoginConfigPath);                                                                
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                              
			                                                           
			client.login(oimUserName, oimPassword.toCharArray());                                                             
			java.lang.Object roleXMLString = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestTarget");                                                           
			String roleString = ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                                
                        System.out.println("Role in NL2 is :- "+roleString);                                     
                        //java.lang.Object requestIDXML = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestId");                                      
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                                            
                        RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();   
						UserDisplayName =getVariableData("inputVariable", "payload",                                                                  
	        		   "/ns3:process/ns4:RequesterDetails/ns4:DisplayName");   
						String loginUsrDisplayName =  ((oracle.xml.parser.v2.XMLElement)UserDisplayName).getText(); 					   						  
  			System.out.println("RequestID in NL2 is == "+RequestID);                                            
 	                userLogin =getVariableData("inputVariable", "payload",                                                      
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                          
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                                  
                        System.out.println("User Login in N2 is:- "+usrLogin);                                        
         
						String manOutcome = "";            
						String mgrRequest = getVariableData("RequestByManager").toString();            
						String requestForOthers = getVariableData("RequestForOthers").toString();	           
						System.out.println("The mgrRequest's request is :- "+mgrRequest);    
						java.util.HashMap&lt;String, String> svcMap = new java.util.HashMap&lt;String, String>();                            
						                           
						if ((mgrRequest.equalsIgnoreCase("YES")) || (requestForOthers.equalsIgnoreCase("YES"))){                           
						                           
							manOutcome = "APPROVE";                           
						}else             
						{						         
 	                managerOutcome = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:systemAttributes/task:outcome");                                           
                        manOutcome =  ((oracle.xml.parser.v2.XMLElement)managerOutcome).getText();         
						}						         
                        System.out.println("In IMO the user's manager managerOutcomestatus is :- "+manOutcome);                                    
                        rEmail = getVariableData("EmailAttribute");                                
                        System.out.println("The user's manager rEmail:- "+rEmail);                                    
                                                                          
                        if(skipIsoImo.equalsIgnoreCase("TRUE")){                         
                          System.out.println("The skipIsoImo value is :- "+skipIsoImo);                           
                       //   setVariableData("SKIP_ISOIMO", skipIsoImo);                         
                        }else{         
                        Object statexml = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:systemAttributes/task:state");                                  
                        System.out.println("IMO  state is :- "+ ((oracle.xml.parser.v2.XMLElement)statexml).getText());  						         
							System.out.println("The skipIsoImo value in else is :- "+skipIsoImo);                      
						}						                     
                             
						                     
                        String rejectEmail = (String) rEmail;                                  
                        System.out.println("The user's manager rejectEmail:- "+rejectEmail);                                    
                                  
                        setVariableData("commentc","");                                               
                                  
                        if (!manOutcome.equalsIgnoreCase("REJECT")) {                                        
                                        Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                               
                                        com.thortech.xl.dataaccess.tcDataProvider dbProvider = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                              
                                     //   String query = "SELECT  e.PRIMARY_IMO_LOGINID FROM usr u ,EPA_SECURITY_OFFICERS e where e.program = //SUBSTR(u.usr_udf_department,1,instr(u.usr_udf_department,'-',1,1)-1) and u.usr_login ='"+usrLogin+"'" +"and //u.usr_status= 'Active'";             
										String query = "SELECT  e.PRIMARY_IMO_LOGINID, u.usr_udf_department FROM usr u ,EPA_SECURITY_OFFICERS e where u.usr_login ='"+usrLogin+"'" + " and u.usr_status= 'Active' AND e.program = substr(u.usr_udf_department,1,DECODE(instr(u.usr_udf_department,'-',1,1),0,length(u.usr_udf_department) + 1,instr(u.usr_udf_department,'-',1,1)) - 1)";             
									              
                                        System.out.println("query in NL2 is == "+query);                                                  
                                        com.thortech.xl.dataaccess.tcDataSet usersDataSet = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                              
                                        usersDataSet.setQuery(dbProvider, query);                                                               
                                        usersDataSet.executeQuery();                                                              
                                                                                                          
                                        int numColumns = usersDataSet.getColumnCount();                                                              
                                        int numRecords = usersDataSet.getTotalRowCount();                                                              
                                                                        
                                        System.out.println("Column Count:- "+numColumns);                                                        
                                        System.out.println("Record Count:- "+numRecords);                                                 
                                                                 
                                        String columnName = "";                                                 
                                        String value = "";                
										String  value1 = "";            
										String	usrDept = "";            
										            
                                        //iterate through each record                                                              
                                        for(int i = 0; i &lt; numRecords; i++)                                                              
                                        {                                                              
                                                usersDataSet.goToRow(i);                                                              
                                                //iterate through each column of a record                                                              
                                                for(int j = 0; j &lt; numColumns; j++)                                                              
                                                {                                                              
                                                    columnName = usersDataSet.getColumnName(j);                                                              
                                                    value = usersDataSet.getString(j);                
													if (value != "" )                
													{													                
                                                    value1 = usersDataSet.getString(j) + "," +getVariableData("AdminGroupEmail");             
													usrDept = usersDataSet.getString(j+1);            
													setVariableData("USR_DEPT",usrDept);   													            
													System.out.println("All IM Approvers:- "+value1+ " for "+usrDept);           
													break;            
													}else                 
													{                
                                                    value1 = getVariableData("AdminGroupEmail").toString();                         
                                                    setVariableData("USR_DEPT","TRUE");                                               
                                                    System.out.println("All IMO Approvers :- "+value1);                      
                                                    break;            
													}													                
                                                }                                                              
                                        }                                                              
                                                                
                                        boolean commaVal = value.contains(",");                                          
                                        String [] arrOfStr = value.split(",");                                          
                                        String userIDS = "";                                         
                                        if (commaVal) {                                          
                                            for (String a : arrOfStr){                                          
                                                System.out.println("Users.User ID: "+a);                                          
                                                userIDS += "'"+a+"',";                                         
                                            }                                          
                                            userIDS = userIDS.substring(0,userIDS.length()-1);                                         
                                        }else if(null!= value){                                             
                                            System.out.println("Users.User ID: "+value);                                           
                                            userIDS = "'"+value+"'";                                           
                                        } else {                 
											System.out.println("IMO Manager missing or Disabled");                    
										}		                                  
                                                         
                                        // For sending emails                                        
                                        try                                            
                                            {                                                                     
                                                Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                     
                                                com.thortech.xl.dataaccess.tcDataProvider dbProvider2 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                    
                                                String query2 = "select usr_email,usr_login from usr where usr_login in ("+userIDS+") and usr_status ='Active'";                                           
                                                System.out.println("Query2 in NL2 is == "+query2);                                             
                                                com.thortech.xl.dataaccess.tcDataSet usersDataSet2 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                    
                                                usersDataSet2.setQuery(dbProvider2, query2);                                                     
                                                usersDataSet2.executeQuery();                                                    
                                                                                                            
                                                                                                
                                                int numColumns2 = usersDataSet2.getColumnCount();                                                    
                                                int numRecords2 = usersDataSet2.getTotalRowCount();                                             
                                                           
                                                System.out.println("Column Count:- "+numColumns2);                                               
                                                System.out.println("Record Count:- "+numRecords2);                                          
                                                String email = "";               
												String usr_names = "";              
												String appNames  = "";              
                                                //iterate through each record               
												if (numRecords2 > 0)               
												{												               
														for(int r = 0; r &lt; numRecords2; r++)                                                    
														{                                                    
															usersDataSet2.goToRow(r);                                                    
												                 
														//iterate through each column of a record                                                    
														for(int s = 0; s &lt; numColumns2; s++)                                                    
														{                                                              
															if (s==0)               
															{               
																email += usersDataSet2.getString(s) +",";               
															}else{               
															usr_names += usersDataSet2.getString(s) +",";													               
															}                                                             
														}                                          
													}                                         
														email = email.substring(0,email.length()-1);               
												   usr_names =usr_names.substring(0,usr_names.length()-1);    
													templateUserNames = usr_names;													      
													appNames = usr_names + "," +getVariableData("AdminGroupEmail");                
													setVariableData("commentc",appNames);                           
													System.out.println("Actual IMO Approvers:- "+appNames);	              
              
												}else              
												{              
													appNames = getVariableData("AdminGroupEmail").toString();                
													setVariableData("commentc",appNames);                           
													System.out.println("Only AdminGroup Approvers Assigned:- "+appNames);													              
              
												}              
														if (!rejectEmail.equalsIgnoreCase("REJECTED@aa-epa.gov")&amp;&amp; email != "")              
														{              
														setVariableData("EmailAttribute",email);                                         
														System.out.println("Email  sent to  :-"+email);              
														}else              
														{              
															System.out.println("IMO Approver is Null or disabled, Email sent to wam_support");              
														}              
               
                                    }                                           
                                        catch(com.thortech.xl.dataaccess.tcDataSetException e4)                                           
                                    {                                           
                                        e4.printStackTrace();                                            
                                    }                                                                           
                           }else                                       
                            {                                       
                                                                          
                try {                                       
                                                Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                     
                                                com.thortech.xl.dataaccess.tcDataProvider dbProvider3 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                    
                                               // String query2 = "select usr_email from usr where usr_login in ("+userIDS+")";                                          
                                                String query3 = "update REQUEST_APPROVALS set approval_status = 'approval failure' where request_key = '"+RequestID+"'";                                       
                                                System.out.println("IMO Query23 in NL1 is == "+query3);                                             
                                                com.thortech.xl.dataaccess.tcDataSet usersDataSet3 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                    
                                                usersDataSet3.setQuery(dbProvider3, query3);                                                     
                                                //usersDataSet3.executeQuery();                                         
            }catch (java.lang.Exception e6){                                                            
                    e6.printStackTrace();                                                            
            }                                       
                                       
                            }       
       
               try                                                         
                    {                                                        
                                                                                
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                  
				com.thortech.xl.dataaccess.tcDataProvider svcProvider = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                 
                                //String svcQuery = "select  LKV_DECODED from LKV where LKV_ENCODED ='SupportEmail'";           
												String svcQuery =  "select RBED_ENTITY_FIELD_NAME, RBED_ENTITY_FIELD_VALUE from REQUEST_BENEFICIARY_ENTITYDATA where rbed_rbe_key in (select rbe_key from REQUEST_BENEFICIARY_ENTITIES where rbe_request_key='" + RequestID + "')";								          
                                System.out.println("svcQuery in NativeLogic is == "+svcQuery);                           
								          
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                 
				usersDataSet1.setQuery(svcProvider, svcQuery);                                                                  
				usersDataSet1.executeQuery();                                                                 
					                                                                 
		                                                                             
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                 
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                          
                                                        
                                System.out.println("Column Count:- "+numColumns1);                                                            
                                System.out.println("Record Count:- "+numRecords1);                                                            
                                //iterate through each record            
                                String userSvc = "";              
                             for(int k = 0; k &lt; numRecords1; k++)                                                                  
                                {                                                                 
		                usersDataSet1.goToRow(k);                                                                 
                                                
		                //iterate through each column of a record                                                                 
		                for(int m = 0; m &lt; numColumns1-1; m++)                                                                 
		                {                                                                 
		                    String columnName = usersDataSet1.getString(0);                                                                 
		                    String value = usersDataSet1.getString(1);         
                                             
                                    if (!(columnName.equals("AD Server") || columnName.equals("#endDate") || columnName.equals("#startDate")))          
                                  {         
									 userSvc += columnName +":-- " + value + "&lt;BR>";     
									 svcMap.put(columnName,value);										    
                                   }                                                                                                                                                                     
		                }          
						          
		            }          
							userSvc = userSvc.substring(0,userSvc.length()-1);           
							setVariableData("ServiceDetails",userSvc);           
                            System.out.println("The Service request details :-"+userSvc); 							          
                    }                                                        
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                        
                {                                                        
                    e3.printStackTrace();                                                         
                }   
   
             try                                                                        
                   {                                                                       
                                                                                               
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client); 	     
							oracle.iam.notification.api.NotificationService notsvc = client.getService(oracle.iam.notification.api.NotificationService.class);     
							oracle.iam.notification.vo.NotificationEvent notevent = new oracle.iam.notification.vo.NotificationEvent();	 							    
							java.util.HashMap templateParams = new java.util.HashMap();   
							templateParams.put("UserId",usrLogin);  
							templateParams.put("UserName",loginUsrDisplayName);							  
							templateParams.put("RequestId",RequestID);  
							templateParams.put("OIM_Server",getVariableData("OIMServer"));  
							templateParams.put("Justification",getVariableData("madd"));							  
							String templateName = "";    
							//String recEmail = getVariableData("EmailAttribute").toString();    
							//String[] receiverUserIds = { templateUserNames };    
							// String[] receiverUserIds = templateUserNames.split(",");    
							String[] receiverUserIds = templateUserNames.split(",");						    
    
    
               try                                                           
                    {                                                          
                                                                                  
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                    
				com.thortech.xl.dataaccess.tcDataProvider svcProvider = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                   
                                String svcQuery = "select LKV_ENCODED, LKV_DECODED from LKV where LKU_KEY =(select LKU_KEY from lku where lku.lku_type_string_key = 'LSCYTemplatesParams') and LKV_ENCODED like 'Imo%'";             
                                System.out.println("svcQuery in NativeLogic is == "+svcQuery);                             
								            
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                   
				usersDataSet1.setQuery(svcProvider, svcQuery);                                                                    
				usersDataSet1.executeQuery();                                                                   
					                                                                   
		                                                                               
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                   
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                            
                                                          
                                System.out.println("Column Count:- "+numColumns1);                                                              
                                System.out.println("Record Count:- "+numRecords1);                                                              
                                //iterate through each record              
                                String userSvc = "";         
							//	java.util.ArrayList&lt;java.lang.String> listTemplate = new ArrayList&lt;java.lang.String>();    
							String listTemplate = "";    
                             for(int k = 0; k &lt; numRecords1; k++)                                                                    
                                {                                                                   
		                usersDataSet1.goToRow(k);                                                                   
                                                  
		                //iterate through each column of a record                                                                   
		                for(int m = 0; m &lt; numColumns1-1; m++)                                                                   
		                {                                                                   
		                    String columnName = usersDataSet1.getString(0);                                                                   
		                    String value = usersDataSet1.getString(1);           
										System.out.println("The columnName is "+columnName) ;    
										System.out.println("The value is "+value);							    
                                               
                                  //  if ((columnName.equals("ManagerTemplate") ))    
									if ((columnName.contains("Template") ))     
                                  {           
										System.out.println("The Template Name is "+value) ;    
										//System.out.println("The UserIds are "+ receiverUserIds);    
										//listTemplate.add(value);    
										listTemplate += value + ",";    
										//templateName = value;    
										//notevent.setTemplateName(value);										    
										//notevent.setUserIds(receiverUserIds);     
										    
									    
                                   }else {    
										System.out.println("The Param value is "+ value);     
										templateParams.put(columnName,value);     
										    
								   }    
			    
								       
		                }    
							notevent.setSender(null);     
							notevent.setParams(templateParams);     
    
						    
						            
		            }   
   
							java.util.Set&lt;java.util.Map.Entry&lt;String,String>> s = svcMap.entrySet();   
							for (java.util.Map.Entry&lt;String,String> entry: s){   
							  templateParams.put(entry.getKey(),entry.getValue());   
							}					   
							listTemplate = listTemplate.substring(0,listTemplate.length()-1);    
							String[] parList = listTemplate.split(",");    
					        for(String template:parList)    
							{    
							notevent.setTemplateName(template);    
							notevent.setUserIds(receiverUserIds);    
							System.out.println("Sending Email for "+template);     
							notsvc.notify(notevent);								    
							}    
						            
                    }                                                          
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                          
                {                                                          
                    e3.printStackTrace();                                                           
                }      
    
					                                                                              
     
                    }                                                                       
                catch(Exception e4)                                                                       
                {                                                                       
                    e4.printStackTrace();                                                                        
                }    
				  
				setVariableData("SKIP_ISOIMO", "TRUE");  
				skipIsoImo = (String) getVariableData("SKIP_ISOIMO");                            
				System.out.println("The skipIsoImo value in IMO at the end is:- "+skipIsoImo); 				  
                    client.logout(); 				   
                                                                         
            } catch (java.lang.Exception e){                                                              
                e.printStackTrace();                                                              
            }
        </bpelx:exec><scope name="ApprovalTask_3" wf:key="ApprovalTask_1_globalVariable" id="BpScp16">
      <bpelx:annotation>
         <bpelx:pattern patternName="bpelx:workflow"/>
      </bpelx:annotation>
            <variables>
                <variable name="reinitiateTaskInput" messageType="ns2:reinitiateTaskMessage"/>
                <variable name="reinitiateTaskResponseMessage" messageType="ns2:reinitiateTaskResponseMessage"/>
            </variables>
            <sequence id="BpSeq56">
                <switch name="Switch9" id="BpSwt14">
                    <case condition="bpws:getVariableData(&quot;RequestByManager&quot;) = 'YES'">
                        <bpelx:annotation>
                            <bpelx:general>
                                <bpelx:property name="userLabel">
                                    Manager Request
                                </bpelx:property>
                            </bpelx:general>
                        </bpelx:annotation><bpelx:exec name="SKIP_1MO" version="1.5" id="BxExe21">
      
   System.out.println("Skipped IMO to Disable account: ");</bpelx:exec></case>
                    <case condition="bpws:getVariableData(&quot;ADSV_ACCOUNT&quot;) = 'DISABLED'">
                        <bpelx:annotation>
                            <bpelx:general>
                                <bpelx:property name="userLabel">
                                    SKIP_IMO
                                </bpelx:property>
                            </bpelx:general>
                        </bpelx:annotation><sequence name="Sequence9" id="BpSeq57"><bpelx:exec name="SKIP_1MO" version="1.5" id="BxExe22">
      
   System.out.println("Skipped IMO to Enable account: ");</bpelx:exec></sequence></case>
                    <otherwise><sequence name="Sequence23" id="BpSeq58"><sequence name="Sequence18" id="BpSeq59"><scope name="Pmompt_IMO" id="BpScp17"><bpelx:annotation><bpelx:pattern patternName="bpelx:email"/></bpelx:annotation><variables><variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/><variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/><variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/></variables><sequence name="Sequence2" id="BpSeq60"><switch name="Switch12" id="BpSwt15"><case condition="bpws:getVariableData(&quot;USR_DEPT&quot;) = 'TRUE'"><bpelx:annotation><bpelx:general><bpelx:property name="userLabel">
                                                            No IMO
                                                        </bpelx:property></bpelx:general></bpelx:annotation><assign name="EmailParamsAssign" id="BpAss42">
                                                    <copy>
                                                        <from expression="string('Default')"/>
                                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                                    </copy>
                                                    <copy>
                                                        <from expression="string('')"/>
                                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                                    </copy>
                                                    <copy>
                                                        <from expression="string('')"/>
                                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                                    </copy>
                                                    <copy>
                                                        <from expression="string('')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                                    </copy>
                                                    <copy>
                                                        <from expression="concat('A new ', bpws:getVariableData('groupName'), '  request submitted  has no ISO Approver ')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                                    </copy>
                                                    <copy>
                                                        <from expression="concat(bpws:getVariableData('SupportEmail'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                                    </copy>
                                                    <copy>
                                                        <from expression="concat(' &lt;BR> A new request for ',bpws:getVariableData('groupName'),'  has no ISO approver.  &lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Service Details: &lt;/B>',string('&lt;BR> '), bpws:getVariableData('ServiceDetails'), string('  &lt;BR>&lt;BR> '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                                    </copy>
                                                    <copy>
                                                        <from expression="string('text/html; charset=UTF-8')"/>
                                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                                    </copy>
                                                </assign></case><otherwise><assign name="EmailParamsAssign" id="BpAss43">
                                                    <copy>
                                                        <from expression="string('Default')"/>
                                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                                    </copy>
                                                    <copy>
                                                        <from expression="string('')"/>
                                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                                    </copy>
                                                    <copy>
                                                        <from expression="string('')"/>
                                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                                    </copy>
                                                    <copy>
                                                        <from expression="string('')"/>
                                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                                    </copy>
                                                    <copy>
                                                        <from expression="concat('A new ', bpws:getVariableData('groupName'), '  request submitted for  ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                                    </copy>
                                                    <copy>
                                                        <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))"/>
                                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                                    </copy>
                                                    <copy>
                                                        <from expression="concat(' &lt;BR> A new request for ',bpws:getVariableData('groupName'),'  is awaiting your approval.  &lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'),string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Service Details: &lt;/B>',string('&lt;BR> '), bpws:getVariableData('ServiceDetails'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to Approve or Reject the request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                                    </copy>
                                                    <copy>
                                                        <from expression="string('text/html; charset=UTF-8')"/>
                                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                                    </copy>
                                                </assign></otherwise></switch></sequence></scope></sequence><assign name="ApprovalTask_3_AssignTaskAttributes" id="BpAss44">
      <invoke name="reinitiateTask_ApprovalTask_3" partnerLink="ApprovalTask.TaskService_1" operation="reinitiateTask" portType="ns2:TaskService" inputVariable="reinitiateTaskInput" outputVariable="reinitiateTaskResponseMessage" id="BpInv16"/>
      <receive name="receiveCompletedTask_ApprovalTask_3" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv12"/>
      <copy>
         <from variable="ApprovalTask_1_globalVariable" part="payload"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task"/>
      </copy>
      <copy>
         <from expression="number(3)"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:priority"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestID"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:RequestID"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestModel"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:RequestModel"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequestTarget"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:RequestTarget"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:url"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:url"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/ns4:RequesterDetails"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:BeneficiaryDetails"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/ns4:BeneficiaryDetails"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:ObjectDetails"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/ns4:ObjectDetails"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:OtherDetails"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/ns4:OtherDetails"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails/ns4:DisplayName"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:RequesterDisplayName"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:BeneficiaryDisplayName"/>
      </copy>
      <copy>
         <from variable="inputVariable" part="payload" query="/ns3:process/ns4:RequesterDetails/ns4:Login"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:Requester"/>
      </copy>
      <copy bpelx:ignoreMissingFromData="yes" bpelx:insertMissingToData="yes">
         <from variable="commentc"/>
         <to variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:Parameter1"/>
      </copy>
      <copy bpelx:insertMissingToData="yes" bpelx:ignoreMissingFromData="yes">
         <from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="SKIP_ISOIMO"/>
         <to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="reinitiateTaskInput" part="payload" query="/ns2:reinitiateTask/task:task/task:payload/task:Parameter3"/>
      </copy>
   </assign><invoke name="reinitiateTask_ApprovalTask_2" partnerLink="ApprovalTask.TaskService_1" operation="reinitiateTask" portType="ns2:TaskService" inputVariable="reinitiateTaskInput" outputVariable="reinitiateTaskResponseMessage" id="BpInv17"/><receive name="receiveCompletedTask_ApprovalTask_2" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv13"/></sequence></otherwise>
                </switch></sequence>
        </scope><switch name="taskSwitch" id="BpSwt16">
            <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:state') = 'WITHDRAWN'">
                <bpelx:annotation>
                    <bpelx:general>
                        <bpelx:property name="userLabel">
                            Task is withdrawn
                        </bpelx:property>
                    </bpelx:general>
                </bpelx:annotation><sequence id="BpSeq61">
      <assign id="BpAss45">
         <copy>
            <from expression="string('rejected')"/>
            <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
         </copy>
         <copy>
            <from expression="ora:getConversationId()"/>
            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
         </copy>
         <copy>
            <from expression="string('rejected')"/>
            <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
         </copy>
      </assign>
      <scope name="Benificiary_Withdrawn-3" id="BpScp18">
         <bpelx:annotation>
            <bpelx:pattern patternName="bpelx:email"/>
         </bpelx:annotation>
         <variables>
            <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
            <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
            <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
         </variables>
         <sequence name="Sequence5" id="BpSeq62">
            <sequence name="Sequence1" id="BpSeq63">
               <assign name="EmailParamsAssign" id="BpAss46">
                                    <copy>
                                        <from expression="string('Default')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat(bpws:getVariableData('groupName'), ' request has been withdrawn')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                    </copy>
                                    <copy>
                                        <from expression="concat( bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), '  ', string(' has  withdrawn '), '   ', bpws:getVariableData('groupName'), '  request. &lt;BR>&lt;BR>Request details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Service Details: &lt;/B>',string('&lt;BR> '), bpws:getVariableData('ServiceDetails'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                    </copy>
                                    <copy>
                                        <from expression="string('text/html; charset=UTF-8')"/>
                                        <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                    </copy>
                                </assign>
               <invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService1" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv18"/>
               <receive name="receiveCompletedTask_ApprovalTask_1" partnerLink="ApprovalTask.TaskService_1" portType="ns2:TaskServiceCallback" operation="onTaskCompleted" variable="ApprovalTask_1_globalVariable" createInstance="no" id="BpRcv14"/>
            </sequence>
            <bpelx:exec name="WD-3" version="1.5" id="BxExe23">
               
            setVariableData("EmailAttribute","REJECTED@aa-epa.gov");     
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");   
setVariableData("AdminGroupEmail","");</bpelx:exec>
         </sequence>
      </scope>
   </sequence></case>
            <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:outcome') = 'REJECT'">
         <bpelx:annotation>
            <bpelx:pattern>Task outcome is REJECT</bpelx:pattern>
            <bpelx:general>
               <bpelx:property name="userLabel">Task outcome is REJECT</bpelx:property>
            </bpelx:general>
         </bpelx:annotation>
         <sequence id="BpSeq64">
            <assign id="BpAss47">
               <copy>
                  <from expression="string('rejected')"/>
                  <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
               </copy>
               <copy>
                  <from expression="ora:getConversationId()"/>
                  <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
               </copy>
               <copy>
                  <from expression="string('rejected')"/>
                  <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
               </copy>
            </assign><scope name="Prompt_Benificiary3" id="BpScp19">
      <bpelx:annotation>
         <bpelx:pattern patternName="bpelx:email"/>
      </bpelx:annotation>
      <variables>
         <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
         <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
         <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
      </variables><sequence name="Sequence7" id="BpSeq65"><sequence name="Sequence1" id="BpSeq66"><assign name="EmailParamsAssign" id="BpAss48"><copy><from expression="string('Default')"/><to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/></copy><copy><from expression="string('')"/><to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/></copy><copy><from expression="string('')"/><to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/></copy><copy><from expression="string('')"/><to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/></copy><copy><from expression="concat('Your ',  bpws:getVariableData('groupName'),'  request has been rejected')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/><to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/></copy><copy><from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'),', ', string('   '), '&lt;BR> &lt;BR> Your request for ', bpws:getVariableData('groupName'),'  has been rejected. Request details given below:', ' &lt;BR>&lt;BR>&lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Role:&lt;/B> ', bpws:getVariableData('groupName'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'), string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Manager Comment: &lt;/B>', string('  '), bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:userComment/task:comment'), string('  &lt;BR>&lt;BR> Click '), bpws:getVariableData('OIMServer'), string(' to track your request.'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/><to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/></copy><copy><from bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="userEmail"/><to bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0" variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/></copy><copy><from expression="string('text/html; charset=UTF-8')"/><to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/></copy></assign><invoke name="InvokeNotificationService" portType="ns18:NotificationService" partnerLink="NotificationService1" inputVariable="varNotificationReq" outputVariable="varNotificationResponse" operation="sendEmailNotification" id="BpInv19"/></sequence><bpelx:exec name="RJ-3" version="1.5" id="BxExe24">
                                setVariableData("EmailAttribute","REJECTED@aa-epa.gov");    
setVariableData("userEmail","REJECTED-userEmail@aa-epa.gov");   
setVariableData("AdminGroupEmail",""); 
setVariableData("SKIP_ISOIMO","FALSE");
                            </bpelx:exec></sequence></scope>
                </sequence>
      </case>
      <case condition="bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:outcome') = 'APPROVE' or bpws:getVariableData(&quot;RequestByManager&quot;) = 'YES'">
         <bpelx:annotation>
            <bpelx:pattern>Task outcome is APPROVE</bpelx:pattern>
            <bpelx:general>
               <bpelx:property name="userLabel">Task outcome is APPROVE</bpelx:property>
            </bpelx:general>
         </bpelx:annotation>
         <sequence id="BpSeq67">
            <assign id="BpAss49">
               <copy>
                  <from expression="string('approved')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                  <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
               </copy>
               <copy>
                  <from expression="ora:getConversationId()"/>
                  <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
               </copy>
               <copy>
                  <from expression="string('approved')"/>
                  <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
               </copy>
            </assign><scope name="Prompt_PSB" id="BpScp20">
      <bpelx:annotation>
         <bpelx:pattern patternName="bpelx:email"/>
      </bpelx:annotation>
      <variables>
         <variable name="varNotificationReq" messageType="ns18:EmailNotificationRequest"/>
         <variable name="varNotificationResponse" messageType="ns18:ArrayOfResponse"/>
         <variable name="NotificationServiceFaultVariable" messageType="ns18:NotificationServiceErrorMessage"/>
      </variables><sequence name="Sequence3" id="BpSeq68"><sequence name="Sequence1" id="BpSeq69">
                                <switch name="Switch8" id="BpSwt17">
                                    <case condition=" bpws:getVariableData(&quot;RequestByManager&quot;) = 'YES'">
                                        <bpelx:annotation>
                                            <bpelx:general>
                                                <bpelx:property name="userLabel">
                                                    Manager Disabled
                                                </bpelx:property>
                                            </bpelx:general>
                                        </bpelx:annotation><sequence name="Sequence26" id="BpSeq70"><assign name="EmailParamsAssign" id="BpAss50">
                                                <copy>
                                                    <from expression="string('Default')"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
                                                </copy>
                                                <copy>
                                                    <from expression="string('')"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
                                                </copy>
                                                <copy>
                                                    <from expression="string('')"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
                                                </copy>
                                                <copy>
                                                    <from expression="string('')"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
                                                </copy>
                                                <copy>
                                                    <from expression="concat(' ', bpws:getVariableData('groupName') , ' enable/disable for  ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
                                                </copy>
                                                <copy>
                                                    <from expression="concat(bpws:getVariableData('EmailAttribute'), string(' '))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
                                                </copy>
                                                <copy>
                                                    <from expression="concat(' &lt;BR> Your request to enable/disable ',bpws:getVariableData('groupName'),' to ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), ' is successful.  &lt;BR>&lt;BR>', string('   '), ' &lt;B>Requester:&lt;/B> ', bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequesterDetails/ns4:DisplayName'), string(' '), '&lt;BR> &lt;B>Requested Action:&lt;/B>  Enable/Disable  ', bpws:getVariableData('groupName'),string(' '), '&lt;BR> &lt;B>Request ID: &lt;/B>', string('  '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:RequestID'), string(' '), '&lt;BR> &lt;B>Justification: &lt;/B>', string('  '), bpws:getVariableData('madd'),string(' '), '&lt;BR> &lt;B>Service Details: &lt;/B>',string('&lt;BR> '), bpws:getVariableData('ServiceDetails'))" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
                                                </copy>
                                                <copy>
                                                    <from expression="string('text/html; charset=UTF-8')"/>
                                                    <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
                                                </copy>
                                            </assign><bpelx:exec name="SKIP_1MO" version="1.5" id="BxExe25">
      
   System.out.println("Manager disable/enable, skipped ISO/IMO to Enable account and send mail: ");</bpelx:exec></sequence></case>
                                    <case condition="bpws:getVariableData(&quot;ADSV_ACCOUNT&quot;) = 'DISABLED'">
                                        <bpelx:annotation>
                                            <bpelx:general>
                                                <bpelx:property name="userLabel">
                                                    User Enabled
                                                </bpelx:property>
                                            </bpelx:general>
                                        </bpelx:annotation><sequence name="Sequence10" id="BpSeq71"><assign name="EmailParamsAssign" id="BpAss51">
            
            
            
            
            
            
            
            
         <copy>
               <from expression="string('Default')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
               <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
            </copy><copy>
               <from expression="string('')"/>
               <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
            </copy><copy>
               <from expression="string('')"/>
               <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
            </copy><copy>
               <from expression="string('')"/>
               <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
            </copy><copy>
               <from expression="concat('Your request  to enable ' ,bpws:getVariableData('groupName'), ' approved')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
               <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
            </copy><copy>
               <from expression="bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:Email')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
               <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
            </copy><copy>
               <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), ', ', string('   '), '&lt;BR> &lt;BR> Your request  to enable your   ', bpws:getVariableData('groupName'), '  has been approved and the account has been  enabled.', string(' '), '&lt;BR>', string(' '),  string('  '), '&lt;BR>', string('   '), 'Please note: Your account is required to be certified every six months by your manager or COR. It is your responsibility to ensure your account is in good standing and is certified. If the account is not certified during the certification window the account will be disabled.')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
               <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
            </copy><copy>
               <from expression="string('text/html; charset=UTF-8')"/>
               <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
            </copy></assign><bpelx:exec name="SKIP_1MO" version="1.5" id="BxExe26">
                                                System.out.println("Skipped ISO/IMO to Enable account and send mail: ");
                                            </bpelx:exec></sequence></case>
                                    <otherwise><assign name="EmailParamsAssign" id="BpAss52">
      
      
      
      
      
      
      
      
   <copy>
         <from expression="string('Default')"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:FromAccountName"/>
      </copy><copy>
         <from expression="string('')"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Bcc"/>
      </copy><copy>
         <from expression="string('')"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Cc"/>
      </copy><copy>
         <from expression="string('')"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:ReplyToAddress"/>
      </copy><copy>
         <from expression="concat('Your ' ,bpws:getVariableData('groupName'), '  request approved')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Subject"/>
      </copy><copy>
         <from expression="bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:Email')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:To"/>
      </copy><copy>
         <from expression="concat('Dear ', string(' '), bpws:getVariableData('inputVariable','payload','/ns3:process/ns4:BeneficiaryDetails/ns4:DisplayName'), ', ', string('   '), '&lt;BR> &lt;BR> Your request for ', bpws:getVariableData('groupName'), '  has been approved and the account has been tentatively provisioned with your local LAN administrator(s).', string(' '), '&lt;BR>', string(' '),  string('  '), '&lt;BR>', string('   '), 'Please note: Your account is required to be certified every six months by your manager or COR.  It is your responsibility to ensure your account is in good standing and is certified.  If the account is not certified during the certification window the account will be disabled.')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:ContentBody"/>
      </copy><copy>
         <from expression="string('text/html; charset=UTF-8')"/>
         <to variable="varNotificationReq" part="EmailPayload" query="/EmailPayload/ns18:Content/ns18:MimeType"/>
      </copy></assign></otherwise>
                                </switch></sequence></sequence></scope></sequence>
      </case>
      <otherwise>
         <sequence id="BpSeq72"><empty name="Empty1" id="BpEmp9"/></sequence>
      </otherwise>
   </switch><assign name="Assign_1" id="BpAss53">
            <copy>
                <from><EndpointReference xmlns="http://www.w3.org/2005/08/addressing">
                        <Address/>
                    </EndpointReference></from>
                <to variable="partnerLink"/>
            </copy>
        <!--    <copy>
                <from variable="inputVariable" part="payload"
                      query="/ns3:process/ns4:url"/>
                <to variable="partnerLink"
                    query="/ns14:EndpointReference/ns14:Address"/>
            </copy> -->
            <copy>
                <from expression="bpws:getVariableData('callbackServiceUrl')"/>
                <to variable="partnerLink" query="/ns14:EndpointReference/ns14:Address"/>
            </copy> 
            <copy>
                <from variable="partnerLink"/>
                <to partnerLink="CallbackService"/>
            </copy>
        </assign>
        <switch name="Switch1" id="BpSwt18">
      <case condition="(bpws:getVariableData('ApprovalTask_1_globalVariable', 'payload', '/task:task/task:systemAttributes/task:outcome') = 'APPROVE'  and  (bpws:getVariableData(&quot;SKIP_ISOIMO&quot;) = 'TRUE'))">
         <bpelx:annotation>
            <bpelx:general>
               <bpelx:property name="userLabel">
                            SKIP_ISOIMO True
                        </bpelx:property>
            </bpelx:general>
         </bpelx:annotation>
         <sequence id="BpSeq73"><assign id="BpAss54">
      <copy>
         <from expression="string('approved')" bpelx:language="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"/>
         <to variable="outputVariable" part="payload" query="/ns3:processResponse/ns3:result"/>
      </copy>
      <copy>
         <from expression="ora:getConversationId()"/>
         <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg0"/>
      </copy>
      <copy>
         <from expression="string('approved')"/>
         <to variable="Invoke_1_callback_InputVariable_1" part="parameters" query="/ns1:callback/arg1"/>
      </copy>
   </assign><bpelx:exec name="RJ-Prov" version="1.5" id="BxExe27">
                        String skipIsoImo = (String) getVariableData("SKIP_ISOIMO");            
System.out.println("The skipIsoImo value before Provisioning :- "+skipIsoImo);    
String appInstName = "ADSERAccount";    
 
String usrAccStatus = (String) getVariableData("ADSV_ACCOUNT");          
System.out.println("The usrAccStatus value in ISO is:- "+usrAccStatus);      
 
String oidPerson = "";    
String empNo = "";      
String templateUserNames = getVariableData("CYA_ADMINS").toString();    
String OIM_Server = "";                  
String svcAccName = getVariableData("SVC_ACC").toString();		   
   
String svcFunction = "";    
String logWorkstation = "";    
String secOwner = "";    
String serOwner = "";    
String adminNotes = ""; 	 
 
 
 
 
            String  envPwd = (String) getVariableData("EnvPwd");    
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key ="",DbConnectionString="", DbUserId="";          
                         //get oimurl                                                      
                        Object obj = getVariableData("oimurl");                                                                             
                    //    oimURL = obj.toString();                                        
			String tempStr = obj.toString();                                       
			String[] tempArr = tempStr.split("//");                                       
			//oimURL = "t3://"+tempArr[1].split("/")[0]; 						                                      
			//oimURL ="t3://192.168.1.62:14000";            
                        oimURL = getVariableData("mcurl").toString();       
			System.out.println("oimURL is == "+oimURL);                                                     
                                                     
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                               
                        String authLoginConfig = "java.security.auth.login.config";                                                               
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                               
			// set up the environment for making the OIM API invocation                                                              
			                                                          
			java.util.Hashtable env = new java.util.Hashtable();                                                               
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                               
			oimInitialContextFactory);                                                               
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                               
			env.put(authLoginConfig, authLoginConfigPath);                                                               
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                             
			                                                          
			//client.login(oimUserName, oimPassword.toCharArray());    
                        java.lang.Object userLogin = "";                                            
                        java.lang.Object isoManager = "";                                           
                        java.lang.Object managerOutcome = "";                                     
                        java.lang.Object rEmail = "";  
						java.lang.Object UserDisplayName = "";	 
						 
									String manOutcome = "";       
						String mgrRequest = getVariableData("RequestByManager").toString();       
						String requestForOthers = getVariableData("RequestForOthers").toString();	      
						System.out.println("The mgrRequest's request is :- "+mgrRequest);                       
						                      
						if ((mgrRequest.equalsIgnoreCase("YES")) || (requestForOthers.equalsIgnoreCase("YES"))){                      
						                      
							manOutcome = "APPROVE";                      
						}else        
						{	       
							managerOutcome = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:systemAttributes/task:outcome");                                            
							manOutcome =  ((oracle.xml.parser.v2.XMLElement)managerOutcome).getText();            
       
						}       
                        System.out.println("The user's manager managerOutcome2:- "+manOutcome);  						                      
						String rejectEmail = "";       
						 
						java.util.HashMap&lt;String, String> svcMap = new java.util.HashMap&lt;String, String>(); 
			   
try {      
// Set webURL      
      
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                       
            String hostName = localMachine.getHostName().toString();          
            String webUrl = "http://" +hostName +":15000/";         
            setVariableData("webserUrl",webUrl);         
            System.out.println("hostName in NL1 : " + hostName);        
            System.out.println("webUrl of NL1 : " + webUrl);     
            client.login(oimUserName, oimPassword.toCharArray());   
			userLogin =getVariableData("inputVariable", "payload",                                                       
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");   
			String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                         
            System.out.println("User Login in N1 is:- "+usrLogin);  
			UserDisplayName =getVariableData("inputVariable", "payload",                                                                    
	        		   "/ns3:process/ns4:RequesterDetails/ns4:DisplayName");     
			String loginUsrDisplayName =  ((oracle.xml.parser.v2.XMLElement)UserDisplayName).getText(); 			 
			 
            java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                     
            String RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                        
  			System.out.println("RequestID in NL1 is == "+RequestID);			 
   
 try {                                            
                                                Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                          
                                                com.thortech.xl.dataaccess.tcDataProvider dbProvider4 = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                         
                                               // String query2 = "select usr_email from usr where usr_login in ("+userIDS+")";                                               
                                                String query4 = "select usr_key as userKey from usr where usr_login='"+usrLogin+"'";                                            
                                                System.out.println("usr_key Query4 in NL1 is == "+query4);                                           
                                                //setVariableData("commentc","");                                          
                                                com.thortech.xl.dataaccess.tcDataSet usersDataSet4 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                         
                                                usersDataSet4.setQuery(dbProvider4, query4);                                                          
                                                usersDataSet4.executeQuery();                          
                                                int numColumns2 = usersDataSet4.getColumnCount();                                                         
                                                int numRecords2 = usersDataSet4.getTotalRowCount();                                                  
                                                                
                                                System.out.println("Column Count:- "+numColumns2);                                                    
                                                System.out.println("Record Count:- "+numRecords2);                                                                
                                                //iterate through each record                                                         
                                                for(int r = 0; r &lt; numRecords2; r++)                                                         
                                                {                                                         
                                                    usersDataSet4.goToRow(r);                                                         
                                                              
                                                //iterate through each column of a record                                                         
                                                for(int s = 0; s &lt; numColumns2; s++)                                                         
                                                {                                                                   
                                                    usr_key += usersDataSet4.getString(s);                          
												System.out.println("usr_key-->"+usr_key);                          
													                         
                                                }                                               
                                            }                          
						}catch (java.lang.Exception e6){                                                                 
								e6.printStackTrace();                                                                 
						}                
						  
   						                  						                    
                        System.out.println("The user's manager has:- "+manOutcome);                                   
                        rEmail = getVariableData("EmailAttribute");                               
                        System.out.println("The user's manager rEmail:- "+rEmail);      
 
 
               try                                                           
                    {                                                          
                                                                                  
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                    
				com.thortech.xl.dataaccess.tcDataProvider svcProvider = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                   
            
					String svcQuery =  "select RBED_ENTITY_FIELD_NAME, RBED_ENTITY_FIELD_VALUE from REQUEST_BENEFICIARY_ENTITYDATA where rbed_rbe_key in (select rbe_key from REQUEST_BENEFICIARY_ENTITIES where rbe_request_key='" + RequestID + "')";								            
   
                                System.out.println("svcQuery in NativeLogic is == "+svcQuery);                             
								            
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                   
				usersDataSet1.setQuery(svcProvider, svcQuery);                                                                    
				usersDataSet1.executeQuery();                                                                   
					                                                                   
		                                                                               
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                   
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                            
                                                          
                                System.out.println("Column Count:- "+numColumns1);                                                              
                                System.out.println("Record Count:- "+numRecords1);                                                              
                                //iterate through each record              
                                String userSvc = "";                
                             for(int k = 0; k &lt; numRecords1; k++)                                                                    
                                {                                                                   
		                usersDataSet1.goToRow(k);                                                                   
                                                  
		                //iterate through each column of a record                                                                   
		                for(int m = 0; m &lt; numColumns1-1; m++)                                                                   
		                {                                                                   
		                    String columnName = usersDataSet1.getString(0);                                                                   
		                    String value = usersDataSet1.getString(1);           
                                               
                                    if (!(columnName.equals("AD Server") || columnName.equals("#endDate") || columnName.equals("#startDate")))            
                                  {           
									 userSvc += columnName +":-- " + value + "&lt;BR>";       
									 svcMap.put(columnName,value);   
   
										if (columnName.equals("FunctionOfService")) {   
												svcFunction = value;   
										} else if (columnName.equals("LogonWorkstations")) {   
												logWorkstation = value;   
										} else if (columnName.equals("SecondaryOwners")) {   
												secOwner = value;   
										} else if (columnName.equals("ServiceAccountOwners")) {   
												serOwner = value;   
										} else if (columnName.equals("AdminNotes")) {  
												adminNotes = value;   
										}   
                                   }                                                                                                                                                                        
		                }            
						            
		            }            
							userSvc = userSvc.substring(0,userSvc.length()-1);             
							setVariableData("ServiceDetails",userSvc);             
                            System.out.println("The Service request details :-"+userSvc); 							            
                    }                                                          
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                          
                {                                                          
                    e3.printStackTrace();                                                           
                }    
    
             try                                                                          
                   {                                                                         
                                                                                                 
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client); 	       
							oracle.iam.notification.api.NotificationService notsvc = client.getService(oracle.iam.notification.api.NotificationService.class);       
							oracle.iam.notification.vo.NotificationEvent notevent = new oracle.iam.notification.vo.NotificationEvent();	 							      
							java.util.HashMap templateParams = new java.util.HashMap();     
							templateParams.put("UserId",usrLogin);    
							templateParams.put("UserName",loginUsrDisplayName);							    
							templateParams.put("RequestId",RequestID);    
							templateParams.put("OIM_Server",getVariableData("OIMServer"));    
							templateParams.put("Justification",getVariableData("madd"));							    
							String templateName = "";      
							//String recEmail = getVariableData("EmailAttribute").toString();      
							String[] userIdEmails = { usrLogin };     
							// String[] receiverUserIds = templateUserNames.split(",");      
							String[] receiverUserIds = templateUserNames.split(",");						      
      
    
               try                                                                                            
                    {                                                                                           
                                                                                                                   
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                                                     
				com.thortech.xl.dataaccess.tcDataProvider dbProviderU = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                                                    
                             //   String queryU = "select USR_STATUS from usr where usr_login ='"+mgrLogin+"'";        
                                String queryU = "select USR_UDF_OIDPERSON,USR_EMP_NO from USR WHERE USR_LOGIN ='"+usrLogin+"'";   								    
                                System.out.println("QueryU in NativeLogic is == "+queryU);                                                                                             
                                com.thortech.xl.dataaccess.tcDataSet usersDataSetU = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                                                    
				usersDataSetU.setQuery(dbProviderU, queryU);                                                                                                     
				usersDataSetU.executeQuery();                                                                                                    
					                                                                                                    
		                                                                                                                
                                int numColumnsU = usersDataSetU.getColumnCount();                                                                                                    
                                int numRecordsU = usersDataSetU.getTotalRowCount();                                                                                             
                                                                                           
                                System.out.println("Column Count:- "+numColumnsU);                                                                                               
                                System.out.println("Record Count:- "+numRecordsU);                                                                                               
                                //iterate through each record                                                                                                    
                             for(int k = 0; k &lt; numRecordsU; k++)                                                                                                    
                                {                                                                                                    
		                usersDataSetU.goToRow(k);                                                                                                    
		                                                                                                     
		                //iterate through each column of a record                                                                                                    
		                for(int m = 0; m &lt; numColumnsU; m++)                                                                                                    
		                {                                                                                                    
		                    String columnName = usersDataSetU.getColumnName(m);                                                                                                    
		                    String value = usersDataSetU.getString(m);     
								if (m==0)                       
								{             
								    oidPerson = value;                 								                        
									System.out.println("The oidPerson is :- "+value);      
								}else if (m==1)     
								{     
								    empNo = value;                  								                        
									System.out.println("The empNo is :- "+value); 								     
								}     
                                                                                                   
		                }                                                                                                    
		            }                                                                                                    
                    }                                                                                           
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                                                           
                {                                                                                           
                    e3.printStackTrace();                                                                                            
                }     
    
      
               try                                                             
                    {                                                            
                                                                                    
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                      
				com.thortech.xl.dataaccess.tcDataProvider svcProvider = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                     
                                String svcQuery = "select LKV_ENCODED, LKV_DECODED from LKV where LKU_KEY =(select LKU_KEY from lku where lku.lku_type_string_key = 'LSCYTemplatesParams') and LKV_ENCODED like 'End%'";               
                                System.out.println("svcQuery in NativeLogic is == "+svcQuery);                               
								              
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                     
				usersDataSet1.setQuery(svcProvider, svcQuery);                                                                      
				usersDataSet1.executeQuery();                                                                     
					                                                                     
		                                                                                 
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                     
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                              
                                                            
                                System.out.println("Column Count:- "+numColumns1);                                                                
                                System.out.println("Record Count:- "+numRecords1);                                                                
                                //iterate through each record                
                                String userSvc = "";           
							//	java.util.ArrayList&lt;java.lang.String> listTemplate = new ArrayList&lt;java.lang.String>();      
							String listTemplate = "";      
                             for(int k = 0; k &lt; numRecords1; k++)                                                                      
                                {                                                                     
		                usersDataSet1.goToRow(k);                                                                     
                                                    
		                //iterate through each column of a record                                                                     
		                for(int m = 0; m &lt; numColumns1-1; m++)                                                                     
		                {                                                                     
		                    String columnName = usersDataSet1.getString(0);                                                                     
		                    String value = usersDataSet1.getString(1);             
										System.out.println("The columnName is "+columnName) ;      
										System.out.println("The value is "+value);							      
                                                 
                                  //  if ((columnName.equals("ManagerTemplate") ))      
									if ((columnName.contains("Template") ))       
                                  {             
										System.out.println("The Template Name is "+value) ;      
										//System.out.println("The UserIds are "+ receiverUserIds);      
										//listTemplate.add(value);      
										listTemplate += value + ",";      
										//templateName = value;      
										//notevent.setTemplateName(value);										      
										//notevent.setUserIds(receiverUserIds);       
										      
									      
                                   }else {      
										System.out.println("The Param value is "+ value);       
										templateParams.put(columnName,value);       
										      
								   }      
			      
								         
		                }      
							notevent.setSender(null);       
							notevent.setParams(templateParams);       
      
						      
						              
		            }     
     
							java.util.Set&lt;java.util.Map.Entry&lt;String,String>> s = svcMap.entrySet();     
							for (java.util.Map.Entry&lt;String,String> entry: s){     
							  templateParams.put(entry.getKey(),entry.getValue());     
							}					     
							listTemplate = listTemplate.substring(0,listTemplate.length()-1);      
							String[] parList = listTemplate.split(",");      
					        for(String template:parList)      
							{      
							notevent.setTemplateName(template);      
							if ((template.contains("Usr") )){    
							notevent.setUserIds(userIdEmails);     
							} else {    
							notevent.setUserIds(receiverUserIds);     
							}     
							System.out.println("Sending Email for "+template);       
							notsvc.notify(notevent);								      
							}      
						              
                    }                                                            
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                            
                {                                                            
                    e3.printStackTrace();                                                             
                }        
      
					                                                                                
       
                    }                                                                         
                catch(Exception e4)                                                                         
                {                                                                         
                    e4.printStackTrace();                                                                          
                } 					     
						                              
     
				DbUserId = (String) getVariableData("DbUserId");       
				DbConnectionString = (String) getVariableData("DbUrl");       
				DbPassword = (String) getVariableData("DbPwd");					     
				                			                 
              
				String query3 = "";              
				if (skipIsoImo.equalsIgnoreCase("TRUE") &amp;&amp; (manOutcome.equalsIgnoreCase("APPROVE") )) {              
					query3 = "update REQUEST set request_status = 'Request Completed' where request_key = '"+RequestID+"'";              
				}else if (manOutcome.equalsIgnoreCase("REJECT")){              
					query3 = "update REQUEST set request_status = 'Request Rejected' where request_key = '"+RequestID+"'";              
				}              
				                 
				System.out.println("The query3  is :-"+query3);              
    
				//String query4 = "INSERT INTO EPA_LOCAL_SERVICE_ACCOUNTS (USR_UDF_OIDPERSON,USR_EMP_NO,USR_LOGIN,REQUESTID,SERVICE_ACCOUNT_NAME) VALUES('"+oidPerson+"','"+empNo+"','"+usrLogin+"','"+RequestID+"','"+svcAccName+"')";  					              
				String query4 = "INSERT INTO EPA_LOCAL_SERVICE_ACCOUNTS (USR_UDF_OIDPERSON,USR_EMP_NO,USR_LOGIN,REQUESTID,SERVICE_ACCOUNT_NAME,ACCOUNT_SYSTEMS,ACCOUNT_FUNCTION,ACCOUNT_OWNERS,SECONDARY_OWNERS,ADMIN_NOTES) VALUES('"+oidPerson+"','"+empNo+"','"+usrLogin+"','"+RequestID+"','"+svcAccName+"','"+logWorkstation+"','"+svcFunction+"','"+serOwner+"','"+secOwner+"','"+adminNotes+"')";     
   
				java.sql.Connection  con = null;                            
				java.sql.Statement stmt = null;                 
				                 
                 
                      
				try {                      
					//Connecting to staging database and trying to execute update statement					                         
					Class.forName("oracle.jdbc.OracleDriver");                               
					con=java.sql.DriverManager.getConnection(DbConnectionString,DbUserId,DbPassword);                 
					stmt=con.createStatement();                     
					//query3 = "update REQUEST set request_status = 'Request Completed' where request_key = '"+RequestID+"'";     
					stmt.executeUpdate(query4);     
					System.out.println("The query4  Executed"); 					    
					stmt.executeUpdate(query3);        
					System.out.println("The query3  Executed"); 					    
				}                             
				catch(Exception e){					                         
					System.out.println("Exception on trying to update database");                         
					System.out.println(e);                         
					e.printStackTrace();                          
					System.out.println("--------------------------------------");                         
                      
				}                               
				finally {                         
					stmt.close();                            
					con.close();                            
				}  
 
   
 
 
 
   
   
			   
            String callbackServiceUrl="http://"+hostName+":15000"+"/workflowservice/CallbackService";      
            setVariableData("callbackServiceUrl",callbackServiceUrl);      
      
}catch (java.lang.Exception e){                                                       
                    e.printStackTrace();                                                       
            }
                    </bpelx:exec><invoke name="Invoke_1" inputVariable="Invoke_1_callback_InputVariable_1" outputVariable="Invoke_1_callback_OutputVariable_1" partnerLink="CallbackService" portType="ns1:CallbackService" operation="callback" id="BpInv20"/><invoke name="callbackClient" portType="client:ApprovalProcessCallback" operation="processResponse" partnerLink="RequestApprovalService" inputVariable="outputVariable" id="BpInv21"/></sequence>
      </case>
      <otherwise>
         <bpelx:annotation>
            <bpelx:documentation>
               Continue
            </bpelx:documentation>
         </bpelx:annotation>
         <sequence name="Sequence4" id="BpSeq74">
            
         <bpelx:exec name="RJ-END" version="1.5" id="BxExe28">
                        //setVariableData("SKIP_ISOIMO", "COMPLETED");                    
String skipIsoImo = (String) getVariableData("SKIP_ISOIMO");          
String mgrRequest = (String) getVariableData("RequestByManager");                    
System.out.println("The skipIsoImo value before setting in Last java Block :- "+skipIsoImo);                    
                    
//System.out.println("Getting ISO Approvers");                                                         
 //setVariableData("commentc","DKOTLIN");                                              
//System.out.println("Column Count:- after DKOTLIN1, with new OIM URL CODE***************");                                           
String usrAccStatus = (String) getVariableData("ADSV_ACCOUNT");         
System.out.println("The usrAccStatus value in ISO is:- "+usrAccStatus);     
   
String oidPerson = "";   
String empNo = "";     
String templateUserNames = getVariableData("CYA_ADMINS").toString();   
String OIM_Server = "";                 
String svcAccName = getVariableData("SVC_ACC").toString();		  
  
String svcFunction = "";   
String logWorkstation = "";   
String secOwner = "";   
String serOwner = "";   
String adminNotes = ""; 			   
                                 
                                        
try {                     
     
// Set webURL      
      
            java.net.InetAddress localMachine = java.net.InetAddress.getLocalHost();                       
            String hostName = localMachine.getHostName().toString();          
            String webUrl = "http://" +hostName +":15000/";         
            setVariableData("webserUrl",webUrl);         
            System.out.println("hostName in NL1 : " + hostName);        
            System.out.println("webUrl of NL1 : " + webUrl);        
     
            String  envPwd = (String) getVariableData("EnvPwd");          
          //  String oimUserName = "xelsysadm", oimPassword ="t3I0We0W5" , oimURL="" ; // PROD                                     
            String oimUserName = "xelsysadm", oimPassword =envPwd, oimURL="" ,DbPassword ="", usr_key ="",DbConnectionString="", DbUserId=""; // Staging                   
           
          
                        java.lang.Object userLogin = "";                                          
                        java.lang.Object isoManager = "";                                         
                        java.lang.Object managerOutcome = "";                                   
                        java.lang.Object rEmail = "";      
						java.lang.Object UserDisplayName = "";							   
                       // java.lang.Object managerComment = "";                           
                		                                    
                                                   
                                                
            Object obj = getVariableData("oimurl");                                                                                              
			String tempStr = obj.toString();                                     
			String[] tempArr = tempStr.split("//");                                     
			//oimURL = "t3://"+tempArr[1].split("/")[0]; 						                                    
			//oimURL ="t3://192.168.1.62:14000";       
                        oimURL = getVariableData("mcurl").toString();        
			System.out.println("oimURL is == "+oimURL);                                                   
                                                   
			String oimInitialContextFactory = "weblogic.jndi.WLInitialContextFactory";                                                             
                        String authLoginConfig = "java.security.auth.login.config";                                                             
                        String authLoginConfigPath = "/usr/opt/oracle/product/Middleware_IAM/Oracle_IAM1/server/config/authwl.conf";                                                             
			// set up the environment for making the OIM API invocation                                                            
			                                                        
			java.util.Hashtable env = new java.util.Hashtable();                                                             
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_FACTORY_INITIAL,                                                             
			oimInitialContextFactory);                                                             
			env.put(oracle.iam.platform.OIMClient.JAVA_NAMING_PROVIDER_URL, oimURL);                                                             
			env.put(authLoginConfig, authLoginConfigPath);                                                             
			oracle.iam.platform.OIMClient client = new oracle.iam.platform.OIMClient(env);                                                           
			                                                        
			client.login(oimUserName, oimPassword.toCharArray());                                                          
			java.lang.Object roleXMLString = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestTarget");                                                        
			String roleString = ((oracle.xml.parser.v2.XMLElement)roleXMLString).getText();                                                             
                        System.out.println("Role in NL1 is :- "+roleString);                                    
                        System.out.println("Before getting the request ID");                                     
                        //java.lang.Object requestIDXML = getVariableData("inputVariable", "payload","/ns3:process/ns4:RequestId");                                     
                        java.lang.Object requestIDXML = getVariableData("RequestID", "RequestId","/ns16:RequestId");                                    
                        String RequestID = ((oracle.xml.parser.v2.XMLElement)requestIDXML).getText();                                                       
  			System.out.println("RequestID in NL1 is == "+RequestID);                                            
 	                userLogin =getVariableData("inputVariable", "payload",                                                      
	        		   "/ns3:process/ns4:BeneficiaryDetails/ns4:Login");                                          
                        String usrLogin =  ((oracle.xml.parser.v2.XMLElement)userLogin).getText();                                        
                        System.out.println("User Login in N1 is:- "+usrLogin);      
						UserDisplayName =getVariableData("inputVariable", "payload",                                                                   
	        		   "/ns3:process/ns4:RequesterDetails/ns4:DisplayName");    
						String loginUsrDisplayName =  ((oracle.xml.parser.v2.XMLElement)UserDisplayName).getText(); 						   
                        System.out.println("Before user's manager managerOutcome1:- ");    
						java.util.HashMap&lt;String, String> svcMap = new java.util.HashMap&lt;String, String>();							   
                           
 	             //   managerComment = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:userComment/task:comment");                                          
                     //   String manComment =  ((oracle.xml.parser.v2.XMLElement)managerComment).getText();                             
                    String manOutcome = "";       
                  if ((mgrRequest.equalsIgnoreCase("YES"))) // || (usrAccStatus.equalsIgnoreCase("DISABLED"))) -- commented out on 06/36/2019        
				     {         
						manOutcome = "APPROVE";         
                        System.out.println("The request for others is made by manager and manOutcome is set to :- "+manOutcome);                 
						                
					 }else {         
 	                managerOutcome = getVariableData("ApprovalTask_1_globalVariable", "payload", "/task:task/task:systemAttributes/task:outcome");                                          
                        manOutcome =  ((oracle.xml.parser.v2.XMLElement)managerOutcome).getText(); 					          
                        System.out.println("The user's manager managerOutcome2:- "+manOutcome);  					          
					 }   
   
               try                                                          
                    {                                                         
                                                                                 
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                   
				com.thortech.xl.dataaccess.tcDataProvider svcProvider = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                  
           
					String svcQuery =  "select RBED_ENTITY_FIELD_NAME, RBED_ENTITY_FIELD_VALUE from REQUEST_BENEFICIARY_ENTITYDATA where rbed_rbe_key in (select rbe_key from REQUEST_BENEFICIARY_ENTITIES where rbe_request_key='" + RequestID + "')";								           
  
                                System.out.println("svcQuery in NativeLogic is == "+svcQuery);                            
								           
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                  
				usersDataSet1.setQuery(svcProvider, svcQuery);                                                                   
				usersDataSet1.executeQuery();                                                                  
					                                                                  
		                                                                              
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                  
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                           
                                                         
                                System.out.println("Column Count:- "+numColumns1);                                                             
                                System.out.println("Record Count:- "+numRecords1);                                                             
                                //iterate through each record             
                                String userSvc = "";               
                             for(int k = 0; k &lt; numRecords1; k++)                                                                   
                                {                                                                  
		                usersDataSet1.goToRow(k);                                                                  
                                                 
		                //iterate through each column of a record                                                                  
		                for(int m = 0; m &lt; numColumns1-1; m++)                                                                  
		                {                                                                  
		                    String columnName = usersDataSet1.getString(0);                                                                  
		                    String value = usersDataSet1.getString(1);          
                                              
                                    if (!(columnName.equals("AD Server") || columnName.equals("#endDate") || columnName.equals("#startDate")))           
                                  {          
									 userSvc += columnName +":-- " + value + "&lt;BR>";      
									 svcMap.put(columnName,value);  
  
										if (columnName.equals("FunctionOfService")) {  
												svcFunction = value;  
										} else if (columnName.equals("LogonWorkstations")) {  
												logWorkstation = value;  
										} else if (columnName.equals("SecondaryOwners")) {  
												secOwner = value;  
										} else if (columnName.equals("ServiceAccountOwners")) {  
												serOwner = value;  
										} else if (columnName.equals("AdminNotes")) { 
												adminNotes = value;  
										}  
                                   }                                                                                                                                                                       
		                }           
						           
		            }           
							userSvc = userSvc.substring(0,userSvc.length()-1);            
							setVariableData("ServiceDetails",userSvc);            
                            System.out.println("The Service request details :-"+userSvc); 							           
                    }                                                         
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                         
                {                                                         
                    e3.printStackTrace();                                                          
                }   
   
             try                                                                         
                   {                                                                        
                                                                                                
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client); 	      
							oracle.iam.notification.api.NotificationService notsvc = client.getService(oracle.iam.notification.api.NotificationService.class);      
							oracle.iam.notification.vo.NotificationEvent notevent = new oracle.iam.notification.vo.NotificationEvent();	 							     
							java.util.HashMap templateParams = new java.util.HashMap();    
							templateParams.put("UserId",usrLogin);   
							templateParams.put("UserName",loginUsrDisplayName);							   
							templateParams.put("RequestId",RequestID);   
							templateParams.put("OIM_Server",getVariableData("OIMServer"));   
							templateParams.put("Justification",getVariableData("madd"));							   
							String templateName = "";     
							//String recEmail = getVariableData("EmailAttribute").toString();     
							String[] userIdEmails = { usrLogin };    
							// String[] receiverUserIds = templateUserNames.split(",");     
							String[] receiverUserIds = templateUserNames.split(",");						     
     
   
               try                                                                                           
                    {                                                                                          
                                                                                                                  
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                                                    
				com.thortech.xl.dataaccess.tcDataProvider dbProviderU = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                                                   
                             //   String queryU = "select USR_STATUS from usr where usr_login ='"+mgrLogin+"'";       
                                String queryU = "select USR_UDF_OIDPERSON,USR_EMP_NO from USR WHERE USR_LOGIN ='"+usrLogin+"'";   								   
                                System.out.println("QueryU in NativeLogic is == "+queryU);                                                                                            
                                com.thortech.xl.dataaccess.tcDataSet usersDataSetU = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                                                   
				usersDataSetU.setQuery(dbProviderU, queryU);                                                                                                    
				usersDataSetU.executeQuery();                                                                                                   
					                                                                                                   
		                                                                                                               
                                int numColumnsU = usersDataSetU.getColumnCount();                                                                                                   
                                int numRecordsU = usersDataSetU.getTotalRowCount();                                                                                            
                                                                                          
                                System.out.println("Column Count:- "+numColumnsU);                                                                                              
                                System.out.println("Record Count:- "+numRecordsU);                                                                                              
                                //iterate through each record                                                                                                   
                             for(int k = 0; k &lt; numRecordsU; k++)                                                                                                   
                                {                                                                                                   
		                usersDataSetU.goToRow(k);                                                                                                   
		                                                                                                    
		                //iterate through each column of a record                                                                                                   
		                for(int m = 0; m &lt; numColumnsU; m++)                                                                                                   
		                {                                                                                                   
		                    String columnName = usersDataSetU.getColumnName(m);                                                                                                   
		                    String value = usersDataSetU.getString(m);    
								if (m==0)                      
								{            
								    oidPerson = value;                 								                       
									System.out.println("The oidPerson is :- "+value);     
								}else if (m==1)    
								{    
								    empNo = value;                  								                       
									System.out.println("The empNo is :- "+value); 								    
								}    
                                                                                                  
		                }                                                                                                   
		            }                                                                                                   
                    }                                                                                          
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                                                          
                {                                                                                          
                    e3.printStackTrace();                                                                                           
                }    
   
     
               try                                                            
                    {                                                           
                                                                                   
                        	Thor.API.Security.XLClientSecurityAssociation.setClientHandle(client);                                                                     
				com.thortech.xl.dataaccess.tcDataProvider svcProvider = new com.thortech.xl.client.dataobj.tcDataBaseClient();                                                                    
                                String svcQuery = "select LKV_ENCODED, LKV_DECODED from LKV where LKU_KEY =(select LKU_KEY from lku where lku.lku_type_string_key = 'LSCYTemplatesParams') and LKV_ENCODED like 'End%'";              
                                System.out.println("svcQuery in NativeLogic is == "+svcQuery);                              
								             
                                com.thortech.xl.dataaccess.tcDataSet usersDataSet1 = new com.thortech.xl.dataaccess.tcDataSet(); //store result set of query                                                                    
				usersDataSet1.setQuery(svcProvider, svcQuery);                                                                     
				usersDataSet1.executeQuery();                                                                    
					                                                                    
		                                                                                
                                int numColumns1 = usersDataSet1.getColumnCount();                                                                    
                                int numRecords1 = usersDataSet1.getTotalRowCount();                                                             
                                                           
                                System.out.println("Column Count:- "+numColumns1);                                                               
                                System.out.println("Record Count:- "+numRecords1);                                                               
                                //iterate through each record               
                                String userSvc = "";          
							//	java.util.ArrayList&lt;java.lang.String> listTemplate = new ArrayList&lt;java.lang.String>();     
							String listTemplate = "";     
                             for(int k = 0; k &lt; numRecords1; k++)                                                                     
                                {                                                                    
		                usersDataSet1.goToRow(k);                                                                    
                                                   
		                //iterate through each column of a record                                                                    
		                for(int m = 0; m &lt; numColumns1-1; m++)                                                                    
		                {                                                                    
		                    String columnName = usersDataSet1.getString(0);                                                                    
		                    String value = usersDataSet1.getString(1);            
										System.out.println("The columnName is "+columnName) ;     
										System.out.println("The value is "+value);							     
                                                
                                  //  if ((columnName.equals("ManagerTemplate") ))     
									if ((columnName.contains("Template") ))      
                                  {            
										System.out.println("The Template Name is "+value) ;     
										//System.out.println("The UserIds are "+ receiverUserIds);     
										//listTemplate.add(value);     
										listTemplate += value + ",";     
										//templateName = value;     
										//notevent.setTemplateName(value);										     
										//notevent.setUserIds(receiverUserIds);      
										     
									     
                                   }else {     
										System.out.println("The Param value is "+ value);      
										templateParams.put(columnName,value);      
										     
								   }     
			     
								        
		                }     
							notevent.setSender(null);      
							notevent.setParams(templateParams);      
     
						     
						             
		            }    
    
							java.util.Set&lt;java.util.Map.Entry&lt;String,String>> s = svcMap.entrySet();    
							for (java.util.Map.Entry&lt;String,String> entry: s){    
							  templateParams.put(entry.getKey(),entry.getValue());    
							}					    
							listTemplate = listTemplate.substring(0,listTemplate.length()-1);     
							String[] parList = listTemplate.split(",");     
					        for(String template:parList)     
							{     
							notevent.setTemplateName(template);     
							if ((template.contains("Usr") )){   
							notevent.setUserIds(userIdEmails);    
							} else {   
							notevent.setUserIds(receiverUserIds);    
							}    
							System.out.println("Sending Email for "+template);      
							notsvc.notify(notevent);								     
							}     
						             
                    }                                                           
                catch(com.thortech.xl.dataaccess.tcDataSetException e3)                                                           
                {                                                           
                    e3.printStackTrace();                                                            
                }       
     
					                                                                               
      
                    }                                                                        
                catch(Exception e4)                                                                        
                {                                                                        
                    e4.printStackTrace();                                                                         
                } 					    
						                             
    
				DbUserId = (String) getVariableData("DbUserId");      
				DbConnectionString = (String) getVariableData("DbUrl");      
				DbPassword = (String) getVariableData("DbPwd");					    
				                
			//if (skipIsoImo.equalsIgnoreCase("TRUE")) { 			                
             
				String query3 = "";             
				if (skipIsoImo.equalsIgnoreCase("TRUE") &amp;&amp; (manOutcome.equalsIgnoreCase("APPROVE") )) {             
					query3 = "update REQUEST set request_status = 'Request Completed' where request_key = '"+RequestID+"'";             
				}else if (manOutcome.equalsIgnoreCase("REJECT")){             
					query3 = "update REQUEST set request_status = 'Request Rejected' where request_key = '"+RequestID+"'";             
				}             
				                
				System.out.println("The query3  is :-"+query3);             
   
				//String query4 = "INSERT INTO EPA_LOCAL_SERVICE_ACCOUNTS (USR_UDF_OIDPERSON,USR_EMP_NO,USR_LOGIN,REQUESTID,SERVICE_ACCOUNT_NAME) VALUES('"+oidPerson+"','"+empNo+"','"+usrLogin+"','"+RequestID+"','"+svcAccName+"')";  					             
				String query4 = "INSERT INTO EPA_LOCAL_SERVICE_ACCOUNTS (USR_UDF_OIDPERSON,USR_EMP_NO,USR_LOGIN,REQUESTID,SERVICE_ACCOUNT_NAME,ACCOUNT_SYSTEMS,ACCOUNT_FUNCTION,ACCOUNT_OWNERS,SECONDARY_OWNERS,ADMIN_NOTES) VALUES('"+oidPerson+"','"+empNo+"','"+usrLogin+"','"+RequestID+"','"+svcAccName+"','"+logWorkstation+"','"+svcFunction+"','"+serOwner+"','"+secOwner+"','"+adminNotes+"')";    
  
				java.sql.Connection  con = null;                           
				java.sql.Statement stmt = null;                
				                
                
                     
				try {                     
					//Connecting to staging database and trying to execute update statement					                        
					Class.forName("oracle.jdbc.OracleDriver");                              
					con=java.sql.DriverManager.getConnection(DbConnectionString,DbUserId,DbPassword);                
					stmt=con.createStatement();                    
					//query3 = "update REQUEST set request_status = 'Request Completed' where request_key = '"+RequestID+"'";    
					stmt.executeUpdate(query4);    
					System.out.println("The query4  Executed"); 					   
					stmt.executeUpdate(query3);       
					System.out.println("The query3  Executed"); 					   
				}                            
				catch(Exception e){					                        
					System.out.println("Exception on trying to update database");                        
					System.out.println(e);                        
					e.printStackTrace();                         
					System.out.println("--------------------------------------");                        
                     
				}                              
				finally {                        
					stmt.close();                           
					con.close();                           
				}                 
					                
					                
					                
					                
					                
						                
			//}			                
						                
	}catch (java.lang.Exception e){                                                    
                    e.printStackTrace();                                                    
            }
                    </bpelx:exec></sequence>
      </otherwise>
   </switch>
    </sequence>
</process>